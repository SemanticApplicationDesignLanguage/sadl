 uri "http://sadl.org/PeopleData.sadl" alias PeopleData.
 
 import "http://sadl.org/PeopleModel.sadl".
 
 Adam is a Man with age 50 yrs.
 Eve is a Woman with age 50.
 Cain is a Person with age 35.
 
 Adam has child Cain.
 child of Eve is Cain. 
 Cain has brother (a Man Abel with age 32).
 Cain has sister (a Woman with age 25).

 A Marriage with husband (a Man Dan), with wife (a Woman Eileen),
	with location "Palmyra, NY", with ^date "July 2000". 	
 
 Andy is a Man, has favoriteThing PI, has favoriteThing "chocolate", has favoriteThing Eileen.
 Andy has dateOfBirth "July 19, 1913".
 Eileen has dateOfBirth "March 29, 2010".
 
 Adam has child Abel.

 Ask: select x, y where x has sibling y. 
 
// Test: Abel has sibling Cain.
// Ask: "ask {<Abel> <sibling> <Cain>}".
// Graph: "select ?s1 ?p ?s2 where {?s1 ?p ?s2 . values ?p {<sibling>}}".
// Ask: "construct {?s1 <sibling> ?s2} where {?s1 <sibling> ?s2}".
// 
// Expr: 2 + 3 / 4.
// Expr: child of Adam. 
 
 Ask: FindAdults.
 Ask: FindPeopleByAgeRange:[30,35].
 
 Test: Adam is a Person.
 Test: age of Abel is 32.
 Test: age of Abel > 25.
 Test: Eve has child Cain.
 Test: "select ?ch where {<Adam> <child> ?ch}" is {[Cain],[Abel]}.  
 
 Ask: select p, ag where p has age ag.
 
 Cain has child (a Man Enoch).
 Enoch has child (a Man Irad).
 Irad has child (a Man Mehujael).
 
 Rule printNumGrandChildren: if x is a Person and ngc = countMatches(x, child, y, y, child, z) then print(localname(x), " has ", ngc, " grandchildren").
 
 Janet is a Parent
// , has child (a Person Kyle)
 .
 
 Ask: select p, c where p has child c.
 
  Expr: 1+2.
  Expr: PI * 2.
  
//  Expr: age of x.
//  Expr: age of son of p.
  
  
  Expr: age of p is known.
  Expr: age of p is not known.
  
  Ask: select p where age of p is  known.
//  Ask: select p where age of p is not known.
  
  Rule rw: if p is a Person and age of p is known then print(p, " has a known age").
  Rule rx: if p is a Person and age of p is not known then print("How old is ", p).
  