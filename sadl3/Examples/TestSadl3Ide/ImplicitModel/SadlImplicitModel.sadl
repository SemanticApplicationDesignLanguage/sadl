uri "http://sadl.org/sadlimplicitmodel" alias sadlimplicitmodel.

impliedProperty is a type of annotation.
expandedProperty is a type of annotation.
ScientificConcept is a class.
UnittedQuantity is a type of ScientificConcept,
	described by ^value with values of type decimal,
	described by unit with values of type string.

DataDescriptor is a class, described by descriptorName with a single value of type string,
	described by dataType (note "the simple data type, e.g., float") with a single value of type anyURI,
	described by augmentedType (note "ties the DataDescriptor to the semantic domain model") with values of type AugmentedType.
dataType of DataDescriptor has at most 1 value.

Language is a class, must be one of {Java, Python, Text, OtherLanguage}.
Script is a class, described by language with a single value of type Language,
	described by script with a single value of type string.
^Equation is a class,
	described by expression with values of type Script.
arguments describes ^Equation with a single value of type DataDescriptor List.
returnTypes describes ^Equation with a single value of type anyURI List.

ExternalEquation is a type of ^Equation,
	described by externalURI with a single value of type anyURI,
	described by externalURL with values of type string.
	
AugmentedType is a class.
augTypeUnits describes AugmentedType with a single value of type string List.
SemanticType (note "allows direct specification of the semantic type of an argument") is a type of AugmentedType, 
	described by semType with a single value of type class.
GraphPattern is a class.
{TriplePattern, FunctionPattern} are types of GraphPattern.
gpSubject describes TriplePattern.
gpPredicate describes TriplePattern.
gpObject describes TriplePattern.
builtin describes FunctionPattern with a single value of type ^Equation.
anyDataType (note "union of all relevant data types") is a type of {decimal or boolean or string or date or dateTime or anyURI}.
argValues (note "values of arguments to the built-in") describes FunctionPattern with a single value of type anyDataType List.

Assumption (note "used to identify necessary patterns in semantic domain terms") is a type of AugmentedType, 
	described by constraints with a single value of type GraphPattern List.
ThisArgument (note "allows reference to self within an Argument's constraints") is a DataDescriptor.

DataTableRow is a class,
	described by rowValues with a single value of type anyDataType List.
DataTable is a class,
	described by columnDescriptors with a single value of type DataDescriptor List,
	described by dataContent with a single value of type DataTableRow List.

^Rule is a class.
NamedQuery is a class.


// these properties used by TA2
model describes DataTable with values of type ^Equation.
^data describes ^Equation with values of type DataTable.

// This is the code extraction meta-model
CodeElement is a class described by beginsAt with a single value of type int,
	described by endsAt with a single value of type int.

CodeBlock is a type of CodeElement,
	described by serialization with a single value of type string,
	described by comment with values of type Comment,
	described by containedIn with values of type CodeBlock.

{Class, Method, ConditionalBlock, LoopBlock} are types of CodeBlock.

cmArguments describes Method with a single value of type CodeVariable List.
cmReturnTypes describes Method with a single value of type string List.
cmSemanticReturnTypes describes Method with a single value of type string List.

// The reference to a CodeVariable can be its definition (Defined),
//	an assignment or reassignment (Reassigned), or just a reference
//	in the right-hand side of an assignment or a conditional (Used)
Usage is a class, must be one of {Defined, Used, Reassigned}.

Reference  is a type of CodeElement
	described by firstRef with a single value of type boolean
	described by codeBlock with a single value of type CodeBlock
	described by usage with values of type Usage
 	described by input (note "CodeVariable is an input to codeBlock CodeBlock") 
 		with a single value of type boolean
 	described by output (note "CodeVariable is an output of codeBlock CodeBlock") 
 		with a single value of type boolean
 	described by setterArgument (note "is this variable input to a setter?") with a single value of type boolean
 	described by comment with values of type Comment.
	
Comment (note "CodeBlock and Reference can have a Comment") is a type of CodeElement
 	described by commentContent with a single value of type string.	

// what about Constant also? Note something maybe an input and then gets reassigned
// Constant could be defined in terms of being set by equations that only involve Constants
// Constants could also relate variables used in different equations as being same
CodeVariable  is a type of CodeElement, 
	described by varName with a single value of type string,
	described by varType with a single value of type string,
	described by semanticVarType with a single value of type string,
	described by quantityKind (note "this should be qudt:QuantityKind") with a single value of type ScientificConcept,
	described by reference with values of type Reference.   

{ClassField, MethodArgument, MethodVariable} are types of CodeVariable. 	

//External findFirstLocation (CodeVariable cv) returns int: "http://ToBeImplemented".

Rule Transitive  
if inst is a cls and 
   cls is a type of CodeVariable
then inst is a CodeVariable. 

Rule SetNotFirstRef1
if c is a CodeVariable and
   ref is reference of c and
   oneOf(usage of ref, Used, Reassigned) and  
   ref2 is reference of c and
   ref != ref2 and
   cb is codeBlock of ref and   
   cb2 is codeBlock of ref2 and
   cb = cb2 and
   l1 is beginsAt of ref and
   l2 is beginsAt of ref2 and
   l2 > l1   // so ref2 is at an earlier location that ref
then firstRef of ref2 is false.   

// first reference is of type "Used" or all earlier refs are of type "Used"	
// this does not cover when no ref2 with l2 < l1 exists
Rule SetAsInput1
if c is CodeVariable and
   ref is reference of c and
   input of ref is not known and 
   usage of ref is Used and
   ref2 is reference of c and
   ref != ref2 and
   cb is codeBlock of ref and   
   cb2 is codeBlock of ref2 and
   cb = cb2 and   
   l1 is beginsAt of ref and
   l2 is beginsAt of ref2 and
   l2 < l1 and  // so ref2 is at an earlier location that ref
   noValue(ref2, usage, Reassigned) // no earlier reassignment of c exists
then input of ref is true. 

// if there is no l2 as specified in the previous rules, then the following covers that case
// do I need to consider codeBlock?????
Rule SetAsInput2
if c is a CodeVariable and
   ref is reference of c and
   input of ref is not known and
   usage of ref is Used and 
   noValue(ref, firstRef)
then input of ref is true. 

// "it is an output if it is computed and is argument to a setter"
// or I could try to use the notion of a constant
Rule SetAsOutput
if c is a CodeVariable and
   setterArgument of c is true and
   ref is a reference of c and
   output of ref is not known and
   usage of ref is Defined //check this?
then
	output of ref is true.      	 
