/************************************************************************
 * Copyright 2007-2018 - General Electric Company, All Rights Reserved
 *
 * Project: SADL
 *
 * Description: the SADL Tabular importer template language provides a
 * way to specify the mapping between tabular data and an ontology and
 * is suitable for importing data into a triple store.
 *
 * This software is distributed "AS-IS" without ANY WARRANTIES
 * and licensed under the Eclipse Public License - v 1.0
 * which is available at http://www.eclipse.org/org/documents/epl-v10.php
 *
 ************************************************************************/
//grammar com.ge.research.sadl.importer.Template with com.ge.research.sadl.SADL
//
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://www.ge.com/research/sadl/SADL" as sadl
grammar com.ge.research.sadl.importer.Template hidden(WS, ML_COMMENT, SL_COMMENT) //with with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.ge.com/research/sadl/SADL" as sadl

generate template "http://www.ge.com/research/sadl/importer/Template"

//Model returns sadl::SadlModel:
//	super::SadlModel	
//;
//
//@Override
//SadlModelElement returns sadl::SadlModelElement :
////	incremental=IncrementalLoad?
////	infer=InferStmt?
////	preProcessing+=BeforeTriple*
//	TemplateStatement
//;

TemplateModel :
    'uri' baseUri=STRING ('alias' alias=ID)? ('version' version=STRING)? 
    	annotations+=SadlAnnotation* EOS 
    imports+=SadlImport*
    elements+=TemplateModelElement*;
    
SadlAnnotation :
	','? '(' type=('alias'|'note') contents+=STRING (',' contents+=STRING)* ')'
;

SadlImport :
    'import' importedResource=[sadl::SadlModel|STRING] ('as' alias=ID)? EOS;
//    'import' importedResource=STRING ('as' alias=ID)? EOS;

// The various kinds of elements that make up the body of a model.
TemplateModelElement :
	incremental=IncrementalLoad? =>EOS
	infer=InferStmt? => EOS
	preProcessing+=BeforeTriple* =>EOS
	TemplateStatement => EOS
;
	
IncrementalLoad : 'incremental';    

InferStmt : inf='infer' ('chunk' chunksize=NUMBER)? ('parallel' threads=NUMBER)?;

BeforeTriple:
	(trans=Transform | val=Validate)
;

Validate:
	'validate' (col=ColumnName|'all') (vnb=NotBlank | ve='exists' | vdt=DType | vrdft=Rdftype | vrdfssc=RdfsSubClass)
;  

Rdftype:
	'rdf:type' rdftype=Ref
;

RdfsSubClass:
	'rdfs:subClassOf' rdfssc=Ref
;

NotBlank:
	'not' 'blank' (sk=Skip | ab='abort' | ge=Generate)
;

Skip:
	sk='skip' (scope=('triple'|'group'))?
;

Generate:
	'generate' baseURI=ID
;

DType:
	dataType = SadlDataType
;

// Built-in primitive data types
enum SadlDataType :
    string | boolean | decimal | int | long | float | double | duration | dateTime | time | date |
    gYearMonth | gYear | gMonthDay | gDay | gMonth | hexBinary | base64Binary | anyURI | 
    integer | negativeInteger | nonNegativeInteger | positiveInteger | nonPositiveInteger |  
    byte | unsignedByte | unsignedInt | anySimpleType;

TemplateStatement :
		Triple
	| 	Group
;
	

Triple :
	subj=Ref ('has')? pred=PredRef (objval=Ref|dataval=SadlExplicitValueLiteral) 
;

Transform:
//	WS? 'transform' WS (from+=NonIndexedColRef)+ WS 'to' WS tt=(Split | Encode | Find | UserDefinedFunction) 
	'transform' from=TransformFrom 'to' tt=(Split | Encode | Find | UserDefinedFunction) 
;

TransformFrom :
//	firstfrom=ColumnName (',' restfrom+=ColumnName)*	
	firstfrom=ColumnName	
;

UserDefinedFunction:
	to=ColumnName funcname=ID ('(' firstArg=SadlExplicitValueLiteral (',' otherArgsA+=SadlExplicitValueLiteral)* ')')?
;    

Split:
	to=ColumnName 'split' (delimiter=STRING)?
;

Encode:
	to=ColumnName 'encode' mappings=EncodeMappings
;
	
EncodeMappings:	
	mapping+=EncodeMapping (',' mapping += EncodeMapping)*
;

EncodeMapping:
	before=(STRING | ID) ':' after=(STRING | ID)
;

Find:
	to=ColumnName 'find' query=STRING
;

Group:
	'{'groupLines+=(Triple | Group)+ '}'
;

Ref:
//	ref=(NameStart|ColumnName) addlcols+='_'? ColumnName* (row='()')?
	ref = (QNAME|ColumnName) addlcols+='_'? ColumnName* (row='()')?
;

PredRef:
	SpecialPred |
	Ref
;

SpecialPred:
	(kws='is' 'a' 'type' 'of') |
	(kws='is' 'a') |
	kws='rdf:type' |
	kws='rdfs:subClassOf'
;


//NameStart:
//	ID (CompoundNameEnd | ColumnName)?
//	
//;
//
//CompoundNameEnd:
//	':' ID
//;

ColumnName:
//	'<' ColumnID (NonIndexedColumnEnd | IndexedColumnEnd)
	'<' (ID|NUMBER) ('[' ColIndex ']')? '>'
;

//ColumnID:
//	ID|NUMBER
//;
//
//NonIndexedColumnEnd:
//	'>' ID?
//;
//
//IndexedColumnEnd:
//	'[' ColIndex ']''>' ID?
//;

ColIndex:
	ID | NUMBER | '*'
;

//SadlResource:
//	name=[SadlResource|QNAME] annotations+=SadlAnnotation*
//;

SadlExplicitValue:
	SadlExplicitValueLiteral |
	=>({SadlUnaryExpression} operator=('-') value=SadlExplicitValueLiteral) 
;
	
SadlExplicitValueLiteral:
//		SadlResource		// e.g., George
		{SadlExplicitValueLiteral} QNAME
	|	{SadlNumberLiteral} literalNumber=AnyNumber (-> unit=UNIT)?
    |   {SadlStringLiteral} literalString=STRING
    |   {SadlBooleanLiteral} (truethy?='true'|'false')
    |   SadlValueList
	|	{SadlConstantLiteral} term=('PI'|'e'|'known')
;

UNIT: STRING | ID;

SadlValueList:
	{SadlValueList} '[' (explicitValues+=SadlExplicitValue (',' explicitValues+=SadlExplicitValue)*)? ']'
;

AnyNumber returns ecore::EBigDecimal :
	DecimalNumber EXPONENT?;

DecimalNumber returns ecore::EBigDecimal :
	NUMBER ;

EXPONENT returns ecore::EBigDecimal:
	('e' | 'E') ('-' | '+')? DecimalNumber;

EOS:
	'.';
	
QNAME :
	QNAME_TERMINAL | ID
;
	
terminal NUMBER returns ecore::EInt :
	'0'..'9'+;

terminal WS:
	('\u00A0' | ' ' | '\t' | '\r' | '\n')+;

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '-' | '%' | '~')* ;
	
terminal QNAME_TERMINAL:
	ID ':' ID;
	
terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal ANY_OTHER:
	.;
