/************************************************************************
 * Copyright 2007-2013 - General Electric Company, All Rights Reserved
 *
 * Project: SADL
 *
 * Description: The Semantic Application Design Language (SADL) is a
 * language for building semantic models and expressing rules that
 * capture additional domain knowledge. The SADL-IDE (integrated
 * development environment) is a set of Eclipse plug-ins that
 * support the editing and testing of semantic models using the
 * SADL language.
 *
 * This software is distributed "AS-IS" without ANY WARRANTIES
 * and licensed under the Eclipse Public License - v 1.0
 * which is available at http://www.eclipse.org/org/documents/epl-v10.php
 *
 ***********************************************************************/
grammar com.ge.research.sadl.importer.Template //with org.eclipse.xtext.common.Terminals
//grammar com.ge.research.sadl.tabdatatemplate.SadlTabDataTemplate // with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.ge.com/research/sadl/SADL" as sadl

generate template "http://www.ge.com/research/sadl/importer/Template"

TemplateModel:
	(Comment* EOL)*
	uri=NewModelNS
	(Comment* EOL)*
	imports+=Import* 
	(Comment* EOL)*
	(incremental=IncrementalLoad)?
	(Comment* EOL)*
	(infer=InferStmt)?
	(Comment* EOL)*
	(infer=LogStmt)?
	(Comment* EOL)*
	preProcessing+=BeforeTriple*
	(Comment* EOL)*
	triples+=(Line | Group)*
	(Comment* EOL)*
;

NewModelNS:
	'uri' WS baseUri=STRING (WS 'alias' WS prefix=IDEXT)? WS? EOL
;	

Import :
    'import' WS importResource=[sadl::SadlModel|STRING] (WS 'as' WS alias=IDEXT)? WS? EOL;
    
IncrementalLoad : 'incremental' (WS? Comment)? WS? EOL;    

InferStmt : inf='infer' WS ('chunk' WS chunksize=DIGITS)? WS? ('parallel' WS threads=DIGITS)? (WS? Comment)? WS? EOL;

LogStmt :
	'log' WS logfilename = STRING WS? EOL
;

BeforeTriple:
	(trans=Transform | val=Validate) (WS? Comment)? WS? EOL
;

Comment:
	SL_COMMENT | ML_COMMENT
;

	
Validate:
	WS? 'validate' WS (col=(NonIndexedColRef|IndexedColRef)|'all') WS (vnb=NotBlank | ve='exists' | vdt=DType | vrdft=Rdftype | vrdfssc=RdfsSubClass)
;  

NonIndexedColRef:
	'<' ref=IDEXT '>'
;

IndexedColRef:
	'<' ref=IDEXT '[' (idx=ColIndex)? ']' '>'
;  

NotBlank:
	'not' WS 'blank' WS (sk=Skip | ab='abort' | ge=Generate)
;

Skip:
	sk='skip' (WS scope=('triple'|'group'))?
;

Generate:
	'generate' WS baseURI=IDEXT
;

DType:
	dataType = DataType
;

enum DataType :
    string | boolean | decimal | int | long | float | double | duration | dateTime | time | date |
    gYearMonth | gYear | gMonthDay | gDay | gMonth | hexBinary | base64Binary | anyURI;
    
Rdftype:
	'rdf:type' WS rdftype=Ref
;

RdfsSubClass:
	'rdfs:subClassOf' WS rdfssc=Ref
;

Transform:
//	WS? 'transform' WS (from+=NonIndexedColRef)+ WS 'to' WS tt=(Split | Encode | Find | UserDefinedFunction) 
	WS? 'transform' WS from=TransformFrom WS 'to' WS tt=(Split | Encode | Find | Replace | UserDefinedFunction) 
;

TransformFrom :
	firstfrom=(NonIndexedColRef|IndexedColRef) (',' restfrom+=(NonIndexedColRef|IndexedColRef))*	
;

UserDefinedFunction:
	to=(IndexedColRef | NonIndexedColRef) WS funcname=IDEXT ('(' firstArg=LiteralValue (',' otherArgsA+=LiteralValue)* ')')?
;    

Split:
	to=(IndexedColRef | NonIndexedColRef) WS 'split' (WS delimiter=STRING)?
;

Encode:
	to=(IndexedColRef | NonIndexedColRef) WS 'encode' WS mappings=EncodeMappings
;
	
EncodeMappings:	
	mapping+=EncodeMapping (',' mapping += EncodeMapping)*
;

EncodeMapping:
	before=(STRING | IDEXT) ':' after=(STRING | IDEXT)
;

Find:
	to=(IndexedColRef | NonIndexedColRef) WS 'find' WS query=STRING
;

Replace:
	to=(IndexedColRef | NonIndexedColRef) WS 'replace' WS replacements+=Replacement (WS? ',' WS? replacements+=Replacement)*
;

Replacement:
//	before=(NUMBER | STRING | IDEXT | 'true' | 'false') ':' after=( NUMBER |STRING | IDEXT | 'true' | 'false')
//	(beforeLit=LiteralValue | beforeStr=STRING) ':' (afterLit=LiteralValue | afterStr=STRING)
	(beforeIDEXT=IDEXT | beforeLit=LiteralValue) WS? ':' WS? (afterIDEXT = IDEXT | afterLit=LiteralValue)
;

Group:
	WS? '{' EOL groupLines+=(Line | Group)+ '}' WS? EOL
;

Line:
	(line=Triple | ignore=EmptyLine | slc=SL_COMMENT | mlc=ML_COMMENT) EOL
;	
	
Triple :
	WS? subj=Ref WS (Has WS)? pred=PredRef WS (objval=Ref|dataval=LiteralValue) WS? SL_COMMENT? ML_COMMENT? 
;

PredRef:
	SpecialPred |
	Ref
;

SpecialPred:
	(kws='is' WS 'a' WS 'type' WS 'of') |
	(kws='is' WS 'a') |
	kws='rdf:type' |
	kws='rdfs:subClassOf' |
	sr=[sadl::SadlResource|IDEXT]
;

Has:
	'has'
;

EmptyLine:
	WS
;

LiteralValue :
        literalNumber=NUMBER
    |   literalString=STRING
    |   literalBoolean=('true'|'false')
;

// NUMBER matches both integral and floating point numbers.
NUMBER hidden() :
       '-'? UNSIGNED_NUMBER
;

Ref:
	ref=(NameStart|ColumnName) addlcols+='_'? ColumnName* (row='()')?
;

// shortest number of segments to longest
// Name first
//									  1   2    3    4    5    6    7
// location							Name
// rdf:type							Name ':'  Name
// Prefix<ColID>					Name '<'  Name '>'
// Prefix<ColID>Suffix				Name '<'  Name '>'  Name
// Prefix<ColID[Index]>				Name '<'  Name '['  Name ']>'
// Prefix<ColID[Index]>Suffix		Name '<'  Name '['  Name ']>'  Name
// '<' first
// <ColID>							     '<'  Name '>'
// <ColID[Index]>					     '<'  Name '['  Name ']>'
// <ColID[Index]>Suffix				     '<'  Name '['  Name ']>' Name

NameStart:
	IDEXT (CompoundNameEnd | ColumnName)?
;

CompoundNameEnd:
	':' IDEXT
;

//IndexedColumn:
//	'<' ColumnID IndexedColumnEnd
//;

ColumnName:
	'<' ColumnID (NonIndexedColumnEnd | IndexedColumnEnd)
;

ColumnID:
	IDEXT|DIGITS
;

NonIndexedColumnEnd:
	'>' IDEXT?
;

IndexedColumnEnd:
	'[' ColIndex ']''>' IDEXT?
;

ColIndex:
	IDEXT | DIGITS | '*'
;

terminal DIGITS:
	('0'..'9')+
;

terminal UNSIGNED_NUMBER:
     DIGITS
   | DIGITS '.' ('0'..'9')* (('e'|'E') ('+'|'-')? DIGITS)?
   |             '.' DIGITS (('e'|'E') ('+'|'-')? DIGITS)?
   | DIGITS                  ('e'|'E') ('+'|'-')? DIGITS
;

//terminal ID :
//    ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
    
terminal IDEXT :
	('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'-'|'.'|'('|')'|'/'|':'|'%'|'#')*;    
	
terminal STRING :
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	"'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";

terminal SL_COMMENT: '//' (!('\n'|'\r'))* ;

terminal ML_COMMENT :
	'/*' -> '*/'
;
		
terminal WS : 
	(' '|'\t')+
;

// INT conflicts with NUMBER so we have to disable it.
terminal INT returns ecore::EInt :
    'this has been disabled';
    
terminal EOL:
	'.'? (('\r'? '\n')+ | EOF);

terminal ANY_OTHER:
	.;
