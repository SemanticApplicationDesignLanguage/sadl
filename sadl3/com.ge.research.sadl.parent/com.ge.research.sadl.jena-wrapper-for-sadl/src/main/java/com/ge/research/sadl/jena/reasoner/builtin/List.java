/************************************************************************
 * Copyright ï¿½ 2007, 2008 - General Electric Company, All Rights Reserved
 * 
 * Project: SADL
 * 
 * Description: The Semantic Application Design Language (SADL) is a 
 * language for building semantic models and expressing rules that 
 * capture additional domain knowledge. The SADL-IDE (integrated 
 * development environment) is a set of Eclipse plug-ins that 
 * support the editing and testing of semantic models using the 
 * SADL language.
 * 
 * This software is distributed "AS-IS" without ANY WARRANTIES 
 * and licensed under the Eclipse Public License - v 1.0 
 * which is available at http://www.eclipse.org/org/documents/epl-v10.php
 *
 ***********************************************************************/

/***********************************************************************
 * $Author: crapo $ 
 * $Revision: 1.1 $ Last modified on   $Date: 2014/01/31 15:29:31 $
 ***********************************************************************/

package com.ge.research.sadl.jena.reasoner.builtin;

import org.apache.jena.graph.Node;
import org.apache.jena.graph.Node_Literal;
import org.apache.jena.reasoner.rulesys.BindingEnvironment;
import org.apache.jena.reasoner.rulesys.BuiltinException;
import org.apache.jena.reasoner.rulesys.RuleContext;
import org.apache.jena.reasoner.rulesys.Util;
import org.apache.jena.reasoner.rulesys.builtins.BaseBuiltin;
import org.apache.jena.vocabulary.RDF;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class List extends BaseBuiltin {
    protected static final Logger logger = LoggerFactory.getLogger(List.class);
	
	private int argLength = 0;

    /**
     * Return a name for this builtin, normally this will be the name of the 
     * functor that will be used to invoke it.
     */
    public String getName() {
        return "list";
    }
    
    /**
     * Return the expected number of arguments for this functor or 0 if the number is flexible.
     */
    public int getArgLength() {
        return argLength;
    }
    
    /**
     * This method is invoked when the builtin is called in a rule body.
     * @param args the array of argument values for the builtin, this is an array 
     * of Nodes, some of which may be Node_RuleVariables.
     * @param length the length of the argument list, may be less than the length of the args array
     * for some rule engines
     * @param context an execution context giving access to other relevant data
     * @return return true if the buildin predicate is deemed to have succeeded in
     * the current environment
     */
    public boolean bodyCall(Node[] args, int length, RuleContext context) {
        checkArgs(length, context);
        BindingEnvironment env = context.getEnv();
       	if (length < 2) {
            throw new BuiltinException(this, context, "builtin '" + getName() + "' requires at least 2 arguments.");
      	}
       	
       	boolean allLiteralsOrNonOntProperties = true;
       	// if there aren't any properties involved, assume it is a simple list of literals or individuals
       	for (int i = 0; i < args.length - 1; i++) {
       		logger.debug("list arg " + i + ": " + args[i].toString());
       		if (args[i].isLiteral()) {
       			continue;
       		}
       		if (Utils.isOntProperty(context, args[i]) || args[i].isVariable()) { // || Utils.isOntClass(context, args[i])) {  // this second test would disallow lists of classes. AWC 1/17/2013
       			allLiteralsOrNonOntProperties = false;
       			break;
       		}
       	}
       	if (allLiteralsOrNonOntProperties) {
       		logger.debug("list args are all literals or non-ontology properties; returning list");
       		Node[] nodes = new Node[args.length - 1];
       		for (int i = 0; i < nodes.length; i++) {
       			nodes[i] = args[i];
       		}
			Node list = GeUtils.makeList(nodes, context);
	    	return env.bind(args[length - 1], list);
       	}
       	
       	boolean isSparqlQuery = false;	// is this list to be generated by SPARQL query?
       	
       	Node nextToLastArg = getArg(length - 2, args, context);
       	if (length == 2 && nextToLastArg instanceof Node_Literal) {
       		isSparqlQuery = true;
       	}
       	if (isSparqlQuery) {
       		// this is a sparql query
       		throw new BuiltinException(this, context, "SPARQL queries no longer supported.");
       	}
       	else {
       		// this is not a SPARQL "select..."; generation of the list is from expressed edges
	       	Node[] nodes = GeUtils.matchNonSparqlPattern(this, args, length, true, context);
	        if (nodes == null || nodes.length == 0) {
	        	logger.debug("list returning empty list, no matches found");
	        	return env.bind(args[length - 1], RDF.Nodes.nil);
	        }
	        else {
//	        	nodes = GeUtils.removeDuplicatesFromList(nodes);	// 1/9/2012: List changed to allow duplicates,
//						     										   new built-in Unique added to remove duplicates  AWC
		        for (int i = 0; i < nodes.length; i++) {
		        	if (nodes[i].isLiteral()) {
		        		Object v = nodes[i].getLiteralValue();
		        		if (v instanceof Float) {
		        			nodes[i] = Util.makeDoubleNode(((Float)v).doubleValue());
		        		}
		        		else if(v instanceof Double) {
		        			nodes[i] = Util.makeDoubleNode(((Double)v).doubleValue());
		        		}
		        		else if (v instanceof Long) {
		        			nodes[i] = Util.makeLongNode(((Long)v).longValue());
		        		}
		        		else if (v instanceof Integer) {
		        			nodes[i] = Util.makeIntNode(((Integer)v).intValue());
		        		}
		        	}
		        }
				Node list = GeUtils.makeList(nodes, context);
		        logger.debug("list returning a list of " + nodes.length + " matching values: " + ListToString.listToString(context, list, "\""));
		    	return env.bind(args[length - 1], list);
	        }
       	}   
    }

	/**
     * Returns false if this builtin has side effects when run in a body clause,
     * other than the binding of environment variables.
     */
    public boolean isSafe() {
         return false;
    }

}
