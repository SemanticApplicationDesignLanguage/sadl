/*
* generated by Xtext
*/
package com.ge.research.sadl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SadlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModelNameModelNameParserRuleCall_0_0 = (RuleCall)cModelNameAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsModelElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//// Top-level element; a model consists of...
		//Model:
		//	modelName=ModelName imports+=Import* elements+=ModelElement*;
		public ParserRule getRule() { return rule; }

		//modelName=ModelName imports+=Import* elements+=ModelElement*
		public Group getGroup() { return cGroup; }

		//modelName=ModelName
		public Assignment getModelNameAssignment_0() { return cModelNameAssignment_0; }

		//ModelName
		public RuleCall getModelNameModelNameParserRuleCall_0_0() { return cModelNameModelNameParserRuleCall_0_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//elements+=ModelElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ModelElement
		public RuleCall getElementsModelElementParserRuleCall_2_0() { return cElementsModelElementParserRuleCall_2_0; }
	}

	public class ModelNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUriKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseUriSTRINGTerminalRuleCall_1_0 = (RuleCall)cBaseUriAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasNAMEParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVersionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVersionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cVersionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAnnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cAnnTypeAlternatives_4_1_0 = (Alternatives)cAnnTypeAssignment_4_1.eContents().get(0);
		private final Keyword cAnnTypeAliasKeyword_4_1_0_0 = (Keyword)cAnnTypeAlternatives_4_1_0.eContents().get(0);
		private final Keyword cAnnTypeNoteKeyword_4_1_0_1 = (Keyword)cAnnTypeAlternatives_4_1_0.eContents().get(1);
		private final Assignment cAnnContentAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAnnContentContentListParserRuleCall_4_2_0 = (RuleCall)cAnnContentAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final RuleCall cEOSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//// The baseUri is the namespace of the model and should be of the form
		//// "http://..."; the version is optional.
		//ModelName:
		//	"uri" baseUri=STRING ("alias" alias=NAME)? ("version" version=STRING)? ("(" annType+=("alias" | "note")
		//	annContent+=ContentList ")")* EOS;
		public ParserRule getRule() { return rule; }

		//"uri" baseUri=STRING ("alias" alias=NAME)? ("version" version=STRING)? ("(" annType+=("alias" | "note")
		//annContent+=ContentList ")")* EOS
		public Group getGroup() { return cGroup; }

		//"uri"
		public Keyword getUriKeyword_0() { return cUriKeyword_0; }

		//baseUri=STRING
		public Assignment getBaseUriAssignment_1() { return cBaseUriAssignment_1; }

		//STRING
		public RuleCall getBaseUriSTRINGTerminalRuleCall_1_0() { return cBaseUriSTRINGTerminalRuleCall_1_0; }

		//("alias" alias=NAME)?
		public Group getGroup_2() { return cGroup_2; }

		//"alias"
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }

		//alias=NAME
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }

		//NAME
		public RuleCall getAliasNAMEParserRuleCall_2_1_0() { return cAliasNAMEParserRuleCall_2_1_0; }

		//("version" version=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"version"
		public Keyword getVersionKeyword_3_0() { return cVersionKeyword_3_0; }

		//version=STRING
		public Assignment getVersionAssignment_3_1() { return cVersionAssignment_3_1; }

		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_3_1_0() { return cVersionSTRINGTerminalRuleCall_3_1_0; }

		//("(" annType+=("alias" | "note") annContent+=ContentList ")")*
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//annType+=("alias" | "note")
		public Assignment getAnnTypeAssignment_4_1() { return cAnnTypeAssignment_4_1; }

		//"alias" | "note"
		public Alternatives getAnnTypeAlternatives_4_1_0() { return cAnnTypeAlternatives_4_1_0; }

		//"alias"
		public Keyword getAnnTypeAliasKeyword_4_1_0_0() { return cAnnTypeAliasKeyword_4_1_0_0; }

		//"note"
		public Keyword getAnnTypeNoteKeyword_4_1_0_1() { return cAnnTypeNoteKeyword_4_1_0_1; }

		//annContent+=ContentList
		public Assignment getAnnContentAssignment_4_2() { return cAnnContentAssignment_4_2; }

		//ContentList
		public RuleCall getAnnContentContentListParserRuleCall_4_2_0() { return cAnnContentContentListParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_5() { return cEOSTerminalRuleCall_5; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasNAMEParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// Every import is by either by actual relative URL (other SADL models only) 
		////	or by URI (SADL models and external OWL files); 
		////	an import may have a unique alias (which becomes the "prefix" in compound names)
		////	but this is discouraged in favor of global aliases given with ModelName.
		//Import:
		//	"import" importURI=STRING ("as" alias=NAME)? EOS;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING ("as" alias=NAME)? EOS
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//("as" alias=NAME)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//alias=NAME
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }

		//NAME
		public RuleCall getAliasNAMEParserRuleCall_2_1_0() { return cAliasNAMEParserRuleCall_2_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_3() { return cEOSTerminalRuleCall_3; }
	}

	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTestParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExprParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDisplayParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExplanationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// The various kinds of elements that make up the body of a model.
		//ModelElement: // used to generate the OWL model
		//	Statement | // used to generate the rules in a generic format which can be translated to target system
		//	Rule | // used to generate queries which can be translated to the target system but which are used by SADL/SadlServer only
		//	Query | // used to generate the Test cases, used by SADL/SadlServer only
		//	Test | // temp for testing only
		//	Expr | // used to generate display statements in the output of Tests, etc., used by SADL only
		//	Display | // used to generate explanations of particular triples (if an explanation found), used by SADL only
		//	Explanation;
		public ParserRule getRule() { return rule; }

		//// used to generate the OWL model
		//Statement | // used to generate the rules in a generic format which can be translated to target system
		//Rule | // used to generate queries which can be translated to the target system but which are used by SADL/SadlServer only
		//Query | // used to generate the Test cases, used by SADL/SadlServer only
		//Test | // temp for testing only
		//Expr | // used to generate display statements in the output of Tests, etc., used by SADL only
		//Display | // used to generate explanations of particular triples (if an explanation found), used by SADL only
		//Explanation
		public Alternatives getAlternatives() { return cAlternatives; }

		//// used to generate the OWL model
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }

		//// used to generate the rules in a generic format which can be translated to target system
		//Rule
		public RuleCall getRuleParserRuleCall_1() { return cRuleParserRuleCall_1; }

		//// used to generate queries which can be translated to the target system but which are used by SADL/SadlServer only
		//Query
		public RuleCall getQueryParserRuleCall_2() { return cQueryParserRuleCall_2; }

		//// used to generate the Test cases, used by SADL/SadlServer only
		//Test
		public RuleCall getTestParserRuleCall_3() { return cTestParserRuleCall_3; }

		//// temp for testing only
		//Expr
		public RuleCall getExprParserRuleCall_4() { return cExprParserRuleCall_4; }

		//// used to generate display statements in the output of Tests, etc., used by SADL only
		//Display
		public RuleCall getDisplayParserRuleCall_5() { return cDisplayParserRuleCall_5; }

		//// used to generate explanations of particular triples (if an explanation found), used by SADL only
		//Explanation
		public RuleCall getExplanationParserRuleCall_6() { return cExplanationParserRuleCall_6; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplementOfClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDisjointClassesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEquivalentConceptsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAllValuesFromParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCardinalityParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cHasValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMaxCardinalityParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMinCardinalityParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSomeValuesFromParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEnumeratedAllAndSomeValuesFromParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cEnumeratedAllValuesFromParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDefaultValueParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cNecessaryAndSufficientParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cPropertyDeclarationParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cFunctionalPropertyParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cInverseFunctionalPropertyParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cInversePropertyParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cSymmetricalPropertyParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cTransitivePropertyParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cInstanceDeclarationStatementParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cExistingInstanceAttributionParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cInstanceDifferentFromParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cInstancesAllDifferentParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cUserDefinedDataTypeParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		
		//// These are the things that translate directly to OWL.
		//Statement:
		//	ClassDeclaration | ComplementOfClass | DisjointClasses | EquivalentConcepts | AllValuesFrom | Cardinality | HasValue
		//	| MaxCardinality | MinCardinality | SomeValuesFrom | EnumeratedAllAndSomeValuesFrom | EnumeratedAllValuesFrom |
		//	DefaultValue | NecessaryAndSufficient | PropertyDeclaration | FunctionalProperty | InverseFunctionalProperty |
		//	InverseProperty | SymmetricalProperty | TransitiveProperty | InstanceDeclarationStatement |
		//	ExistingInstanceAttribution | InstanceDifferentFrom | InstancesAllDifferent | UserDefinedDataType;
		public ParserRule getRule() { return rule; }

		//ClassDeclaration | ComplementOfClass | DisjointClasses | EquivalentConcepts | AllValuesFrom | Cardinality | HasValue |
		//MaxCardinality | MinCardinality | SomeValuesFrom | EnumeratedAllAndSomeValuesFrom | EnumeratedAllValuesFrom |
		//DefaultValue | NecessaryAndSufficient | PropertyDeclaration | FunctionalProperty | InverseFunctionalProperty |
		//InverseProperty | SymmetricalProperty | TransitiveProperty | InstanceDeclarationStatement |
		//ExistingInstanceAttribution | InstanceDifferentFrom | InstancesAllDifferent | UserDefinedDataType
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_0() { return cClassDeclarationParserRuleCall_0; }

		//ComplementOfClass
		public RuleCall getComplementOfClassParserRuleCall_1() { return cComplementOfClassParserRuleCall_1; }

		//DisjointClasses
		public RuleCall getDisjointClassesParserRuleCall_2() { return cDisjointClassesParserRuleCall_2; }

		//EquivalentConcepts
		public RuleCall getEquivalentConceptsParserRuleCall_3() { return cEquivalentConceptsParserRuleCall_3; }

		//AllValuesFrom
		public RuleCall getAllValuesFromParserRuleCall_4() { return cAllValuesFromParserRuleCall_4; }

		//Cardinality
		public RuleCall getCardinalityParserRuleCall_5() { return cCardinalityParserRuleCall_5; }

		//HasValue
		public RuleCall getHasValueParserRuleCall_6() { return cHasValueParserRuleCall_6; }

		//MaxCardinality
		public RuleCall getMaxCardinalityParserRuleCall_7() { return cMaxCardinalityParserRuleCall_7; }

		//MinCardinality
		public RuleCall getMinCardinalityParserRuleCall_8() { return cMinCardinalityParserRuleCall_8; }

		//SomeValuesFrom
		public RuleCall getSomeValuesFromParserRuleCall_9() { return cSomeValuesFromParserRuleCall_9; }

		//EnumeratedAllAndSomeValuesFrom
		public RuleCall getEnumeratedAllAndSomeValuesFromParserRuleCall_10() { return cEnumeratedAllAndSomeValuesFromParserRuleCall_10; }

		//EnumeratedAllValuesFrom
		public RuleCall getEnumeratedAllValuesFromParserRuleCall_11() { return cEnumeratedAllValuesFromParserRuleCall_11; }

		//DefaultValue
		public RuleCall getDefaultValueParserRuleCall_12() { return cDefaultValueParserRuleCall_12; }

		//NecessaryAndSufficient
		public RuleCall getNecessaryAndSufficientParserRuleCall_13() { return cNecessaryAndSufficientParserRuleCall_13; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_14() { return cPropertyDeclarationParserRuleCall_14; }

		//FunctionalProperty
		public RuleCall getFunctionalPropertyParserRuleCall_15() { return cFunctionalPropertyParserRuleCall_15; }

		//InverseFunctionalProperty
		public RuleCall getInverseFunctionalPropertyParserRuleCall_16() { return cInverseFunctionalPropertyParserRuleCall_16; }

		//InverseProperty
		public RuleCall getInversePropertyParserRuleCall_17() { return cInversePropertyParserRuleCall_17; }

		//SymmetricalProperty
		public RuleCall getSymmetricalPropertyParserRuleCall_18() { return cSymmetricalPropertyParserRuleCall_18; }

		//TransitiveProperty
		public RuleCall getTransitivePropertyParserRuleCall_19() { return cTransitivePropertyParserRuleCall_19; }

		//InstanceDeclarationStatement
		public RuleCall getInstanceDeclarationStatementParserRuleCall_20() { return cInstanceDeclarationStatementParserRuleCall_20; }

		//ExistingInstanceAttribution
		public RuleCall getExistingInstanceAttributionParserRuleCall_21() { return cExistingInstanceAttributionParserRuleCall_21; }

		//InstanceDifferentFrom
		public RuleCall getInstanceDifferentFromParserRuleCall_22() { return cInstanceDifferentFromParserRuleCall_22; }

		//InstancesAllDifferent
		public RuleCall getInstancesAllDifferentParserRuleCall_23() { return cInstancesAllDifferentParserRuleCall_23; }

		//UserDefinedDataType
		public RuleCall getUserDefinedDataTypeParserRuleCall_24() { return cUserDefinedDataTypeParserRuleCall_24; }
	}

	public class ResourceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMEParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cAnnTypeAlternatives_1_1_0 = (Alternatives)cAnnTypeAssignment_1_1.eContents().get(0);
		private final Keyword cAnnTypeAliasKeyword_1_1_0_0 = (Keyword)cAnnTypeAlternatives_1_1_0.eContents().get(0);
		private final Keyword cAnnTypeNoteKeyword_1_1_0_1 = (Keyword)cAnnTypeAlternatives_1_1_0.eContents().get(1);
		private final Assignment cAnnContentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAnnContentContentListParserRuleCall_1_2_0 = (RuleCall)cAnnContentAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// SADL identifiers may name classes, instances, and properties.
		//ResourceName:
		//	name=NAME ("(" annType+=("alias" | "note") annContent+=ContentList ")")*;
		public ParserRule getRule() { return rule; }

		//name=NAME ("(" annType+=("alias" | "note") annContent+=ContentList ")")*
		public Group getGroup() { return cGroup; }

		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//NAME
		public RuleCall getNameNAMEParserRuleCall_0_0() { return cNameNAMEParserRuleCall_0_0; }

		//("(" annType+=("alias" | "note") annContent+=ContentList ")")*
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//annType+=("alias" | "note")
		public Assignment getAnnTypeAssignment_1_1() { return cAnnTypeAssignment_1_1; }

		//"alias" | "note"
		public Alternatives getAnnTypeAlternatives_1_1_0() { return cAnnTypeAlternatives_1_1_0; }

		//"alias"
		public Keyword getAnnTypeAliasKeyword_1_1_0_0() { return cAnnTypeAliasKeyword_1_1_0_0; }

		//"note"
		public Keyword getAnnTypeNoteKeyword_1_1_0_1() { return cAnnTypeNoteKeyword_1_1_0_1; }

		//annContent+=ContentList
		public Assignment getAnnContentAssignment_1_2() { return cAnnContentAssignment_1_2; }

		//ContentList
		public RuleCall getAnnContentContentListParserRuleCall_1_2_0() { return cAnnContentContentListParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class ContentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnContentSTRINGTerminalRuleCall_0_0 = (RuleCall)cAnnContentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnContentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnContentSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cAnnContentAssignment_1_1.eContents().get(0);
		
		//ContentList:
		//	annContent+=STRING ("," annContent+=STRING)*;
		public ParserRule getRule() { return rule; }

		//annContent+=STRING ("," annContent+=STRING)*
		public Group getGroup() { return cGroup; }

		//annContent+=STRING
		public Assignment getAnnContentAssignment_0() { return cAnnContentAssignment_0; }

		//STRING
		public RuleCall getAnnContentSTRINGTerminalRuleCall_0_0() { return cAnnContentSTRINGTerminalRuleCall_0_0; }

		//("," annContent+=STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//annContent+=STRING
		public Assignment getAnnContentAssignment_1_1() { return cAnnContentAssignment_1_1; }

		//STRING
		public RuleCall getAnnContentSTRINGTerminalRuleCall_1_1_0() { return cAnnContentSTRINGTerminalRuleCall_1_1_0; }
	}

	public class ResourceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesResourceNameParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesResourceNameParserRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// SADL identifiers may also be grouped into lists in some places.
		//ResourceList:
		//	"{" names+=ResourceName ("," names+=ResourceName)* "}";
		public ParserRule getRule() { return rule; }

		//"{" names+=ResourceName ("," names+=ResourceName)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//names+=ResourceName
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//ResourceName
		public RuleCall getNamesResourceNameParserRuleCall_1_0() { return cNamesResourceNameParserRuleCall_1_0; }

		//("," names+=ResourceName)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//names+=ResourceName
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//ResourceName
		public RuleCall getNamesResourceNameParserRuleCall_2_1_0() { return cNamesResourceNameParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LiteralListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLiteralsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralsLiteralValueParserRuleCall_1_0 = (RuleCall)cLiteralsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLiteralsLiteralValueParserRuleCall_2_1_0 = (RuleCall)cLiteralsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LiteralList:
		//	"{" literals+=LiteralValue ("," literals+=LiteralValue)* "}";
		public ParserRule getRule() { return rule; }

		//"{" literals+=LiteralValue ("," literals+=LiteralValue)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//literals+=LiteralValue
		public Assignment getLiteralsAssignment_1() { return cLiteralsAssignment_1; }

		//LiteralValue
		public RuleCall getLiteralsLiteralValueParserRuleCall_1_0() { return cLiteralsLiteralValueParserRuleCall_1_0; }

		//("," literals+=LiteralValue)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//literals+=LiteralValue
		public Assignment getLiteralsAssignment_2_1() { return cLiteralsAssignment_2_1; }

		//LiteralValue
		public RuleCall getLiteralsLiteralValueParserRuleCall_2_1_0() { return cLiteralsLiteralValueParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ResourceByNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceByName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameResourceNameCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameResourceNameNAMEParserRuleCall_0_1 = (RuleCall)cNameResourceNameCrossReference_0.eContents().get(1);
		
		//// References to imported SADL names are qualified by namespaces.
		//ResourceByName:
		//	name=[ResourceName|NAME];
		public ParserRule getRule() { return rule; }

		//name=[ResourceName|NAME]
		public Assignment getNameAssignment() { return cNameAssignment; }

		//[ResourceName|NAME]
		public CrossReference getNameResourceNameCrossReference_0() { return cNameResourceNameCrossReference_0; }

		//NAME
		public RuleCall getNameResourceNameNAMEParserRuleCall_0_1() { return cNameResourceNameNAMEParserRuleCall_0_1; }
	}

	public class ExistingResourceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistingResourceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNamesAlternatives_1_0 = (Alternatives)cNamesAssignment_1.eContents().get(0);
		private final RuleCall cNamesResourceByNameParserRuleCall_1_0_0 = (RuleCall)cNamesAlternatives_1_0.eContents().get(0);
		private final RuleCall cNamesResourceBySetOpParserRuleCall_1_0_1 = (RuleCall)cNamesAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cNamesAlternatives_2_1_0 = (Alternatives)cNamesAssignment_2_1.eContents().get(0);
		private final RuleCall cNamesResourceByNameParserRuleCall_2_1_0_0 = (RuleCall)cNamesAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cNamesResourceBySetOpParserRuleCall_2_1_0_1 = (RuleCall)cNamesAlternatives_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////RecursivePropertyByName :
		////	name=[ResourceName|NAME] (recurse=('*' | '+'))?
		////;    
		//// This is for classes that have already been defined.
		//ExistingResourceList:
		//	"{" names+=(ResourceByName | ResourceBySetOp) ("," names+=(ResourceByName | ResourceBySetOp))* "}";
		public ParserRule getRule() { return rule; }

		//"{" names+=(ResourceByName | ResourceBySetOp) ("," names+=(ResourceByName | ResourceBySetOp))* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//names+=(ResourceByName | ResourceBySetOp)
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//ResourceByName | ResourceBySetOp
		public Alternatives getNamesAlternatives_1_0() { return cNamesAlternatives_1_0; }

		//ResourceByName
		public RuleCall getNamesResourceByNameParserRuleCall_1_0_0() { return cNamesResourceByNameParserRuleCall_1_0_0; }

		//ResourceBySetOp
		public RuleCall getNamesResourceBySetOpParserRuleCall_1_0_1() { return cNamesResourceBySetOpParserRuleCall_1_0_1; }

		//("," names+=(ResourceByName | ResourceBySetOp))*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//names+=(ResourceByName | ResourceBySetOp)
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//ResourceByName | ResourceBySetOp
		public Alternatives getNamesAlternatives_2_1_0() { return cNamesAlternatives_2_1_0; }

		//ResourceByName
		public RuleCall getNamesResourceByNameParserRuleCall_2_1_0_0() { return cNamesResourceByNameParserRuleCall_2_1_0_0; }

		//ResourceBySetOp
		public RuleCall getNamesResourceBySetOpParserRuleCall_2_1_0_1() { return cNamesResourceBySetOpParserRuleCall_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ResourceIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceByNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cResourceBySetOpParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAnnTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cAnnTypeAlternatives_1_1_1_0 = (Alternatives)cAnnTypeAssignment_1_1_1.eContents().get(0);
		private final Keyword cAnnTypeAliasKeyword_1_1_1_0_0 = (Keyword)cAnnTypeAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cAnnTypeNoteKeyword_1_1_1_0_1 = (Keyword)cAnnTypeAlternatives_1_1_1_0.eContents().get(1);
		private final Assignment cAnnContentAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cAnnContentContentListParserRuleCall_1_1_2_0 = (RuleCall)cAnnContentAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cResourceByRestrictionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAnnTypeAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cAnnTypeAlternatives_2_1_1_0 = (Alternatives)cAnnTypeAssignment_2_1_1.eContents().get(0);
		private final Keyword cAnnTypeAliasKeyword_2_1_1_0_0 = (Keyword)cAnnTypeAlternatives_2_1_1_0.eContents().get(0);
		private final Keyword cAnnTypeNoteKeyword_2_1_1_0_1 = (Keyword)cAnnTypeAlternatives_2_1_1_0.eContents().get(1);
		private final Assignment cAnnContentAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cAnnContentContentListParserRuleCall_2_1_2_0 = (RuleCall)cAnnContentAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//// In some places, we must allow class names to be referenced and created by set operations.
		//ResourceIdentifier:
		//	ResourceByName | ResourceBySetOp ("(" annType+=("alias" | "note") annContent+=ContentList ")")* |
		//	ResourceByRestriction ("(" annType+=("alias" | "note") annContent+=ContentList ")")*;
		public ParserRule getRule() { return rule; }

		//ResourceByName | ResourceBySetOp ("(" annType+=("alias" | "note") annContent+=ContentList ")")* | ResourceByRestriction
		//("(" annType+=("alias" | "note") annContent+=ContentList ")")*
		public Alternatives getAlternatives() { return cAlternatives; }

		//ResourceByName
		public RuleCall getResourceByNameParserRuleCall_0() { return cResourceByNameParserRuleCall_0; }

		//ResourceBySetOp ("(" annType+=("alias" | "note") annContent+=ContentList ")")*
		public Group getGroup_1() { return cGroup_1; }

		//ResourceBySetOp
		public RuleCall getResourceBySetOpParserRuleCall_1_0() { return cResourceBySetOpParserRuleCall_1_0; }

		//("(" annType+=("alias" | "note") annContent+=ContentList ")")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//annType+=("alias" | "note")
		public Assignment getAnnTypeAssignment_1_1_1() { return cAnnTypeAssignment_1_1_1; }

		//"alias" | "note"
		public Alternatives getAnnTypeAlternatives_1_1_1_0() { return cAnnTypeAlternatives_1_1_1_0; }

		//"alias"
		public Keyword getAnnTypeAliasKeyword_1_1_1_0_0() { return cAnnTypeAliasKeyword_1_1_1_0_0; }

		//"note"
		public Keyword getAnnTypeNoteKeyword_1_1_1_0_1() { return cAnnTypeNoteKeyword_1_1_1_0_1; }

		//annContent+=ContentList
		public Assignment getAnnContentAssignment_1_1_2() { return cAnnContentAssignment_1_1_2; }

		//ContentList
		public RuleCall getAnnContentContentListParserRuleCall_1_1_2_0() { return cAnnContentContentListParserRuleCall_1_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }

		//ResourceByRestriction ("(" annType+=("alias" | "note") annContent+=ContentList ")")*
		public Group getGroup_2() { return cGroup_2; }

		//ResourceByRestriction
		public RuleCall getResourceByRestrictionParserRuleCall_2_0() { return cResourceByRestrictionParserRuleCall_2_0; }

		//("(" annType+=("alias" | "note") annContent+=ContentList ")")*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }

		//annType+=("alias" | "note")
		public Assignment getAnnTypeAssignment_2_1_1() { return cAnnTypeAssignment_2_1_1; }

		//"alias" | "note"
		public Alternatives getAnnTypeAlternatives_2_1_1_0() { return cAnnTypeAlternatives_2_1_1_0; }

		//"alias"
		public Keyword getAnnTypeAliasKeyword_2_1_1_0_0() { return cAnnTypeAliasKeyword_2_1_1_0_0; }

		//"note"
		public Keyword getAnnTypeNoteKeyword_2_1_1_0_1() { return cAnnTypeNoteKeyword_2_1_1_0_1; }

		//annContent+=ContentList
		public Assignment getAnnContentAssignment_2_1_2() { return cAnnContentAssignment_2_1_2; }

		//ContentList
		public RuleCall getAnnContentContentListParserRuleCall_2_1_2_0() { return cAnnContentContentListParserRuleCall_2_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
	}

	public class ResourceBySetOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceBySetOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnionResourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntersectionResourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ResourceBySetOp:
		//	UnionResource | IntersectionResource;
		public ParserRule getRule() { return rule; }

		//UnionResource | IntersectionResource
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnionResource
		public RuleCall getUnionResourceParserRuleCall_0() { return cUnionResourceParserRuleCall_0; }

		//IntersectionResource
		public RuleCall getIntersectionResourceParserRuleCall_1() { return cIntersectionResourceParserRuleCall_1; }
	}

	public class ResourceByRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceByRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropNameResourceByNameParserRuleCall_1_0 = (RuleCall)cPropNameAssignment_1.eContents().get(0);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondConditionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResourceByRestriction:
		//	"(" propName=ResourceByName cond=Condition ")";
		public ParserRule getRule() { return rule; }

		//"(" propName=ResourceByName cond=Condition ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//propName=ResourceByName
		public Assignment getPropNameAssignment_1() { return cPropNameAssignment_1; }

		//ResourceByName
		public RuleCall getPropNameResourceByNameParserRuleCall_1_0() { return cPropNameResourceByNameParserRuleCall_1_0; }

		//cond=Condition
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//Condition
		public RuleCall getCondConditionParserRuleCall_2_0() { return cCondConditionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class UnionResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnionResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesResourceIdentifierParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cOpAlternatives_2_0_0 = (Alternatives)cOpAssignment_2_0.eContents().get(0);
		private final Keyword cOpCommaKeyword_2_0_0_0 = (Keyword)cOpAlternatives_2_0_0.eContents().get(0);
		private final Keyword cOpOrKeyword_2_0_0_1 = (Keyword)cOpAlternatives_2_0_0.eContents().get(1);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesResourceIdentifierParserRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnionResource:
		//	"{" names+=ResourceIdentifier (op+=("," | "or") names+=ResourceIdentifier)+ "}";
		public ParserRule getRule() { return rule; }

		//"{" names+=ResourceIdentifier (op+=("," | "or") names+=ResourceIdentifier)+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//names+=ResourceIdentifier
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//ResourceIdentifier
		public RuleCall getNamesResourceIdentifierParserRuleCall_1_0() { return cNamesResourceIdentifierParserRuleCall_1_0; }

		//(op+=("," | "or") names+=ResourceIdentifier)+
		public Group getGroup_2() { return cGroup_2; }

		//op+=("," | "or")
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"," | "or"
		public Alternatives getOpAlternatives_2_0_0() { return cOpAlternatives_2_0_0; }

		//","
		public Keyword getOpCommaKeyword_2_0_0_0() { return cOpCommaKeyword_2_0_0_0; }

		//"or"
		public Keyword getOpOrKeyword_2_0_0_1() { return cOpOrKeyword_2_0_0_1; }

		//names+=ResourceIdentifier
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//ResourceIdentifier
		public RuleCall getNamesResourceIdentifierParserRuleCall_2_1_0() { return cNamesResourceIdentifierParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class IntersectionResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntersectionResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesResourceIdentifierParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpAndKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesResourceIdentifierParserRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IntersectionResource:
		//	"{" names+=ResourceIdentifier (op+="and" names+=ResourceIdentifier)+ "}";
		public ParserRule getRule() { return rule; }

		//"{" names+=ResourceIdentifier (op+="and" names+=ResourceIdentifier)+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//names+=ResourceIdentifier
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//ResourceIdentifier
		public RuleCall getNamesResourceIdentifierParserRuleCall_1_0() { return cNamesResourceIdentifierParserRuleCall_1_0; }

		//(op+="and" names+=ResourceIdentifier)+
		public Group getGroup_2() { return cGroup_2; }

		//op+="and"
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"and"
		public Keyword getOpAndKeyword_2_0_0() { return cOpAndKeyword_2_0_0; }

		//names+=ResourceIdentifier
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//ResourceIdentifier
		public RuleCall getNamesResourceIdentifierParserRuleCall_2_1_0() { return cNamesResourceIdentifierParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cClassNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cClassNameResourceNameParserRuleCall_0_0_0 = (RuleCall)cClassNameAssignment_0_0.eContents().get(0);
		private final Keyword cIsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cAKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cTopLevelKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cClassKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cMustBeOneOfAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cMustBeOneOfEnumeratedInstancesParserRuleCall_0_5_0 = (RuleCall)cMustBeOneOfAssignment_0_5.eContents().get(0);
		private final Assignment cDescribedByAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cDescribedByAddlClassInfoParserRuleCall_0_6_0 = (RuleCall)cDescribedByAssignment_0_6.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_0_7 = (RuleCall)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cClassListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassListResourceListParserRuleCall_1_0_0 = (RuleCall)cClassListAssignment_1_0.eContents().get(0);
		private final Keyword cAreKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cTopLevelKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cClassesKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cDescribedByAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cDescribedByAddlClassInfoParserRuleCall_1_4_0 = (RuleCall)cDescribedByAssignment_1_4.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cClassNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cClassNameResourceNameParserRuleCall_2_0_0 = (RuleCall)cClassNameAssignment_2_0.eContents().get(0);
		private final Keyword cIsKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cAKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cTypeKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cOfKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cClassIdentifierAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cClassIdentifierResourceIdentifierParserRuleCall_2_5_0 = (RuleCall)cClassIdentifierAssignment_2_5.eContents().get(0);
		private final Assignment cMustBeOneOfAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cMustBeOneOfEnumeratedInstancesParserRuleCall_2_6_0 = (RuleCall)cMustBeOneOfAssignment_2_6.eContents().get(0);
		private final Assignment cDescribedByAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cDescribedByAddlClassInfoParserRuleCall_2_7_0 = (RuleCall)cDescribedByAssignment_2_7.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_2_8 = (RuleCall)cGroup_2.eContents().get(8);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cClassListAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cClassListResourceListParserRuleCall_3_0_0 = (RuleCall)cClassListAssignment_3_0.eContents().get(0);
		private final Keyword cAreKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cTypesKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cOfKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cClassIdentifierAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cClassIdentifierResourceIdentifierParserRuleCall_3_4_0 = (RuleCall)cClassIdentifierAssignment_3_4.eContents().get(0);
		private final Assignment cDescribedByAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cDescribedByAddlClassInfoParserRuleCall_3_5_0 = (RuleCall)cDescribedByAssignment_3_5.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_3_6 = (RuleCall)cGroup_3.eContents().get(6);
		
		//// Classes may be declared in many ways.
		//ClassDeclaration:
		//	className=ResourceName "is" "a" "top-level"? "class" mustBeOneOf=EnumeratedInstances? describedBy+=AddlClassInfo* EOS
		//	| classList=ResourceList "are" "top-level"? "classes" describedBy+=AddlClassInfo* EOS | className=ResourceName "is"
		//	"a" "type" "of" classIdentifier=ResourceIdentifier mustBeOneOf=EnumeratedInstances? describedBy+=AddlClassInfo* EOS |
		//	classList=ResourceList "are" "types" "of" classIdentifier=ResourceIdentifier describedBy+=AddlClassInfo* EOS;
		public ParserRule getRule() { return rule; }

		//className=ResourceName "is" "a" "top-level"? "class" mustBeOneOf=EnumeratedInstances? describedBy+=AddlClassInfo* EOS |
		//classList=ResourceList "are" "top-level"? "classes" describedBy+=AddlClassInfo* EOS | className=ResourceName "is" "a"
		//"type" "of" classIdentifier=ResourceIdentifier mustBeOneOf=EnumeratedInstances? describedBy+=AddlClassInfo* EOS |
		//classList=ResourceList "are" "types" "of" classIdentifier=ResourceIdentifier describedBy+=AddlClassInfo* EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//className=ResourceName "is" "a" "top-level"? "class" mustBeOneOf=EnumeratedInstances? describedBy+=AddlClassInfo* EOS
		public Group getGroup_0() { return cGroup_0; }

		//className=ResourceName
		public Assignment getClassNameAssignment_0_0() { return cClassNameAssignment_0_0; }

		//ResourceName
		public RuleCall getClassNameResourceNameParserRuleCall_0_0_0() { return cClassNameResourceNameParserRuleCall_0_0_0; }

		//"is"
		public Keyword getIsKeyword_0_1() { return cIsKeyword_0_1; }

		//"a"
		public Keyword getAKeyword_0_2() { return cAKeyword_0_2; }

		//"top-level"?
		public Keyword getTopLevelKeyword_0_3() { return cTopLevelKeyword_0_3; }

		//"class"
		public Keyword getClassKeyword_0_4() { return cClassKeyword_0_4; }

		//mustBeOneOf=EnumeratedInstances?
		public Assignment getMustBeOneOfAssignment_0_5() { return cMustBeOneOfAssignment_0_5; }

		//EnumeratedInstances
		public RuleCall getMustBeOneOfEnumeratedInstancesParserRuleCall_0_5_0() { return cMustBeOneOfEnumeratedInstancesParserRuleCall_0_5_0; }

		//describedBy+=AddlClassInfo*
		public Assignment getDescribedByAssignment_0_6() { return cDescribedByAssignment_0_6; }

		//AddlClassInfo
		public RuleCall getDescribedByAddlClassInfoParserRuleCall_0_6_0() { return cDescribedByAddlClassInfoParserRuleCall_0_6_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_7() { return cEOSTerminalRuleCall_0_7; }

		//classList=ResourceList "are" "top-level"? "classes" describedBy+=AddlClassInfo* EOS
		public Group getGroup_1() { return cGroup_1; }

		//classList=ResourceList
		public Assignment getClassListAssignment_1_0() { return cClassListAssignment_1_0; }

		//ResourceList
		public RuleCall getClassListResourceListParserRuleCall_1_0_0() { return cClassListResourceListParserRuleCall_1_0_0; }

		//"are"
		public Keyword getAreKeyword_1_1() { return cAreKeyword_1_1; }

		//"top-level"?
		public Keyword getTopLevelKeyword_1_2() { return cTopLevelKeyword_1_2; }

		//"classes"
		public Keyword getClassesKeyword_1_3() { return cClassesKeyword_1_3; }

		//describedBy+=AddlClassInfo*
		public Assignment getDescribedByAssignment_1_4() { return cDescribedByAssignment_1_4; }

		//AddlClassInfo
		public RuleCall getDescribedByAddlClassInfoParserRuleCall_1_4_0() { return cDescribedByAddlClassInfoParserRuleCall_1_4_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_5() { return cEOSTerminalRuleCall_1_5; }

		//className=ResourceName "is" "a" "type" "of" classIdentifier=ResourceIdentifier mustBeOneOf=EnumeratedInstances?
		//describedBy+=AddlClassInfo* EOS
		public Group getGroup_2() { return cGroup_2; }

		//className=ResourceName
		public Assignment getClassNameAssignment_2_0() { return cClassNameAssignment_2_0; }

		//ResourceName
		public RuleCall getClassNameResourceNameParserRuleCall_2_0_0() { return cClassNameResourceNameParserRuleCall_2_0_0; }

		//"is"
		public Keyword getIsKeyword_2_1() { return cIsKeyword_2_1; }

		//"a"
		public Keyword getAKeyword_2_2() { return cAKeyword_2_2; }

		//"type"
		public Keyword getTypeKeyword_2_3() { return cTypeKeyword_2_3; }

		//"of"
		public Keyword getOfKeyword_2_4() { return cOfKeyword_2_4; }

		//classIdentifier=ResourceIdentifier
		public Assignment getClassIdentifierAssignment_2_5() { return cClassIdentifierAssignment_2_5; }

		//ResourceIdentifier
		public RuleCall getClassIdentifierResourceIdentifierParserRuleCall_2_5_0() { return cClassIdentifierResourceIdentifierParserRuleCall_2_5_0; }

		//mustBeOneOf=EnumeratedInstances?
		public Assignment getMustBeOneOfAssignment_2_6() { return cMustBeOneOfAssignment_2_6; }

		//EnumeratedInstances
		public RuleCall getMustBeOneOfEnumeratedInstancesParserRuleCall_2_6_0() { return cMustBeOneOfEnumeratedInstancesParserRuleCall_2_6_0; }

		//describedBy+=AddlClassInfo*
		public Assignment getDescribedByAssignment_2_7() { return cDescribedByAssignment_2_7; }

		//AddlClassInfo
		public RuleCall getDescribedByAddlClassInfoParserRuleCall_2_7_0() { return cDescribedByAddlClassInfoParserRuleCall_2_7_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2_8() { return cEOSTerminalRuleCall_2_8; }

		//classList=ResourceList "are" "types" "of" classIdentifier=ResourceIdentifier describedBy+=AddlClassInfo* EOS
		public Group getGroup_3() { return cGroup_3; }

		//classList=ResourceList
		public Assignment getClassListAssignment_3_0() { return cClassListAssignment_3_0; }

		//ResourceList
		public RuleCall getClassListResourceListParserRuleCall_3_0_0() { return cClassListResourceListParserRuleCall_3_0_0; }

		//"are"
		public Keyword getAreKeyword_3_1() { return cAreKeyword_3_1; }

		//"types"
		public Keyword getTypesKeyword_3_2() { return cTypesKeyword_3_2; }

		//"of"
		public Keyword getOfKeyword_3_3() { return cOfKeyword_3_3; }

		//classIdentifier=ResourceIdentifier
		public Assignment getClassIdentifierAssignment_3_4() { return cClassIdentifierAssignment_3_4; }

		//ResourceIdentifier
		public RuleCall getClassIdentifierResourceIdentifierParserRuleCall_3_4_0() { return cClassIdentifierResourceIdentifierParserRuleCall_3_4_0; }

		//describedBy+=AddlClassInfo*
		public Assignment getDescribedByAssignment_3_5() { return cDescribedByAssignment_3_5; }

		//AddlClassInfo
		public RuleCall getDescribedByAddlClassInfoParserRuleCall_3_5_0() { return cDescribedByAddlClassInfoParserRuleCall_3_5_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_3_6() { return cEOSTerminalRuleCall_3_6; }
	}

	public class EnumeratedInstancesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumeratedInstances");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMustKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOneKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInstanceListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInstanceListResourceListParserRuleCall_5_0 = (RuleCall)cInstanceListAssignment_5.eContents().get(0);
		
		//// Class declarations may also enumerate the class's instances.
		//EnumeratedInstances:
		//	","? "must" "be" "one" "of" instanceList=ResourceList;
		public ParserRule getRule() { return rule; }

		//","? "must" "be" "one" "of" instanceList=ResourceList
		public Group getGroup() { return cGroup; }

		//","?
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//"must"
		public Keyword getMustKeyword_1() { return cMustKeyword_1; }

		//"be"
		public Keyword getBeKeyword_2() { return cBeKeyword_2; }

		//"one"
		public Keyword getOneKeyword_3() { return cOneKeyword_3; }

		//"of"
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }

		//instanceList=ResourceList
		public Assignment getInstanceListAssignment_5() { return cInstanceListAssignment_5; }

		//ResourceList
		public RuleCall getInstanceListResourceListParserRuleCall_5_0() { return cInstanceListResourceListParserRuleCall_5_0; }
	}

	public class AddlClassInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddlClassInfo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCommaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cDescribedKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cByKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Assignment cPropertyByNameAssignment_0_3_0 = (Assignment)cAlternatives_0_3.eContents().get(0);
		private final RuleCall cPropertyByNameResourceByNameParserRuleCall_0_3_0_0 = (RuleCall)cPropertyByNameAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cAlternatives_0_3.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0_3_1_0 = (Assignment)cGroup_0_3_1.eContents().get(0);
		private final RuleCall cPropertyNameResourceNameParserRuleCall_0_3_1_0_0 = (RuleCall)cPropertyNameAssignment_0_3_1_0.eContents().get(0);
		private final Assignment cRangeAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_0_3_1_1_0 = (RuleCall)cRangeAssignment_0_3_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cDescribedKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cByKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPropertyByNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPropertyByNameResourceByNameParserRuleCall_1_3_0 = (RuleCall)cPropertyByNameAssignment_1_3.eContents().get(0);
		private final Assignment cRestrictionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRestrictionConditionParserRuleCall_1_4_0 = (RuleCall)cRestrictionAssignment_1_4.eContents().get(0);
		
		//// Class declarations may also describe the class's properties.
		//AddlClassInfo:
		//	","? "described" "by" (propertyByName=ResourceByName | propertyName=ResourceName range=Range) | ","? "described" "by"
		//	propertyByName=ResourceByName restriction=Condition;
		public ParserRule getRule() { return rule; }

		//","? "described" "by" (propertyByName=ResourceByName | propertyName=ResourceName range=Range) | ","? "described" "by"
		//propertyByName=ResourceByName restriction=Condition
		public Alternatives getAlternatives() { return cAlternatives; }

		//","? "described" "by" (propertyByName=ResourceByName | propertyName=ResourceName range=Range)
		public Group getGroup_0() { return cGroup_0; }

		//","?
		public Keyword getCommaKeyword_0_0() { return cCommaKeyword_0_0; }

		//"described"
		public Keyword getDescribedKeyword_0_1() { return cDescribedKeyword_0_1; }

		//"by"
		public Keyword getByKeyword_0_2() { return cByKeyword_0_2; }

		//propertyByName=ResourceByName | propertyName=ResourceName range=Range
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }

		//propertyByName=ResourceByName
		public Assignment getPropertyByNameAssignment_0_3_0() { return cPropertyByNameAssignment_0_3_0; }

		//ResourceByName
		public RuleCall getPropertyByNameResourceByNameParserRuleCall_0_3_0_0() { return cPropertyByNameResourceByNameParserRuleCall_0_3_0_0; }

		//propertyName=ResourceName range=Range
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//propertyName=ResourceName
		public Assignment getPropertyNameAssignment_0_3_1_0() { return cPropertyNameAssignment_0_3_1_0; }

		//ResourceName
		public RuleCall getPropertyNameResourceNameParserRuleCall_0_3_1_0_0() { return cPropertyNameResourceNameParserRuleCall_0_3_1_0_0; }

		//range=Range
		public Assignment getRangeAssignment_0_3_1_1() { return cRangeAssignment_0_3_1_1; }

		//Range
		public RuleCall getRangeRangeParserRuleCall_0_3_1_1_0() { return cRangeRangeParserRuleCall_0_3_1_1_0; }

		//","? "described" "by" propertyByName=ResourceByName restriction=Condition
		public Group getGroup_1() { return cGroup_1; }

		//","?
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//"described"
		public Keyword getDescribedKeyword_1_1() { return cDescribedKeyword_1_1; }

		//"by"
		public Keyword getByKeyword_1_2() { return cByKeyword_1_2; }

		//propertyByName=ResourceByName
		public Assignment getPropertyByNameAssignment_1_3() { return cPropertyByNameAssignment_1_3; }

		//ResourceByName
		public RuleCall getPropertyByNameResourceByNameParserRuleCall_1_3_0() { return cPropertyByNameResourceByNameParserRuleCall_1_3_0; }

		//restriction=Condition
		public Assignment getRestrictionAssignment_1_4() { return cRestrictionAssignment_1_4; }

		//Condition
		public RuleCall getRestrictionConditionParserRuleCall_1_4_0() { return cRestrictionConditionParserRuleCall_1_4_0; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHasKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWithKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cAKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cSingleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cSingleSingleKeyword_1_0_1_0 = (Keyword)cSingleAssignment_1_0_1.eContents().get(0);
		private final Keyword cValueKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cAKeyword_1_1_0_0_0 = (Keyword)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cListAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final Keyword cListListKeyword_1_1_0_0_1_0 = (Keyword)cListAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cListsAssignment_1_1_0_1 = (Assignment)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cListsListsKeyword_1_1_0_1_0 = (Keyword)cListsAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cOfKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cValuesKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cValuesKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeRangeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//// ... a single value ...
		//// ... a List of values ...
		//// ... Lists of values ...
		//// ... values ...
		//Range:
		//	("has" //    ('has'|'with') ('a' single='single' 'value'|'values') 'of' 'type' type=RangeType;
		//	| "with") ("a" single="single" "value" | ("a" list="List" | lists="Lists") "of" "values" | "values") "of" "type"
		//	type=RangeType;
		public ParserRule getRule() { return rule; }

		//("has" //    ('has'|'with') ('a' single='single' 'value'|'values') 'of' 'type' type=RangeType;
		//| "with") ("a" single="single" "value" | ("a" list="List" | lists="Lists") "of" "values" | "values") "of" "type"
		//type=RangeType
		public Group getGroup() { return cGroup; }

		//"has" //    ('has'|'with') ('a' single='single' 'value'|'values') 'of' 'type' type=RangeType;
		//| "with"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"has"
		public Keyword getHasKeyword_0_0() { return cHasKeyword_0_0; }

		//"with"
		public Keyword getWithKeyword_0_1() { return cWithKeyword_0_1; }

		//"a" single="single" "value" | ("a" list="List" | lists="Lists") "of" "values" | "values"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"a" single="single" "value"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"a"
		public Keyword getAKeyword_1_0_0() { return cAKeyword_1_0_0; }

		//single="single"
		public Assignment getSingleAssignment_1_0_1() { return cSingleAssignment_1_0_1; }

		//"single"
		public Keyword getSingleSingleKeyword_1_0_1_0() { return cSingleSingleKeyword_1_0_1_0; }

		//"value"
		public Keyword getValueKeyword_1_0_2() { return cValueKeyword_1_0_2; }

		//("a" list="List" | lists="Lists") "of" "values"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"a" list="List" | lists="Lists"
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//"a" list="List"
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//"a"
		public Keyword getAKeyword_1_1_0_0_0() { return cAKeyword_1_1_0_0_0; }

		//list="List"
		public Assignment getListAssignment_1_1_0_0_1() { return cListAssignment_1_1_0_0_1; }

		//"List"
		public Keyword getListListKeyword_1_1_0_0_1_0() { return cListListKeyword_1_1_0_0_1_0; }

		//lists="Lists"
		public Assignment getListsAssignment_1_1_0_1() { return cListsAssignment_1_1_0_1; }

		//"Lists"
		public Keyword getListsListsKeyword_1_1_0_1_0() { return cListsListsKeyword_1_1_0_1_0; }

		//"of"
		public Keyword getOfKeyword_1_1_1() { return cOfKeyword_1_1_1; }

		//"values"
		public Keyword getValuesKeyword_1_1_2() { return cValuesKeyword_1_1_2; }

		//"values"
		public Keyword getValuesKeyword_1_2() { return cValuesKeyword_1_2; }

		//"of"
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//type=RangeType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//RangeType
		public RuleCall getTypeRangeTypeParserRuleCall_4_0() { return cTypeRangeTypeParserRuleCall_4_0; }
	}

	public class RangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cClassIdentifierAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cClassIdentifierResourceIdentifierParserRuleCall_0_0 = (RuleCall)cClassIdentifierAssignment_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeDataTypeEnumRuleCall_1_0 = (RuleCall)cDataTypeAssignment_1.eContents().get(0);
		
		////	  | dataType=ResourceName
		//RangeType:
		//	classIdentifier=ResourceIdentifier | dataType=DataType;
		public ParserRule getRule() { return rule; }

		//classIdentifier=ResourceIdentifier | dataType=DataType
		public Alternatives getAlternatives() { return cAlternatives; }

		//classIdentifier=ResourceIdentifier
		public Assignment getClassIdentifierAssignment_0() { return cClassIdentifierAssignment_0; }

		//ResourceIdentifier
		public RuleCall getClassIdentifierResourceIdentifierParserRuleCall_0_0() { return cClassIdentifierResourceIdentifierParserRuleCall_0_0; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }

		//DataType
		public RuleCall getDataTypeDataTypeEnumRuleCall_1_0() { return cDataTypeDataTypeEnumRuleCall_1_0; }
	}

	public class UserDefinedDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserDefinedDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUserDefinedDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUserDefinedDataTypeResourceNameParserRuleCall_2_0 = (RuleCall)cUserDefinedDataTypeAssignment_2.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRestrictionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRestrictionDataTypeRestrictionParserRuleCall_4_0 = (RuleCall)cRestrictionAssignment_4.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//UserDefinedDataType:
		//	"data" "type" userDefinedDataType=ResourceName "is" restriction=DataTypeRestriction EOS;
		public ParserRule getRule() { return rule; }

		//"data" "type" userDefinedDataType=ResourceName "is" restriction=DataTypeRestriction EOS
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//userDefinedDataType=ResourceName
		public Assignment getUserDefinedDataTypeAssignment_2() { return cUserDefinedDataTypeAssignment_2; }

		//ResourceName
		public RuleCall getUserDefinedDataTypeResourceNameParserRuleCall_2_0() { return cUserDefinedDataTypeResourceNameParserRuleCall_2_0; }

		//"is"
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }

		//restriction=DataTypeRestriction
		public Assignment getRestrictionAssignment_4() { return cRestrictionAssignment_4; }

		//DataTypeRestriction
		public RuleCall getRestrictionDataTypeRestrictionParserRuleCall_4_0() { return cRestrictionDataTypeRestrictionParserRuleCall_4_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_5() { return cEOSTerminalRuleCall_5; }
	}

	public class DataTypeRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cAKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cAnKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cBasetypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBasetypeDataTypeEnumRuleCall_0_1_0 = (RuleCall)cBasetypeAssignment_0_1.eContents().get(0);
		private final Assignment cFacetsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFacetsFacetsParserRuleCall_0_2_0 = (RuleCall)cFacetsAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBasetypesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBasetypesDataTypeEnumRuleCall_1_1_0 = (RuleCall)cBasetypesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cOrKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Assignment cBasetypesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cBasetypesDataTypeEnumRuleCall_1_2_1_0 = (RuleCall)cBasetypesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//DataTypeRestriction:
		//	("a" | "an")? basetype=DataType facets=Facets | "{" basetypes+=DataType (("," | "or") basetypes+=DataType)+ "}";
		public ParserRule getRule() { return rule; }

		//("a" | "an")? basetype=DataType facets=Facets | "{" basetypes+=DataType (("," | "or") basetypes+=DataType)+ "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("a" | "an")? basetype=DataType facets=Facets
		public Group getGroup_0() { return cGroup_0; }

		//("a" | "an")?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"a"
		public Keyword getAKeyword_0_0_0() { return cAKeyword_0_0_0; }

		//"an"
		public Keyword getAnKeyword_0_0_1() { return cAnKeyword_0_0_1; }

		//basetype=DataType
		public Assignment getBasetypeAssignment_0_1() { return cBasetypeAssignment_0_1; }

		//DataType
		public RuleCall getBasetypeDataTypeEnumRuleCall_0_1_0() { return cBasetypeDataTypeEnumRuleCall_0_1_0; }

		//facets=Facets
		public Assignment getFacetsAssignment_0_2() { return cFacetsAssignment_0_2; }

		//Facets
		public RuleCall getFacetsFacetsParserRuleCall_0_2_0() { return cFacetsFacetsParserRuleCall_0_2_0; }

		//"{" basetypes+=DataType (("," | "or") basetypes+=DataType)+ "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//basetypes+=DataType
		public Assignment getBasetypesAssignment_1_1() { return cBasetypesAssignment_1_1; }

		//DataType
		public RuleCall getBasetypesDataTypeEnumRuleCall_1_1_0() { return cBasetypesDataTypeEnumRuleCall_1_1_0; }

		//(("," | "or") basetypes+=DataType)+
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"," | "or"
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_2_0_0() { return cCommaKeyword_1_2_0_0; }

		//"or"
		public Keyword getOrKeyword_1_2_0_1() { return cOrKeyword_1_2_0_1; }

		//basetypes+=DataType
		public Assignment getBasetypesAssignment_1_2_1() { return cBasetypesAssignment_1_2_1; }

		//DataType
		public RuleCall getBasetypesDataTypeEnumRuleCall_1_2_1_0() { return cBasetypesDataTypeEnumRuleCall_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class FacetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Facets");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMinexinAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cMinexinAlternatives_0_0_0 = (Alternatives)cMinexinAssignment_0_0.eContents().get(0);
		private final Keyword cMinexinLeftParenthesisKeyword_0_0_0_0 = (Keyword)cMinexinAlternatives_0_0_0.eContents().get(0);
		private final Keyword cMinexinLeftSquareBracketKeyword_0_0_0_1 = (Keyword)cMinexinAlternatives_0_0_0.eContents().get(1);
		private final Assignment cMinAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMinNUMBERParserRuleCall_0_1_0 = (RuleCall)cMinAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cMaxAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cMaxNUMBERParserRuleCall_0_3_0 = (RuleCall)cMaxAssignment_0_3.eContents().get(0);
		private final Assignment cMaxexinAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final Alternatives cMaxexinAlternatives_0_4_0 = (Alternatives)cMaxexinAssignment_0_4.eContents().get(0);
		private final Keyword cMaxexinRightSquareBracketKeyword_0_4_0_0 = (Keyword)cMaxexinAlternatives_0_4_0.eContents().get(0);
		private final Keyword cMaxexinRightParenthesisKeyword_0_4_0_1 = (Keyword)cMaxexinAlternatives_0_4_0.eContents().get(1);
		private final Assignment cRegexAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRegexSTRINGTerminalRuleCall_1_0 = (RuleCall)cRegexAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLengthKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cLenAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cLenNUMBERParserRuleCall_2_1_0_0 = (RuleCall)cLenAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Assignment cMinlenAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cMinlenNUMBERParserRuleCall_2_1_1_0_0 = (RuleCall)cMinlenAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Assignment cMaxlenAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cMaxlenNUMBERParserRuleCall_2_1_1_2_0 = (RuleCall)cMaxlenAssignment_2_1_1_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValuesAlternatives_3_1_0 = (Alternatives)cValuesAssignment_3_1.eContents().get(0);
		private final RuleCall cValuesSTRINGTerminalRuleCall_3_1_0_0 = (RuleCall)cValuesAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cValuesNUMBERParserRuleCall_3_1_0_1 = (RuleCall)cValuesAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cValuesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final Alternatives cValuesAlternatives_3_2_1_0 = (Alternatives)cValuesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cValuesSTRINGTerminalRuleCall_3_2_1_0_0 = (RuleCall)cValuesAlternatives_3_2_1_0.eContents().get(0);
		private final RuleCall cValuesNUMBERParserRuleCall_3_2_1_0_1 = (RuleCall)cValuesAlternatives_3_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Facets:
		//	minexin=("(" | "[") min=NUMBER? "," max=NUMBER? maxexin=("]" | ")") | regex=STRING | "length" (len=NUMBER |
		//	minlen=NUMBER "-" maxlen=NUMBER) | "{" values+=(STRING | NUMBER) (","? values+=(STRING | NUMBER))* "}";
		public ParserRule getRule() { return rule; }

		//minexin=("(" | "[") min=NUMBER? "," max=NUMBER? maxexin=("]" | ")") | regex=STRING | "length" (len=NUMBER |
		//minlen=NUMBER "-" maxlen=NUMBER) | "{" values+=(STRING | NUMBER) (","? values+=(STRING | NUMBER))* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//minexin=("(" | "[") min=NUMBER? "," max=NUMBER? maxexin=("]" | ")")
		public Group getGroup_0() { return cGroup_0; }

		//minexin=("(" | "[")
		public Assignment getMinexinAssignment_0_0() { return cMinexinAssignment_0_0; }

		//"(" | "["
		public Alternatives getMinexinAlternatives_0_0_0() { return cMinexinAlternatives_0_0_0; }

		//"("
		public Keyword getMinexinLeftParenthesisKeyword_0_0_0_0() { return cMinexinLeftParenthesisKeyword_0_0_0_0; }

		//"["
		public Keyword getMinexinLeftSquareBracketKeyword_0_0_0_1() { return cMinexinLeftSquareBracketKeyword_0_0_0_1; }

		//min=NUMBER?
		public Assignment getMinAssignment_0_1() { return cMinAssignment_0_1; }

		//NUMBER
		public RuleCall getMinNUMBERParserRuleCall_0_1_0() { return cMinNUMBERParserRuleCall_0_1_0; }

		//","
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }

		//max=NUMBER?
		public Assignment getMaxAssignment_0_3() { return cMaxAssignment_0_3; }

		//NUMBER
		public RuleCall getMaxNUMBERParserRuleCall_0_3_0() { return cMaxNUMBERParserRuleCall_0_3_0; }

		//maxexin=("]" | ")")
		public Assignment getMaxexinAssignment_0_4() { return cMaxexinAssignment_0_4; }

		//"]" | ")"
		public Alternatives getMaxexinAlternatives_0_4_0() { return cMaxexinAlternatives_0_4_0; }

		//"]"
		public Keyword getMaxexinRightSquareBracketKeyword_0_4_0_0() { return cMaxexinRightSquareBracketKeyword_0_4_0_0; }

		//")"
		public Keyword getMaxexinRightParenthesisKeyword_0_4_0_1() { return cMaxexinRightParenthesisKeyword_0_4_0_1; }

		//regex=STRING
		public Assignment getRegexAssignment_1() { return cRegexAssignment_1; }

		//STRING
		public RuleCall getRegexSTRINGTerminalRuleCall_1_0() { return cRegexSTRINGTerminalRuleCall_1_0; }

		//"length" (len=NUMBER | minlen=NUMBER "-" maxlen=NUMBER)
		public Group getGroup_2() { return cGroup_2; }

		//"length"
		public Keyword getLengthKeyword_2_0() { return cLengthKeyword_2_0; }

		//len=NUMBER | minlen=NUMBER "-" maxlen=NUMBER
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//len=NUMBER
		public Assignment getLenAssignment_2_1_0() { return cLenAssignment_2_1_0; }

		//NUMBER
		public RuleCall getLenNUMBERParserRuleCall_2_1_0_0() { return cLenNUMBERParserRuleCall_2_1_0_0; }

		//minlen=NUMBER "-" maxlen=NUMBER
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//minlen=NUMBER
		public Assignment getMinlenAssignment_2_1_1_0() { return cMinlenAssignment_2_1_1_0; }

		//NUMBER
		public RuleCall getMinlenNUMBERParserRuleCall_2_1_1_0_0() { return cMinlenNUMBERParserRuleCall_2_1_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1_1_1() { return cHyphenMinusKeyword_2_1_1_1; }

		//maxlen=NUMBER
		public Assignment getMaxlenAssignment_2_1_1_2() { return cMaxlenAssignment_2_1_1_2; }

		//NUMBER
		public RuleCall getMaxlenNUMBERParserRuleCall_2_1_1_2_0() { return cMaxlenNUMBERParserRuleCall_2_1_1_2_0; }

		//"{" values+=(STRING | NUMBER) (","? values+=(STRING | NUMBER))* "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//values+=(STRING | NUMBER)
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//STRING | NUMBER
		public Alternatives getValuesAlternatives_3_1_0() { return cValuesAlternatives_3_1_0; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_3_1_0_0() { return cValuesSTRINGTerminalRuleCall_3_1_0_0; }

		//NUMBER
		public RuleCall getValuesNUMBERParserRuleCall_3_1_0_1() { return cValuesNUMBERParserRuleCall_3_1_0_1; }

		//(","? values+=(STRING | NUMBER))*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","?
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//values+=(STRING | NUMBER)
		public Assignment getValuesAssignment_3_2_1() { return cValuesAssignment_3_2_1; }

		//STRING | NUMBER
		public Alternatives getValuesAlternatives_3_2_1_0() { return cValuesAlternatives_3_2_1_0; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_3_2_1_0_0() { return cValuesSTRINGTerminalRuleCall_3_2_1_0_0; }

		//NUMBER
		public RuleCall getValuesNUMBERParserRuleCall_3_2_1_0_1() { return cValuesNUMBERParserRuleCall_3_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class AnArticleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnArticle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndefiniteArticleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefiniteArticleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// These articles can appear before the property name and are indicative of the functionality of the property or
		////	the cardinality of the property on the class
		//AnArticle:
		//	IndefiniteArticle | DefiniteArticle;
		public ParserRule getRule() { return rule; }

		//IndefiniteArticle | DefiniteArticle
		public Alternatives getAlternatives() { return cAlternatives; }

		//IndefiniteArticle
		public RuleCall getIndefiniteArticleParserRuleCall_0() { return cIndefiniteArticleParserRuleCall_0; }

		//DefiniteArticle
		public RuleCall getDefiniteArticleParserRuleCall_1() { return cDefiniteArticleParserRuleCall_1; }
	}

	public class IndefiniteArticleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndefiniteArticle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAnKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAnKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//IndefiniteArticle:
		//	"A" | "a" | "An" | "an";
		public ParserRule getRule() { return rule; }

		//"A" | "a" | "An" | "an"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"A"
		public Keyword getAKeyword_0() { return cAKeyword_0; }

		//"a"
		public Keyword getAKeyword_1() { return cAKeyword_1; }

		//"An"
		public Keyword getAnKeyword_2() { return cAnKeyword_2; }

		//"an"
		public Keyword getAnKeyword_3() { return cAnKeyword_3; }
	}

	public class DefiniteArticleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefiniteArticle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//DefiniteArticle:
		//	"The" | "the";
		public ParserRule getRule() { return rule; }

		//"The" | "the"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"The"
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }

		//"the"
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
	}

	public class EquivalentConceptsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EquivalentConcepts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClass1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClass1ResourceByNameParserRuleCall_0_0 = (RuleCall)cClass1Assignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClass2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClass2ResourceIdentifierParserRuleCall_5_0 = (RuleCall)cClass2Assignment_5.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//// Two classes, properties, or individuals are known to be "the same"
		////	-- equivalent sets for classes
		////  -- equivalent properties for properties
		////  -- the same individual for individuals
		//EquivalentConcepts:
		//	class1=ResourceByName "is" "the" "same" "as" class2=ResourceIdentifier EOS;
		public ParserRule getRule() { return rule; }

		//class1=ResourceByName "is" "the" "same" "as" class2=ResourceIdentifier EOS
		public Group getGroup() { return cGroup; }

		//class1=ResourceByName
		public Assignment getClass1Assignment_0() { return cClass1Assignment_0; }

		//ResourceByName
		public RuleCall getClass1ResourceByNameParserRuleCall_0_0() { return cClass1ResourceByNameParserRuleCall_0_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//"the"
		public Keyword getTheKeyword_2() { return cTheKeyword_2; }

		//"same"
		public Keyword getSameKeyword_3() { return cSameKeyword_3; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//class2=ResourceIdentifier
		public Assignment getClass2Assignment_5() { return cClass2Assignment_5; }

		//ResourceIdentifier
		public RuleCall getClass2ResourceIdentifierParserRuleCall_5_0() { return cClass2ResourceIdentifierParserRuleCall_5_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_6() { return cEOSTerminalRuleCall_6; }
	}

	public class DisjointClassesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisjointClasses");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cClass1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cClass1ResourceByNameParserRuleCall_0_0_0 = (RuleCall)cClass1Assignment_0_0.eContents().get(0);
		private final Keyword cAndKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cClass2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cClass2ResourceIdentifierParserRuleCall_0_2_0 = (RuleCall)cClass2Assignment_0_2.eContents().get(0);
		private final Keyword cAreKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cDisjointKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cEOSTerminalRuleCall_0_5 = (RuleCall)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cClassesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassesExistingResourceListParserRuleCall_1_0_0 = (RuleCall)cClassesAssignment_1_0.eContents().get(0);
		private final Keyword cAreKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cDisjointKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cEOSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//// Two classes are known to be disjoint sets.
		//DisjointClasses:
		//	class1=ResourceByName "and" class2=ResourceIdentifier "are" "disjoint" EOS | classes=ExistingResourceList "are"
		//	"disjoint" EOS;
		public ParserRule getRule() { return rule; }

		//class1=ResourceByName "and" class2=ResourceIdentifier "are" "disjoint" EOS | classes=ExistingResourceList "are"
		//"disjoint" EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//class1=ResourceByName "and" class2=ResourceIdentifier "are" "disjoint" EOS
		public Group getGroup_0() { return cGroup_0; }

		//class1=ResourceByName
		public Assignment getClass1Assignment_0_0() { return cClass1Assignment_0_0; }

		//ResourceByName
		public RuleCall getClass1ResourceByNameParserRuleCall_0_0_0() { return cClass1ResourceByNameParserRuleCall_0_0_0; }

		//"and"
		public Keyword getAndKeyword_0_1() { return cAndKeyword_0_1; }

		//class2=ResourceIdentifier
		public Assignment getClass2Assignment_0_2() { return cClass2Assignment_0_2; }

		//ResourceIdentifier
		public RuleCall getClass2ResourceIdentifierParserRuleCall_0_2_0() { return cClass2ResourceIdentifierParserRuleCall_0_2_0; }

		//"are"
		public Keyword getAreKeyword_0_3() { return cAreKeyword_0_3; }

		//"disjoint"
		public Keyword getDisjointKeyword_0_4() { return cDisjointKeyword_0_4; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_5() { return cEOSTerminalRuleCall_0_5; }

		//classes=ExistingResourceList "are" "disjoint" EOS
		public Group getGroup_1() { return cGroup_1; }

		//classes=ExistingResourceList
		public Assignment getClassesAssignment_1_0() { return cClassesAssignment_1_0; }

		//ExistingResourceList
		public RuleCall getClassesExistingResourceListParserRuleCall_1_0_0() { return cClassesExistingResourceListParserRuleCall_1_0_0; }

		//"are"
		public Keyword getAreKeyword_1_1() { return cAreKeyword_1_1; }

		//"disjoint"
		public Keyword getDisjointKeyword_1_2() { return cDisjointKeyword_1_2; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_3() { return cEOSTerminalRuleCall_1_3; }
	}

	public class ComplementOfClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplementOfClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClass1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClass1ResourceByNameParserRuleCall_0_0 = (RuleCall)cClass1Assignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cNotKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClass2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cClass2ResourceIdentifierParserRuleCall_6_0 = (RuleCall)cClass2Assignment_6.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//// A class is known to be the complement of another class.
		//ComplementOfClass:
		//	class1=ResourceByName "is" "the" "same" "as" "not" class2=ResourceIdentifier EOS;
		public ParserRule getRule() { return rule; }

		//class1=ResourceByName "is" "the" "same" "as" "not" class2=ResourceIdentifier EOS
		public Group getGroup() { return cGroup; }

		//class1=ResourceByName
		public Assignment getClass1Assignment_0() { return cClass1Assignment_0; }

		//ResourceByName
		public RuleCall getClass1ResourceByNameParserRuleCall_0_0() { return cClass1ResourceByNameParserRuleCall_0_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//"the"
		public Keyword getTheKeyword_2() { return cTheKeyword_2; }

		//"same"
		public Keyword getSameKeyword_3() { return cSameKeyword_3; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//"not"
		public Keyword getNotKeyword_5() { return cNotKeyword_5; }

		//class2=ResourceIdentifier
		public Assignment getClass2Assignment_6() { return cClass2Assignment_6; }

		//ResourceIdentifier
		public RuleCall getClass2ResourceIdentifierParserRuleCall_6_0() { return cClass2ResourceIdentifierParserRuleCall_6_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_7() { return cEOSTerminalRuleCall_7; }
	}

	public class AllValuesFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllValuesFrom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRestrictedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRestrictedPropertyOfClassParserRuleCall_0_0_0 = (RuleCall)cRestrictedAssignment_0_0.eContents().get(0);
		private final Assignment cCondAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCondAllValuesConditionParserRuleCall_0_1_0 = (RuleCall)cCondAssignment_0_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cClassNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassNameResourceIdentifierParserRuleCall_1_0_0 = (RuleCall)cClassNameAssignment_1_0.eContents().get(0);
		private final Assignment cPropertyNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_1_1_0 = (RuleCall)cPropertyNameAssignment_1_1.eContents().get(0);
		private final Assignment cCondAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCondAllValuesConditionParserRuleCall_1_2_0 = (RuleCall)cCondAssignment_1_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//// These class restrictions have a similar structure, one of two forms:
		////	1) <p> of <C> <cond>, e.g., spouse of Man only has values of type Woman
		////	2) <C> <p> <cond>, e.g, Person spouse has at most 1 value
		//AllValuesFrom:
		//	restricted=PropertyOfClass cond=AllValuesCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//	cond=AllValuesCondition EOS;
		public ParserRule getRule() { return rule; }

		//restricted=PropertyOfClass cond=AllValuesCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//cond=AllValuesCondition EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//restricted=PropertyOfClass cond=AllValuesCondition EOS
		public Group getGroup_0() { return cGroup_0; }

		//restricted=PropertyOfClass
		public Assignment getRestrictedAssignment_0_0() { return cRestrictedAssignment_0_0; }

		//PropertyOfClass
		public RuleCall getRestrictedPropertyOfClassParserRuleCall_0_0_0() { return cRestrictedPropertyOfClassParserRuleCall_0_0_0; }

		//cond=AllValuesCondition
		public Assignment getCondAssignment_0_1() { return cCondAssignment_0_1; }

		//AllValuesCondition
		public RuleCall getCondAllValuesConditionParserRuleCall_0_1_0() { return cCondAllValuesConditionParserRuleCall_0_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_2() { return cEOSTerminalRuleCall_0_2; }

		//className=ResourceIdentifier propertyName=ResourceByName cond=AllValuesCondition EOS
		public Group getGroup_1() { return cGroup_1; }

		//className=ResourceIdentifier
		public Assignment getClassNameAssignment_1_0() { return cClassNameAssignment_1_0; }

		//ResourceIdentifier
		public RuleCall getClassNameResourceIdentifierParserRuleCall_1_0_0() { return cClassNameResourceIdentifierParserRuleCall_1_0_0; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_1_1() { return cPropertyNameAssignment_1_1; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_1_1_0() { return cPropertyNameResourceByNameParserRuleCall_1_1_0; }

		//cond=AllValuesCondition
		public Assignment getCondAssignment_1_2() { return cCondAssignment_1_2; }

		//AllValuesCondition
		public RuleCall getCondAllValuesConditionParserRuleCall_1_2_0() { return cCondAllValuesConditionParserRuleCall_1_2_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_3() { return cEOSTerminalRuleCall_1_3; }
	}

	public class SomeValuesFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SomeValuesFrom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRestrictedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRestrictedPropertyOfClassParserRuleCall_0_0_0 = (RuleCall)cRestrictedAssignment_0_0.eContents().get(0);
		private final Assignment cCondAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCondSomeValuesConditionParserRuleCall_0_1_0 = (RuleCall)cCondAssignment_0_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cClassNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassNameResourceIdentifierParserRuleCall_1_0_0 = (RuleCall)cClassNameAssignment_1_0.eContents().get(0);
		private final Assignment cPropertyNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_1_1_0 = (RuleCall)cPropertyNameAssignment_1_1.eContents().get(0);
		private final Assignment cCondAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCondSomeValuesConditionParserRuleCall_1_2_0 = (RuleCall)cCondAssignment_1_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//SomeValuesFrom:
		//	restricted=PropertyOfClass cond=SomeValuesCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//	cond=SomeValuesCondition EOS;
		public ParserRule getRule() { return rule; }

		//restricted=PropertyOfClass cond=SomeValuesCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//cond=SomeValuesCondition EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//restricted=PropertyOfClass cond=SomeValuesCondition EOS
		public Group getGroup_0() { return cGroup_0; }

		//restricted=PropertyOfClass
		public Assignment getRestrictedAssignment_0_0() { return cRestrictedAssignment_0_0; }

		//PropertyOfClass
		public RuleCall getRestrictedPropertyOfClassParserRuleCall_0_0_0() { return cRestrictedPropertyOfClassParserRuleCall_0_0_0; }

		//cond=SomeValuesCondition
		public Assignment getCondAssignment_0_1() { return cCondAssignment_0_1; }

		//SomeValuesCondition
		public RuleCall getCondSomeValuesConditionParserRuleCall_0_1_0() { return cCondSomeValuesConditionParserRuleCall_0_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_2() { return cEOSTerminalRuleCall_0_2; }

		//className=ResourceIdentifier propertyName=ResourceByName cond=SomeValuesCondition EOS
		public Group getGroup_1() { return cGroup_1; }

		//className=ResourceIdentifier
		public Assignment getClassNameAssignment_1_0() { return cClassNameAssignment_1_0; }

		//ResourceIdentifier
		public RuleCall getClassNameResourceIdentifierParserRuleCall_1_0_0() { return cClassNameResourceIdentifierParserRuleCall_1_0_0; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_1_1() { return cPropertyNameAssignment_1_1; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_1_1_0() { return cPropertyNameResourceByNameParserRuleCall_1_1_0; }

		//cond=SomeValuesCondition
		public Assignment getCondAssignment_1_2() { return cCondAssignment_1_2; }

		//SomeValuesCondition
		public RuleCall getCondSomeValuesConditionParserRuleCall_1_2_0() { return cCondSomeValuesConditionParserRuleCall_1_2_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_3() { return cEOSTerminalRuleCall_1_3; }
	}

	public class HasValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HasValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRestrictedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRestrictedPropertyOfClassParserRuleCall_0_0_0 = (RuleCall)cRestrictedAssignment_0_0.eContents().get(0);
		private final Assignment cCondAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCondHasValueConditionParserRuleCall_0_1_0 = (RuleCall)cCondAssignment_0_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cClassNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassNameResourceIdentifierParserRuleCall_1_0_0 = (RuleCall)cClassNameAssignment_1_0.eContents().get(0);
		private final Assignment cPropertyNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_1_1_0 = (RuleCall)cPropertyNameAssignment_1_1.eContents().get(0);
		private final Assignment cCondAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCondHasValueConditionParserRuleCall_1_2_0 = (RuleCall)cCondAssignment_1_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//HasValue:
		//	restricted=PropertyOfClass cond=HasValueCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//	cond=HasValueCondition EOS;
		public ParserRule getRule() { return rule; }

		//restricted=PropertyOfClass cond=HasValueCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//cond=HasValueCondition EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//restricted=PropertyOfClass cond=HasValueCondition EOS
		public Group getGroup_0() { return cGroup_0; }

		//restricted=PropertyOfClass
		public Assignment getRestrictedAssignment_0_0() { return cRestrictedAssignment_0_0; }

		//PropertyOfClass
		public RuleCall getRestrictedPropertyOfClassParserRuleCall_0_0_0() { return cRestrictedPropertyOfClassParserRuleCall_0_0_0; }

		//cond=HasValueCondition
		public Assignment getCondAssignment_0_1() { return cCondAssignment_0_1; }

		//HasValueCondition
		public RuleCall getCondHasValueConditionParserRuleCall_0_1_0() { return cCondHasValueConditionParserRuleCall_0_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_2() { return cEOSTerminalRuleCall_0_2; }

		//className=ResourceIdentifier propertyName=ResourceByName cond=HasValueCondition EOS
		public Group getGroup_1() { return cGroup_1; }

		//className=ResourceIdentifier
		public Assignment getClassNameAssignment_1_0() { return cClassNameAssignment_1_0; }

		//ResourceIdentifier
		public RuleCall getClassNameResourceIdentifierParserRuleCall_1_0_0() { return cClassNameResourceIdentifierParserRuleCall_1_0_0; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_1_1() { return cPropertyNameAssignment_1_1; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_1_1_0() { return cPropertyNameResourceByNameParserRuleCall_1_1_0; }

		//cond=HasValueCondition
		public Assignment getCondAssignment_1_2() { return cCondAssignment_1_2; }

		//HasValueCondition
		public RuleCall getCondHasValueConditionParserRuleCall_1_2_0() { return cCondHasValueConditionParserRuleCall_1_2_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_3() { return cEOSTerminalRuleCall_1_3; }
	}

	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRestrictedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRestrictedPropertyOfClassParserRuleCall_0_0_0 = (RuleCall)cRestrictedAssignment_0_0.eContents().get(0);
		private final Assignment cCondAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCondCardConditionParserRuleCall_0_1_0 = (RuleCall)cCondAssignment_0_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cClassNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassNameResourceIdentifierParserRuleCall_1_0_0 = (RuleCall)cClassNameAssignment_1_0.eContents().get(0);
		private final Assignment cPropertyNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_1_1_0 = (RuleCall)cPropertyNameAssignment_1_1.eContents().get(0);
		private final Assignment cCondAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCondCardConditionParserRuleCall_1_2_0 = (RuleCall)cCondAssignment_1_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//Cardinality:
		//	restricted=PropertyOfClass cond=CardCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//	cond=CardCondition EOS;
		public ParserRule getRule() { return rule; }

		//restricted=PropertyOfClass cond=CardCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//cond=CardCondition EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//restricted=PropertyOfClass cond=CardCondition EOS
		public Group getGroup_0() { return cGroup_0; }

		//restricted=PropertyOfClass
		public Assignment getRestrictedAssignment_0_0() { return cRestrictedAssignment_0_0; }

		//PropertyOfClass
		public RuleCall getRestrictedPropertyOfClassParserRuleCall_0_0_0() { return cRestrictedPropertyOfClassParserRuleCall_0_0_0; }

		//cond=CardCondition
		public Assignment getCondAssignment_0_1() { return cCondAssignment_0_1; }

		//CardCondition
		public RuleCall getCondCardConditionParserRuleCall_0_1_0() { return cCondCardConditionParserRuleCall_0_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_2() { return cEOSTerminalRuleCall_0_2; }

		//className=ResourceIdentifier propertyName=ResourceByName cond=CardCondition EOS
		public Group getGroup_1() { return cGroup_1; }

		//className=ResourceIdentifier
		public Assignment getClassNameAssignment_1_0() { return cClassNameAssignment_1_0; }

		//ResourceIdentifier
		public RuleCall getClassNameResourceIdentifierParserRuleCall_1_0_0() { return cClassNameResourceIdentifierParserRuleCall_1_0_0; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_1_1() { return cPropertyNameAssignment_1_1; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_1_1_0() { return cPropertyNameResourceByNameParserRuleCall_1_1_0; }

		//cond=CardCondition
		public Assignment getCondAssignment_1_2() { return cCondAssignment_1_2; }

		//CardCondition
		public RuleCall getCondCardConditionParserRuleCall_1_2_0() { return cCondCardConditionParserRuleCall_1_2_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_3() { return cEOSTerminalRuleCall_1_3; }
	}

	public class MinCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinCardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRestrictedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRestrictedPropertyOfClassParserRuleCall_0_0_0 = (RuleCall)cRestrictedAssignment_0_0.eContents().get(0);
		private final Assignment cCondAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCondMinCardConditionParserRuleCall_0_1_0 = (RuleCall)cCondAssignment_0_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cClassNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassNameResourceIdentifierParserRuleCall_1_0_0 = (RuleCall)cClassNameAssignment_1_0.eContents().get(0);
		private final Assignment cPropertyNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_1_1_0 = (RuleCall)cPropertyNameAssignment_1_1.eContents().get(0);
		private final Assignment cCondAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCondMinCardConditionParserRuleCall_1_2_0 = (RuleCall)cCondAssignment_1_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//MinCardinality:
		//	restricted=PropertyOfClass cond=MinCardCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//	cond=MinCardCondition EOS;
		public ParserRule getRule() { return rule; }

		//restricted=PropertyOfClass cond=MinCardCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//cond=MinCardCondition EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//restricted=PropertyOfClass cond=MinCardCondition EOS
		public Group getGroup_0() { return cGroup_0; }

		//restricted=PropertyOfClass
		public Assignment getRestrictedAssignment_0_0() { return cRestrictedAssignment_0_0; }

		//PropertyOfClass
		public RuleCall getRestrictedPropertyOfClassParserRuleCall_0_0_0() { return cRestrictedPropertyOfClassParserRuleCall_0_0_0; }

		//cond=MinCardCondition
		public Assignment getCondAssignment_0_1() { return cCondAssignment_0_1; }

		//MinCardCondition
		public RuleCall getCondMinCardConditionParserRuleCall_0_1_0() { return cCondMinCardConditionParserRuleCall_0_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_2() { return cEOSTerminalRuleCall_0_2; }

		//className=ResourceIdentifier propertyName=ResourceByName cond=MinCardCondition EOS
		public Group getGroup_1() { return cGroup_1; }

		//className=ResourceIdentifier
		public Assignment getClassNameAssignment_1_0() { return cClassNameAssignment_1_0; }

		//ResourceIdentifier
		public RuleCall getClassNameResourceIdentifierParserRuleCall_1_0_0() { return cClassNameResourceIdentifierParserRuleCall_1_0_0; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_1_1() { return cPropertyNameAssignment_1_1; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_1_1_0() { return cPropertyNameResourceByNameParserRuleCall_1_1_0; }

		//cond=MinCardCondition
		public Assignment getCondAssignment_1_2() { return cCondAssignment_1_2; }

		//MinCardCondition
		public RuleCall getCondMinCardConditionParserRuleCall_1_2_0() { return cCondMinCardConditionParserRuleCall_1_2_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_3() { return cEOSTerminalRuleCall_1_3; }
	}

	public class MaxCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxCardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRestrictedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRestrictedPropertyOfClassParserRuleCall_0_0_0 = (RuleCall)cRestrictedAssignment_0_0.eContents().get(0);
		private final Assignment cCondAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCondMaxCardConditionParserRuleCall_0_1_0 = (RuleCall)cCondAssignment_0_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cClassNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassNameResourceIdentifierParserRuleCall_1_0_0 = (RuleCall)cClassNameAssignment_1_0.eContents().get(0);
		private final Assignment cPropertyNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_1_1_0 = (RuleCall)cPropertyNameAssignment_1_1.eContents().get(0);
		private final Assignment cCondAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCondMaxCardConditionParserRuleCall_1_2_0 = (RuleCall)cCondAssignment_1_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//MaxCardinality:
		//	restricted=PropertyOfClass cond=MaxCardCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//	cond=MaxCardCondition EOS;
		public ParserRule getRule() { return rule; }

		//restricted=PropertyOfClass cond=MaxCardCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
		//cond=MaxCardCondition EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//restricted=PropertyOfClass cond=MaxCardCondition EOS
		public Group getGroup_0() { return cGroup_0; }

		//restricted=PropertyOfClass
		public Assignment getRestrictedAssignment_0_0() { return cRestrictedAssignment_0_0; }

		//PropertyOfClass
		public RuleCall getRestrictedPropertyOfClassParserRuleCall_0_0_0() { return cRestrictedPropertyOfClassParserRuleCall_0_0_0; }

		//cond=MaxCardCondition
		public Assignment getCondAssignment_0_1() { return cCondAssignment_0_1; }

		//MaxCardCondition
		public RuleCall getCondMaxCardConditionParserRuleCall_0_1_0() { return cCondMaxCardConditionParserRuleCall_0_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_2() { return cEOSTerminalRuleCall_0_2; }

		//className=ResourceIdentifier propertyName=ResourceByName cond=MaxCardCondition EOS
		public Group getGroup_1() { return cGroup_1; }

		//className=ResourceIdentifier
		public Assignment getClassNameAssignment_1_0() { return cClassNameAssignment_1_0; }

		//ResourceIdentifier
		public RuleCall getClassNameResourceIdentifierParserRuleCall_1_0_0() { return cClassNameResourceIdentifierParserRuleCall_1_0_0; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_1_1() { return cPropertyNameAssignment_1_1; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_1_1_0() { return cPropertyNameResourceByNameParserRuleCall_1_1_0; }

		//cond=MaxCardCondition
		public Assignment getCondAssignment_1_2() { return cCondAssignment_1_2; }

		//MaxCardCondition
		public RuleCall getCondMaxCardConditionParserRuleCall_1_2_0() { return cCondMaxCardConditionParserRuleCall_1_2_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_3() { return cEOSTerminalRuleCall_1_3; }
	}

	public class PropertyOfClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyOfClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_0_0 = (RuleCall)cPropertyNameAssignment_0.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameResourceIdentifierParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//// These are supporting rules for the above class restrictions
		//PropertyOfClass:
		//	propertyName=ResourceByName "of" className=ResourceIdentifier;
		public ParserRule getRule() { return rule; }

		//propertyName=ResourceByName "of" className=ResourceIdentifier
		public Group getGroup() { return cGroup; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_0_0() { return cPropertyNameResourceByNameParserRuleCall_0_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//className=ResourceIdentifier
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ResourceIdentifier
		public RuleCall getClassNameResourceIdentifierParserRuleCall_2_0() { return cClassNameResourceIdentifierParserRuleCall_2_0; }
	}

	public class AllValuesConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllValuesCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnlyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValuesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRestrictionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRestrictionResourceIdentifierParserRuleCall_5_0 = (RuleCall)cRestrictionAssignment_5.eContents().get(0);
		
		//AllValuesCondition:
		//	"only" "has" "values" "of" "type" restriction=ResourceIdentifier;
		public ParserRule getRule() { return rule; }

		//"only" "has" "values" "of" "type" restriction=ResourceIdentifier
		public Group getGroup() { return cGroup; }

		//"only"
		public Keyword getOnlyKeyword_0() { return cOnlyKeyword_0; }

		//"has"
		public Keyword getHasKeyword_1() { return cHasKeyword_1; }

		//"values"
		public Keyword getValuesKeyword_2() { return cValuesKeyword_2; }

		//"of"
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }

		//"type"
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }

		//restriction=ResourceIdentifier
		public Assignment getRestrictionAssignment_5() { return cRestrictionAssignment_5; }

		//ResourceIdentifier
		public RuleCall getRestrictionResourceIdentifierParserRuleCall_5_0() { return cRestrictionResourceIdentifierParserRuleCall_5_0; }
	}

	public class EnumeratedAllValuesFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumeratedAllValuesFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRestrictedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRestrictedPropertyOfClassParserRuleCall_0_0 = (RuleCall)cRestrictedAssignment_0.eContents().get(0);
		private final Keyword cCanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOnlyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOneKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cOfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cEnumerationAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cEnumerationExistingResourceListParserRuleCall_6_0_0 = (RuleCall)cEnumerationAssignment_6_0.eContents().get(0);
		private final Assignment cEnumerationAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cEnumerationLiteralListParserRuleCall_6_1_0 = (RuleCall)cEnumerationAssignment_6_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//EnumeratedAllValuesFrom:
		//	restricted=PropertyOfClass "can" "only" "be" "one" "of" (enumeration=ExistingResourceList | enumeration=LiteralList)
		//	EOS;
		public ParserRule getRule() { return rule; }

		//restricted=PropertyOfClass "can" "only" "be" "one" "of" (enumeration=ExistingResourceList | enumeration=LiteralList) EOS
		public Group getGroup() { return cGroup; }

		//restricted=PropertyOfClass
		public Assignment getRestrictedAssignment_0() { return cRestrictedAssignment_0; }

		//PropertyOfClass
		public RuleCall getRestrictedPropertyOfClassParserRuleCall_0_0() { return cRestrictedPropertyOfClassParserRuleCall_0_0; }

		//"can"
		public Keyword getCanKeyword_1() { return cCanKeyword_1; }

		//"only"
		public Keyword getOnlyKeyword_2() { return cOnlyKeyword_2; }

		//"be"
		public Keyword getBeKeyword_3() { return cBeKeyword_3; }

		//"one"
		public Keyword getOneKeyword_4() { return cOneKeyword_4; }

		//"of"
		public Keyword getOfKeyword_5() { return cOfKeyword_5; }

		//enumeration=ExistingResourceList | enumeration=LiteralList
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//enumeration=ExistingResourceList
		public Assignment getEnumerationAssignment_6_0() { return cEnumerationAssignment_6_0; }

		//ExistingResourceList
		public RuleCall getEnumerationExistingResourceListParserRuleCall_6_0_0() { return cEnumerationExistingResourceListParserRuleCall_6_0_0; }

		//enumeration=LiteralList
		public Assignment getEnumerationAssignment_6_1() { return cEnumerationAssignment_6_1; }

		//LiteralList
		public RuleCall getEnumerationLiteralListParserRuleCall_6_1_0() { return cEnumerationLiteralListParserRuleCall_6_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_7() { return cEOSTerminalRuleCall_7; }
	}

	public class EnumeratedAllAndSomeValuesFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumeratedAllAndSomeValuesFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRestrictedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRestrictedPropertyOfClassParserRuleCall_0_0 = (RuleCall)cRestrictedAssignment_0.eContents().get(0);
		private final Keyword cMustKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOneKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cEnumerationAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cEnumerationExistingResourceListParserRuleCall_5_0_0 = (RuleCall)cEnumerationAssignment_5_0.eContents().get(0);
		private final Assignment cEnumerationAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cEnumerationLiteralListParserRuleCall_5_1_0 = (RuleCall)cEnumerationAssignment_5_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//EnumeratedAllAndSomeValuesFrom:
		//	restricted=PropertyOfClass "must" "be" "one" "of" (enumeration=ExistingResourceList | enumeration=LiteralList) EOS;
		public ParserRule getRule() { return rule; }

		//restricted=PropertyOfClass "must" "be" "one" "of" (enumeration=ExistingResourceList | enumeration=LiteralList) EOS
		public Group getGroup() { return cGroup; }

		//restricted=PropertyOfClass
		public Assignment getRestrictedAssignment_0() { return cRestrictedAssignment_0; }

		//PropertyOfClass
		public RuleCall getRestrictedPropertyOfClassParserRuleCall_0_0() { return cRestrictedPropertyOfClassParserRuleCall_0_0; }

		//"must"
		public Keyword getMustKeyword_1() { return cMustKeyword_1; }

		//"be"
		public Keyword getBeKeyword_2() { return cBeKeyword_2; }

		//"one"
		public Keyword getOneKeyword_3() { return cOneKeyword_3; }

		//"of"
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }

		//enumeration=ExistingResourceList | enumeration=LiteralList
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//enumeration=ExistingResourceList
		public Assignment getEnumerationAssignment_5_0() { return cEnumerationAssignment_5_0; }

		//ExistingResourceList
		public RuleCall getEnumerationExistingResourceListParserRuleCall_5_0_0() { return cEnumerationExistingResourceListParserRuleCall_5_0_0; }

		//enumeration=LiteralList
		public Assignment getEnumerationAssignment_5_1() { return cEnumerationAssignment_5_1; }

		//LiteralList
		public RuleCall getEnumerationLiteralListParserRuleCall_5_1_0() { return cEnumerationLiteralListParserRuleCall_5_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_6() { return cEOSTerminalRuleCall_6; }
	}

	public class DefaultValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefValueClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefValueClassPropertyOfClassParserRuleCall_0_0 = (RuleCall)cDefValueClassAssignment_0.eContents().get(0);
		private final Keyword cHasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLevelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLevelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLevelNUMBERParserRuleCall_2_1_0 = (RuleCall)cLevelAssignment_2_1.eContents().get(0);
		private final Keyword cDefaultKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefValueExplicitValueParserRuleCall_4_0 = (RuleCall)cDefValueAssignment_4.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DefaultValue:
		//	defValueClass=PropertyOfClass "has" ("level" level=NUMBER)? "default" defValue=ExplicitValue EOS;
		public ParserRule getRule() { return rule; }

		//defValueClass=PropertyOfClass "has" ("level" level=NUMBER)? "default" defValue=ExplicitValue EOS
		public Group getGroup() { return cGroup; }

		//defValueClass=PropertyOfClass
		public Assignment getDefValueClassAssignment_0() { return cDefValueClassAssignment_0; }

		//PropertyOfClass
		public RuleCall getDefValueClassPropertyOfClassParserRuleCall_0_0() { return cDefValueClassPropertyOfClassParserRuleCall_0_0; }

		//"has"
		public Keyword getHasKeyword_1() { return cHasKeyword_1; }

		//("level" level=NUMBER)?
		public Group getGroup_2() { return cGroup_2; }

		//"level"
		public Keyword getLevelKeyword_2_0() { return cLevelKeyword_2_0; }

		//level=NUMBER
		public Assignment getLevelAssignment_2_1() { return cLevelAssignment_2_1; }

		//NUMBER
		public RuleCall getLevelNUMBERParserRuleCall_2_1_0() { return cLevelNUMBERParserRuleCall_2_1_0; }

		//"default"
		public Keyword getDefaultKeyword_3() { return cDefaultKeyword_3; }

		//defValue=ExplicitValue
		public Assignment getDefValueAssignment_4() { return cDefValueAssignment_4; }

		//ExplicitValue
		public RuleCall getDefValueExplicitValueParserRuleCall_4_0() { return cDefValueExplicitValueParserRuleCall_4_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_5() { return cEOSTerminalRuleCall_5; }
	}

	public class SomeValuesConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SomeValuesCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHasKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWithKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeastKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOneKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cOfKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cTypeKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cRestrictionAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cRestrictionResourceIdentifierParserRuleCall_5_0_2_0 = (RuleCall)cRestrictionAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cEachKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cOfKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cTypesKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Assignment cRestrictionAssignment_5_1_3 = (Assignment)cGroup_5_1.eContents().get(3);
		private final RuleCall cRestrictionExistingResourceListParserRuleCall_5_1_3_0 = (RuleCall)cRestrictionAssignment_5_1_3.eContents().get(0);
		
		//SomeValuesCondition:
		//	("has" | "with") "at" "least" "one" "value" ("of" "type" restriction=ResourceIdentifier | "each" "of" "types"
		//	restriction=ExistingResourceList);
		public ParserRule getRule() { return rule; }

		//("has" | "with") "at" "least" "one" "value" ("of" "type" restriction=ResourceIdentifier | "each" "of" "types"
		//restriction=ExistingResourceList)
		public Group getGroup() { return cGroup; }

		//"has" | "with"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"has"
		public Keyword getHasKeyword_0_0() { return cHasKeyword_0_0; }

		//"with"
		public Keyword getWithKeyword_0_1() { return cWithKeyword_0_1; }

		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }

		//"least"
		public Keyword getLeastKeyword_2() { return cLeastKeyword_2; }

		//"one"
		public Keyword getOneKeyword_3() { return cOneKeyword_3; }

		//"value"
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }

		//"of" "type" restriction=ResourceIdentifier | "each" "of" "types" restriction=ExistingResourceList
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"of" "type" restriction=ResourceIdentifier
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"of"
		public Keyword getOfKeyword_5_0_0() { return cOfKeyword_5_0_0; }

		//"type"
		public Keyword getTypeKeyword_5_0_1() { return cTypeKeyword_5_0_1; }

		//restriction=ResourceIdentifier
		public Assignment getRestrictionAssignment_5_0_2() { return cRestrictionAssignment_5_0_2; }

		//ResourceIdentifier
		public RuleCall getRestrictionResourceIdentifierParserRuleCall_5_0_2_0() { return cRestrictionResourceIdentifierParserRuleCall_5_0_2_0; }

		//"each" "of" "types" restriction=ExistingResourceList
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"each"
		public Keyword getEachKeyword_5_1_0() { return cEachKeyword_5_1_0; }

		//"of"
		public Keyword getOfKeyword_5_1_1() { return cOfKeyword_5_1_1; }

		//"types"
		public Keyword getTypesKeyword_5_1_2() { return cTypesKeyword_5_1_2; }

		//restriction=ExistingResourceList
		public Assignment getRestrictionAssignment_5_1_3() { return cRestrictionAssignment_5_1_3; }

		//ExistingResourceList
		public RuleCall getRestrictionExistingResourceListParserRuleCall_5_1_3_0() { return cRestrictionExistingResourceListParserRuleCall_5_1_3_0; }
	}

	public class HasValueConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HasValueCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlwaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHasKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cWithKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRestrictionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRestrictionExplicitValueParserRuleCall_3_0 = (RuleCall)cRestrictionAssignment_3.eContents().get(0);
		
		//HasValueCondition:
		//	"always" ("has" | "with") "value" restriction=ExplicitValue;
		public ParserRule getRule() { return rule; }

		//"always" ("has" | "with") "value" restriction=ExplicitValue
		public Group getGroup() { return cGroup; }

		//"always"
		public Keyword getAlwaysKeyword_0() { return cAlwaysKeyword_0; }

		//"has" | "with"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"has"
		public Keyword getHasKeyword_1_0() { return cHasKeyword_1_0; }

		//"with"
		public Keyword getWithKeyword_1_1() { return cWithKeyword_1_1; }

		//"value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//restriction=ExplicitValue
		public Assignment getRestrictionAssignment_3() { return cRestrictionAssignment_3; }

		//ExplicitValue
		public RuleCall getRestrictionExplicitValueParserRuleCall_3_0() { return cRestrictionExplicitValueParserRuleCall_3_0; }
	}

	public class MinCardConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinCardCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHasKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWithKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeastKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardNUMBERParserRuleCall_3_0 = (RuleCall)cCardAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cValuesKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOfKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cTypeKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cClassQualifierAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cClassQualifierResourceIdentifierParserRuleCall_5_2_0 = (RuleCall)cClassQualifierAssignment_5_2.eContents().get(0);
		
		//MinCardCondition:
		//	("has" | "with") "at" "least" card=NUMBER ("value" | "values") ("of" "type" classQualifier=ResourceIdentifier)?;
		public ParserRule getRule() { return rule; }

		//("has" | "with") "at" "least" card=NUMBER ("value" | "values") ("of" "type" classQualifier=ResourceIdentifier)?
		public Group getGroup() { return cGroup; }

		//"has" | "with"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"has"
		public Keyword getHasKeyword_0_0() { return cHasKeyword_0_0; }

		//"with"
		public Keyword getWithKeyword_0_1() { return cWithKeyword_0_1; }

		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }

		//"least"
		public Keyword getLeastKeyword_2() { return cLeastKeyword_2; }

		//card=NUMBER
		public Assignment getCardAssignment_3() { return cCardAssignment_3; }

		//NUMBER
		public RuleCall getCardNUMBERParserRuleCall_3_0() { return cCardNUMBERParserRuleCall_3_0; }

		//"value" | "values"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"value"
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }

		//"values"
		public Keyword getValuesKeyword_4_1() { return cValuesKeyword_4_1; }

		//("of" "type" classQualifier=ResourceIdentifier)?
		public Group getGroup_5() { return cGroup_5; }

		//"of"
		public Keyword getOfKeyword_5_0() { return cOfKeyword_5_0; }

		//"type"
		public Keyword getTypeKeyword_5_1() { return cTypeKeyword_5_1; }

		//classQualifier=ResourceIdentifier
		public Assignment getClassQualifierAssignment_5_2() { return cClassQualifierAssignment_5_2; }

		//ResourceIdentifier
		public RuleCall getClassQualifierResourceIdentifierParserRuleCall_5_2_0() { return cClassQualifierResourceIdentifierParserRuleCall_5_2_0; }
	}

	public class MaxCardConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxCardCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHasKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWithKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMostKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardNUMBERParserRuleCall_3_0 = (RuleCall)cCardAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cValuesKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOfKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cTypeKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cClassQualifierAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cClassQualifierResourceIdentifierParserRuleCall_5_2_0 = (RuleCall)cClassQualifierAssignment_5_2.eContents().get(0);
		
		//MaxCardCondition:
		//	("has" | "with") "at" "most" card=NUMBER ("value" | "values") ("of" "type" classQualifier=ResourceIdentifier)?;
		public ParserRule getRule() { return rule; }

		//("has" | "with") "at" "most" card=NUMBER ("value" | "values") ("of" "type" classQualifier=ResourceIdentifier)?
		public Group getGroup() { return cGroup; }

		//"has" | "with"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"has"
		public Keyword getHasKeyword_0_0() { return cHasKeyword_0_0; }

		//"with"
		public Keyword getWithKeyword_0_1() { return cWithKeyword_0_1; }

		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }

		//"most"
		public Keyword getMostKeyword_2() { return cMostKeyword_2; }

		//card=NUMBER
		public Assignment getCardAssignment_3() { return cCardAssignment_3; }

		//NUMBER
		public RuleCall getCardNUMBERParserRuleCall_3_0() { return cCardNUMBERParserRuleCall_3_0; }

		//"value" | "values"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"value"
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }

		//"values"
		public Keyword getValuesKeyword_4_1() { return cValuesKeyword_4_1; }

		//("of" "type" classQualifier=ResourceIdentifier)?
		public Group getGroup_5() { return cGroup_5; }

		//"of"
		public Keyword getOfKeyword_5_0() { return cOfKeyword_5_0; }

		//"type"
		public Keyword getTypeKeyword_5_1() { return cTypeKeyword_5_1; }

		//classQualifier=ResourceIdentifier
		public Assignment getClassQualifierAssignment_5_2() { return cClassQualifierAssignment_5_2; }

		//ResourceIdentifier
		public RuleCall getClassQualifierResourceIdentifierParserRuleCall_5_2_0() { return cClassQualifierResourceIdentifierParserRuleCall_5_2_0; }
	}

	public class CardConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CardCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHasKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWithKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cExactlyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardNUMBERParserRuleCall_2_0 = (RuleCall)cCardAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cValuesKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cTypeKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cClassQualifierAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cClassQualifierResourceIdentifierParserRuleCall_4_2_0 = (RuleCall)cClassQualifierAssignment_4_2.eContents().get(0);
		
		//CardCondition:
		//	("has" | "with") "exactly" card=NUMBER ("value" | "values") ("of" "type" classQualifier=ResourceIdentifier)?;
		public ParserRule getRule() { return rule; }

		//("has" | "with") "exactly" card=NUMBER ("value" | "values") ("of" "type" classQualifier=ResourceIdentifier)?
		public Group getGroup() { return cGroup; }

		//"has" | "with"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"has"
		public Keyword getHasKeyword_0_0() { return cHasKeyword_0_0; }

		//"with"
		public Keyword getWithKeyword_0_1() { return cWithKeyword_0_1; }

		//"exactly"
		public Keyword getExactlyKeyword_1() { return cExactlyKeyword_1; }

		//card=NUMBER
		public Assignment getCardAssignment_2() { return cCardAssignment_2; }

		//NUMBER
		public RuleCall getCardNUMBERParserRuleCall_2_0() { return cCardNUMBERParserRuleCall_2_0; }

		//"value" | "values"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"value"
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }

		//"values"
		public Keyword getValuesKeyword_3_1() { return cValuesKeyword_3_1; }

		//("of" "type" classQualifier=ResourceIdentifier)?
		public Group getGroup_4() { return cGroup_4; }

		//"of"
		public Keyword getOfKeyword_4_0() { return cOfKeyword_4_0; }

		//"type"
		public Keyword getTypeKeyword_4_1() { return cTypeKeyword_4_1; }

		//classQualifier=ResourceIdentifier
		public Assignment getClassQualifierAssignment_4_2() { return cClassQualifierAssignment_4_2; }

		//ResourceIdentifier
		public RuleCall getClassQualifierResourceIdentifierParserRuleCall_4_2_0() { return cClassQualifierResourceIdentifierParserRuleCall_4_2_0; }
	}

	public class NecessaryAndSufficientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NecessaryAndSufficient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSuperClassTypedBNodeParserRuleCall_0_0 = (RuleCall)cSuperClassAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArticleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArticleIndefiniteArticleParserRuleCall_2_0 = (RuleCall)cArticleAssignment_2.eContents().get(0);
		private final Assignment cSubClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubClassResourceNameParserRuleCall_3_0 = (RuleCall)cSubClassAssignment_3.eContents().get(0);
		private final Keyword cOnlyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPropertyNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_6_0 = (RuleCall)cPropertyNameAssignment_6.eContents().get(0);
		private final Assignment cCondAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCondConditionParserRuleCall_7_0 = (RuleCall)cCondAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cAndKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cPropertyNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_8_1_0 = (RuleCall)cPropertyNameAssignment_8_1.eContents().get(0);
		private final Assignment cCondAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cCondConditionParserRuleCall_8_2_0 = (RuleCall)cCondAssignment_8_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//// Necessary and sufficient conditions (a sub class is equivalent to a restriction on a superclass).
		//NecessaryAndSufficient:
		//	superClass=TypedBNode "is" article=IndefiniteArticle subClass=ResourceName "only" "if" propertyName+=ResourceByName
		//	cond+=Condition ("and" propertyName+=ResourceByName cond+=Condition)* EOS;
		public ParserRule getRule() { return rule; }

		//superClass=TypedBNode "is" article=IndefiniteArticle subClass=ResourceName "only" "if" propertyName+=ResourceByName
		//cond+=Condition ("and" propertyName+=ResourceByName cond+=Condition)* EOS
		public Group getGroup() { return cGroup; }

		//superClass=TypedBNode
		public Assignment getSuperClassAssignment_0() { return cSuperClassAssignment_0; }

		//TypedBNode
		public RuleCall getSuperClassTypedBNodeParserRuleCall_0_0() { return cSuperClassTypedBNodeParserRuleCall_0_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//article=IndefiniteArticle
		public Assignment getArticleAssignment_2() { return cArticleAssignment_2; }

		//IndefiniteArticle
		public RuleCall getArticleIndefiniteArticleParserRuleCall_2_0() { return cArticleIndefiniteArticleParserRuleCall_2_0; }

		//subClass=ResourceName
		public Assignment getSubClassAssignment_3() { return cSubClassAssignment_3; }

		//ResourceName
		public RuleCall getSubClassResourceNameParserRuleCall_3_0() { return cSubClassResourceNameParserRuleCall_3_0; }

		//"only"
		public Keyword getOnlyKeyword_4() { return cOnlyKeyword_4; }

		//"if"
		public Keyword getIfKeyword_5() { return cIfKeyword_5; }

		//propertyName+=ResourceByName
		public Assignment getPropertyNameAssignment_6() { return cPropertyNameAssignment_6; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_6_0() { return cPropertyNameResourceByNameParserRuleCall_6_0; }

		//cond+=Condition
		public Assignment getCondAssignment_7() { return cCondAssignment_7; }

		//Condition
		public RuleCall getCondConditionParserRuleCall_7_0() { return cCondConditionParserRuleCall_7_0; }

		//("and" propertyName+=ResourceByName cond+=Condition)*
		public Group getGroup_8() { return cGroup_8; }

		//"and"
		public Keyword getAndKeyword_8_0() { return cAndKeyword_8_0; }

		//propertyName+=ResourceByName
		public Assignment getPropertyNameAssignment_8_1() { return cPropertyNameAssignment_8_1; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_8_1_0() { return cPropertyNameResourceByNameParserRuleCall_8_1_0; }

		//cond+=Condition
		public Assignment getCondAssignment_8_2() { return cCondAssignment_8_2; }

		//Condition
		public RuleCall getCondConditionParserRuleCall_8_2_0() { return cCondConditionParserRuleCall_8_2_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_9() { return cEOSTerminalRuleCall_9; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllValuesConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSomeValuesConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHasValueConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMinCardConditionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMaxCardConditionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCardConditionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Condition:
		//	AllValuesCondition | SomeValuesCondition | HasValueCondition | MinCardCondition | MaxCardCondition | CardCondition;
		public ParserRule getRule() { return rule; }

		//AllValuesCondition | SomeValuesCondition | HasValueCondition | MinCardCondition | MaxCardCondition | CardCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//AllValuesCondition
		public RuleCall getAllValuesConditionParserRuleCall_0() { return cAllValuesConditionParserRuleCall_0; }

		//SomeValuesCondition
		public RuleCall getSomeValuesConditionParserRuleCall_1() { return cSomeValuesConditionParserRuleCall_1; }

		//HasValueCondition
		public RuleCall getHasValueConditionParserRuleCall_2() { return cHasValueConditionParserRuleCall_2; }

		//MinCardCondition
		public RuleCall getMinCardConditionParserRuleCall_3() { return cMinCardConditionParserRuleCall_3; }

		//MaxCardCondition
		public RuleCall getMaxCardConditionParserRuleCall_4() { return cMaxCardConditionParserRuleCall_4; }

		//CardCondition
		public RuleCall getCardConditionParserRuleCall_5() { return cCardConditionParserRuleCall_5; }
	}

	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPropertyNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPropertyNameResourceNameParserRuleCall_0_0_0 = (RuleCall)cPropertyNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cIsKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cAKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cTypeKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Keyword cOfKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cSuperPropNameAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cSuperPropNameResourceByNameParserRuleCall_0_1_4_0 = (RuleCall)cSuperPropNameAssignment_0_1_4.eContents().get(0);
		private final Assignment cAddlPropInfoAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAddlPropInfoAdditionalPropertyInfoParserRuleCall_0_2_0 = (RuleCall)cAddlPropInfoAssignment_0_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cArticleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArticleAnArticleParserRuleCall_1_0_0 = (RuleCall)cArticleAssignment_1_0.eContents().get(0);
		private final Keyword cRelationshipKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cOfKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cDomainAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDomainResourceIdentifierParserRuleCall_1_3_0 = (RuleCall)cDomainAssignment_1_3.eContents().get(0);
		private final Keyword cToKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cRangeResourceAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cRangeResourceResourceIdentifierParserRuleCall_1_5_0 = (RuleCall)cRangeResourceAssignment_1_5.eContents().get(0);
		private final Keyword cIsKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cPropertyNameAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cPropertyNameResourceNameParserRuleCall_1_7_0 = (RuleCall)cPropertyNameAssignment_1_7.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_8 = (RuleCall)cGroup_1.eContents().get(8);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cAnnotationPropertyAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAnnotationPropertyResourceNameParserRuleCall_2_0_0 = (RuleCall)cAnnotationPropertyAssignment_2_0.eContents().get(0);
		private final Keyword cIsKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cAKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cTypeKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cOfKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cAnnotationKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final RuleCall cEOSTerminalRuleCall_2_6 = (RuleCall)cGroup_2.eContents().get(6);
		
		//// Properties may be declared in several ways too.
		//// e.g., age describes Person with a single value of type decimal.
		//// e.g., parent describes Person with values of type Person.
		//// e.g., child describes Person with values of type Person.
		//PropertyDeclaration:
		//	propertyName=ResourceName ("is" "a" "type" "of" superPropName=ResourceByName)? addlPropInfo+=AdditionalPropertyInfo+
		//	EOS | article=AnArticle? "relationship" "of" domain=ResourceIdentifier "to" rangeResource=ResourceIdentifier "is"
		//	propertyName=ResourceName EOS | annotationProperty=ResourceName "is" "a" "type" "of" "annotation" EOS;
		public ParserRule getRule() { return rule; }

		//propertyName=ResourceName ("is" "a" "type" "of" superPropName=ResourceByName)? addlPropInfo+=AdditionalPropertyInfo+ EOS
		//| article=AnArticle? "relationship" "of" domain=ResourceIdentifier "to" rangeResource=ResourceIdentifier "is"
		//propertyName=ResourceName EOS | annotationProperty=ResourceName "is" "a" "type" "of" "annotation" EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//propertyName=ResourceName ("is" "a" "type" "of" superPropName=ResourceByName)? addlPropInfo+=AdditionalPropertyInfo+ EOS
		public Group getGroup_0() { return cGroup_0; }

		//propertyName=ResourceName
		public Assignment getPropertyNameAssignment_0_0() { return cPropertyNameAssignment_0_0; }

		//ResourceName
		public RuleCall getPropertyNameResourceNameParserRuleCall_0_0_0() { return cPropertyNameResourceNameParserRuleCall_0_0_0; }

		//("is" "a" "type" "of" superPropName=ResourceByName)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"is"
		public Keyword getIsKeyword_0_1_0() { return cIsKeyword_0_1_0; }

		//"a"
		public Keyword getAKeyword_0_1_1() { return cAKeyword_0_1_1; }

		//"type"
		public Keyword getTypeKeyword_0_1_2() { return cTypeKeyword_0_1_2; }

		//"of"
		public Keyword getOfKeyword_0_1_3() { return cOfKeyword_0_1_3; }

		//superPropName=ResourceByName
		public Assignment getSuperPropNameAssignment_0_1_4() { return cSuperPropNameAssignment_0_1_4; }

		//ResourceByName
		public RuleCall getSuperPropNameResourceByNameParserRuleCall_0_1_4_0() { return cSuperPropNameResourceByNameParserRuleCall_0_1_4_0; }

		//addlPropInfo+=AdditionalPropertyInfo+
		public Assignment getAddlPropInfoAssignment_0_2() { return cAddlPropInfoAssignment_0_2; }

		//AdditionalPropertyInfo
		public RuleCall getAddlPropInfoAdditionalPropertyInfoParserRuleCall_0_2_0() { return cAddlPropInfoAdditionalPropertyInfoParserRuleCall_0_2_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_3() { return cEOSTerminalRuleCall_0_3; }

		//article=AnArticle? "relationship" "of" domain=ResourceIdentifier "to" rangeResource=ResourceIdentifier "is"
		//propertyName=ResourceName EOS
		public Group getGroup_1() { return cGroup_1; }

		//article=AnArticle?
		public Assignment getArticleAssignment_1_0() { return cArticleAssignment_1_0; }

		//AnArticle
		public RuleCall getArticleAnArticleParserRuleCall_1_0_0() { return cArticleAnArticleParserRuleCall_1_0_0; }

		//"relationship"
		public Keyword getRelationshipKeyword_1_1() { return cRelationshipKeyword_1_1; }

		//"of"
		public Keyword getOfKeyword_1_2() { return cOfKeyword_1_2; }

		//domain=ResourceIdentifier
		public Assignment getDomainAssignment_1_3() { return cDomainAssignment_1_3; }

		//ResourceIdentifier
		public RuleCall getDomainResourceIdentifierParserRuleCall_1_3_0() { return cDomainResourceIdentifierParserRuleCall_1_3_0; }

		//"to"
		public Keyword getToKeyword_1_4() { return cToKeyword_1_4; }

		//rangeResource=ResourceIdentifier
		public Assignment getRangeResourceAssignment_1_5() { return cRangeResourceAssignment_1_5; }

		//ResourceIdentifier
		public RuleCall getRangeResourceResourceIdentifierParserRuleCall_1_5_0() { return cRangeResourceResourceIdentifierParserRuleCall_1_5_0; }

		//"is"
		public Keyword getIsKeyword_1_6() { return cIsKeyword_1_6; }

		//propertyName=ResourceName
		public Assignment getPropertyNameAssignment_1_7() { return cPropertyNameAssignment_1_7; }

		//ResourceName
		public RuleCall getPropertyNameResourceNameParserRuleCall_1_7_0() { return cPropertyNameResourceNameParserRuleCall_1_7_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_8() { return cEOSTerminalRuleCall_1_8; }

		//annotationProperty=ResourceName "is" "a" "type" "of" "annotation" EOS
		public Group getGroup_2() { return cGroup_2; }

		//annotationProperty=ResourceName
		public Assignment getAnnotationPropertyAssignment_2_0() { return cAnnotationPropertyAssignment_2_0; }

		//ResourceName
		public RuleCall getAnnotationPropertyResourceNameParserRuleCall_2_0_0() { return cAnnotationPropertyResourceNameParserRuleCall_2_0_0; }

		//"is"
		public Keyword getIsKeyword_2_1() { return cIsKeyword_2_1; }

		//"a"
		public Keyword getAKeyword_2_2() { return cAKeyword_2_2; }

		//"type"
		public Keyword getTypeKeyword_2_3() { return cTypeKeyword_2_3; }

		//"of"
		public Keyword getOfKeyword_2_4() { return cOfKeyword_2_4; }

		//"annotation"
		public Keyword getAnnotationKeyword_2_5() { return cAnnotationKeyword_2_5; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2_6() { return cEOSTerminalRuleCall_2_6; }
	}

	public class AdditionalPropertyInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionalPropertyInfo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCommaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cDescribesKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDomainAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDomainResourceIdentifierParserRuleCall_0_2_0 = (RuleCall)cDomainAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCondConditionParserRuleCall_1_1_0 = (RuleCall)cCondAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRangeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_2_1_0 = (RuleCall)cRangeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIsfuncAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIsfuncIsFunctionalParserRuleCall_3_1_0 = (RuleCall)cIsfuncAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIsinvfuncAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIsinvfuncIsInverseFunctionalParserRuleCall_4_1_0 = (RuleCall)cIsinvfuncAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIsSymAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIsSymIsSymmetricalParserRuleCall_5_1_0 = (RuleCall)cIsSymAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIsTransAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIsTransIsTransitiveParserRuleCall_6_1_0 = (RuleCall)cIsTransAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cIsInvOfAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cIsInvOfIsInverseOfParserRuleCall_7_1_0 = (RuleCall)cIsInvOfAssignment_7_1.eContents().get(0);
		
		//AdditionalPropertyInfo:
		//	","? "describes" domain=ResourceIdentifier | ","? cond=Condition | ","? range=Range | ","? isfunc=IsFunctional | ","?
		//	isinvfunc=IsInverseFunctional | ","? isSym=IsSymmetrical | ","? isTrans=IsTransitive | ","? isInvOf=IsInverseOf;
		public ParserRule getRule() { return rule; }

		//","? "describes" domain=ResourceIdentifier | ","? cond=Condition | ","? range=Range | ","? isfunc=IsFunctional | ","?
		//isinvfunc=IsInverseFunctional | ","? isSym=IsSymmetrical | ","? isTrans=IsTransitive | ","? isInvOf=IsInverseOf
		public Alternatives getAlternatives() { return cAlternatives; }

		//","? "describes" domain=ResourceIdentifier
		public Group getGroup_0() { return cGroup_0; }

		//","?
		public Keyword getCommaKeyword_0_0() { return cCommaKeyword_0_0; }

		//"describes"
		public Keyword getDescribesKeyword_0_1() { return cDescribesKeyword_0_1; }

		//domain=ResourceIdentifier
		public Assignment getDomainAssignment_0_2() { return cDomainAssignment_0_2; }

		//ResourceIdentifier
		public RuleCall getDomainResourceIdentifierParserRuleCall_0_2_0() { return cDomainResourceIdentifierParserRuleCall_0_2_0; }

		//","? cond=Condition
		public Group getGroup_1() { return cGroup_1; }

		//","?
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//cond=Condition
		public Assignment getCondAssignment_1_1() { return cCondAssignment_1_1; }

		//Condition
		public RuleCall getCondConditionParserRuleCall_1_1_0() { return cCondConditionParserRuleCall_1_1_0; }

		//","? range=Range
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//range=Range
		public Assignment getRangeAssignment_2_1() { return cRangeAssignment_2_1; }

		//Range
		public RuleCall getRangeRangeParserRuleCall_2_1_0() { return cRangeRangeParserRuleCall_2_1_0; }

		//","? isfunc=IsFunctional
		public Group getGroup_3() { return cGroup_3; }

		//","?
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//isfunc=IsFunctional
		public Assignment getIsfuncAssignment_3_1() { return cIsfuncAssignment_3_1; }

		//IsFunctional
		public RuleCall getIsfuncIsFunctionalParserRuleCall_3_1_0() { return cIsfuncIsFunctionalParserRuleCall_3_1_0; }

		//","? isinvfunc=IsInverseFunctional
		public Group getGroup_4() { return cGroup_4; }

		//","?
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//isinvfunc=IsInverseFunctional
		public Assignment getIsinvfuncAssignment_4_1() { return cIsinvfuncAssignment_4_1; }

		//IsInverseFunctional
		public RuleCall getIsinvfuncIsInverseFunctionalParserRuleCall_4_1_0() { return cIsinvfuncIsInverseFunctionalParserRuleCall_4_1_0; }

		//","? isSym=IsSymmetrical
		public Group getGroup_5() { return cGroup_5; }

		//","?
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//isSym=IsSymmetrical
		public Assignment getIsSymAssignment_5_1() { return cIsSymAssignment_5_1; }

		//IsSymmetrical
		public RuleCall getIsSymIsSymmetricalParserRuleCall_5_1_0() { return cIsSymIsSymmetricalParserRuleCall_5_1_0; }

		//","? isTrans=IsTransitive
		public Group getGroup_6() { return cGroup_6; }

		//","?
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//isTrans=IsTransitive
		public Assignment getIsTransAssignment_6_1() { return cIsTransAssignment_6_1; }

		//IsTransitive
		public RuleCall getIsTransIsTransitiveParserRuleCall_6_1_0() { return cIsTransIsTransitiveParserRuleCall_6_1_0; }

		//","? isInvOf=IsInverseOf
		public Group getGroup_7() { return cGroup_7; }

		//","?
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//isInvOf=IsInverseOf
		public Assignment getIsInvOfAssignment_7_1() { return cIsInvOfAssignment_7_1; }

		//IsInverseOf
		public RuleCall getIsInvOfIsInverseOfParserRuleCall_7_1_0() { return cIsInvOfIsInverseOfParserRuleCall_7_1_0; }
	}

	public class FunctionalPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionalProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_0_0 = (RuleCall)cPropertyNameAssignment_0.eContents().get(0);
		private final RuleCall cIsFunctionalParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEOSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// Declares an existing property to be functional.
		//FunctionalProperty:
		//	propertyName=ResourceByName IsFunctional EOS;
		public ParserRule getRule() { return rule; }

		//propertyName=ResourceByName IsFunctional EOS
		public Group getGroup() { return cGroup; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_0_0() { return cPropertyNameResourceByNameParserRuleCall_0_0; }

		//IsFunctional
		public RuleCall getIsFunctionalParserRuleCall_1() { return cIsFunctionalParserRuleCall_1; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2() { return cEOSTerminalRuleCall_2; }
	}

	public class IsFunctionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsFunctional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSingleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cValueKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IsFunctional:
		//	"has" "a" "single" "value";
		public ParserRule getRule() { return rule; }

		//"has" "a" "single" "value"
		public Group getGroup() { return cGroup; }

		//"has"
		public Keyword getHasKeyword_0() { return cHasKeyword_0; }

		//"a"
		public Keyword getAKeyword_1() { return cAKeyword_1; }

		//"single"
		public Keyword getSingleKeyword_2() { return cSingleKeyword_2; }

		//"value"
		public Keyword getValueKeyword_3() { return cValueKeyword_3; }
	}

	public class InverseFunctionalPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InverseFunctionalProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_0_0 = (RuleCall)cPropertyNameAssignment_0.eContents().get(0);
		private final RuleCall cIsInverseFunctionalParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEOSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// Declares an existing property to be inverse functional.
		//InverseFunctionalProperty:
		//	propertyName=ResourceByName IsInverseFunctional EOS;
		public ParserRule getRule() { return rule; }

		//propertyName=ResourceByName IsInverseFunctional EOS
		public Group getGroup() { return cGroup; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_0_0() { return cPropertyNameResourceByNameParserRuleCall_0_0; }

		//IsInverseFunctional
		public RuleCall getIsInverseFunctionalParserRuleCall_1() { return cIsInverseFunctionalParserRuleCall_1; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2() { return cEOSTerminalRuleCall_2; }
	}

	public class IsInverseFunctionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsInverseFunctional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSingleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSubjectKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IsInverseFunctional:
		//	"has" "a" "single" "subject";
		public ParserRule getRule() { return rule; }

		//"has" "a" "single" "subject"
		public Group getGroup() { return cGroup; }

		//"has"
		public Keyword getHasKeyword_0() { return cHasKeyword_0; }

		//"a"
		public Keyword getAKeyword_1() { return cAKeyword_1; }

		//"single"
		public Keyword getSingleKeyword_2() { return cSingleKeyword_2; }

		//"subject"
		public Keyword getSubjectKeyword_3() { return cSubjectKeyword_3; }
	}

	public class SymmetricalPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymmetricalProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_0_0 = (RuleCall)cPropertyNameAssignment_0.eContents().get(0);
		private final RuleCall cIsSymmetricalParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEOSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// Declares an existing property to be symmetric
		//SymmetricalProperty:
		//	propertyName=ResourceByName IsSymmetrical EOS;
		public ParserRule getRule() { return rule; }

		//propertyName=ResourceByName IsSymmetrical EOS
		public Group getGroup() { return cGroup; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_0_0() { return cPropertyNameResourceByNameParserRuleCall_0_0; }

		//IsSymmetrical
		public RuleCall getIsSymmetricalParserRuleCall_1() { return cIsSymmetricalParserRuleCall_1; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2() { return cEOSTerminalRuleCall_2; }
	}

	public class IsSymmetricalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsSymmetrical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSymmetricalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsSymmetrical:
		//	"is" "symmetrical";
		public ParserRule getRule() { return rule; }

		//"is" "symmetrical"
		public Group getGroup() { return cGroup; }

		//"is"
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }

		//"symmetrical"
		public Keyword getSymmetricalKeyword_1() { return cSymmetricalKeyword_1; }
	}

	public class TransitivePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitiveProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_0_0 = (RuleCall)cPropertyNameAssignment_0.eContents().get(0);
		private final RuleCall cIsTransitiveParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEOSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// Declares an existing property to be transitive.
		//TransitiveProperty:
		//	propertyName=ResourceByName IsTransitive EOS;
		public ParserRule getRule() { return rule; }

		//propertyName=ResourceByName IsTransitive EOS
		public Group getGroup() { return cGroup; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_0_0() { return cPropertyNameResourceByNameParserRuleCall_0_0; }

		//IsTransitive
		public RuleCall getIsTransitiveParserRuleCall_1() { return cIsTransitiveParserRuleCall_1; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2() { return cEOSTerminalRuleCall_2; }
	}

	public class IsTransitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsTransitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTransitiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsTransitive:
		//	"is" "transitive";
		public ParserRule getRule() { return rule; }

		//"is" "transitive"
		public Group getGroup() { return cGroup; }

		//"is"
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }

		//"transitive"
		public Keyword getTransitiveKeyword_1() { return cTransitiveKeyword_1; }
	}

	public class InversePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InverseProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyName1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyName1ResourceByNameParserRuleCall_0_0 = (RuleCall)cPropertyName1Assignment_0.eContents().get(0);
		private final Assignment cInvOfAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvOfIsInverseOfParserRuleCall_1_0 = (RuleCall)cInvOfAssignment_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// Declares two existing properties to be inverses of each other.
		//InverseProperty:
		//	propertyName1=ResourceByName invOf=IsInverseOf EOS;
		public ParserRule getRule() { return rule; }

		//propertyName1=ResourceByName invOf=IsInverseOf EOS
		public Group getGroup() { return cGroup; }

		//propertyName1=ResourceByName
		public Assignment getPropertyName1Assignment_0() { return cPropertyName1Assignment_0; }

		//ResourceByName
		public RuleCall getPropertyName1ResourceByNameParserRuleCall_0_0() { return cPropertyName1ResourceByNameParserRuleCall_0_0; }

		//invOf=IsInverseOf
		public Assignment getInvOfAssignment_1() { return cInvOfAssignment_1; }

		//IsInverseOf
		public RuleCall getInvOfIsInverseOfParserRuleCall_1_0() { return cInvOfIsInverseOfParserRuleCall_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2() { return cEOSTerminalRuleCall_2; }
	}

	public class IsInverseOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsInverseOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInverseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyName2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyName2ResourceByNameParserRuleCall_4_0 = (RuleCall)cPropertyName2Assignment_4.eContents().get(0);
		
		//IsInverseOf:
		//	"is" "the" "inverse" "of" propertyName2=ResourceByName;
		public ParserRule getRule() { return rule; }

		//"is" "the" "inverse" "of" propertyName2=ResourceByName
		public Group getGroup() { return cGroup; }

		//"is"
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }

		//"the"
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }

		//"inverse"
		public Keyword getInverseKeyword_2() { return cInverseKeyword_2; }

		//"of"
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }

		//propertyName2=ResourceByName
		public Assignment getPropertyName2Assignment_4() { return cPropertyName2Assignment_4; }

		//ResourceByName
		public RuleCall getPropertyName2ResourceByNameParserRuleCall_4_0() { return cPropertyName2ResourceByNameParserRuleCall_4_0; }
	}

	public class TypedBNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedBNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArticleAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArticleIndefiniteArticleParserRuleCall_0_0_0 = (RuleCall)cArticleAssignment_0_0.eContents().get(0);
		private final Assignment cClassIdentifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cClassIdentifierResourceIdentifierParserRuleCall_0_1_0 = (RuleCall)cClassIdentifierAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cArticleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cArticleAnyKeyword_1_0_0 = (Keyword)cArticleAssignment_1_0.eContents().get(0);
		private final Assignment cClassIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClassIdentifierResourceIdentifierParserRuleCall_1_1_0 = (RuleCall)cClassIdentifierAssignment_1_1.eContents().get(0);
		
		//// This is the general phrase specifying a type: "a <Class>" which is used
		//// both in data declaration and in patterns for Tests, Queries, and Rules.
		//// e.g., a Person
		//TypedBNode:
		//	article=IndefiniteArticle classIdentifier=ResourceIdentifier | article="any" classIdentifier=ResourceIdentifier;
		public ParserRule getRule() { return rule; }

		//article=IndefiniteArticle classIdentifier=ResourceIdentifier | article="any" classIdentifier=ResourceIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//article=IndefiniteArticle classIdentifier=ResourceIdentifier
		public Group getGroup_0() { return cGroup_0; }

		//article=IndefiniteArticle
		public Assignment getArticleAssignment_0_0() { return cArticleAssignment_0_0; }

		//IndefiniteArticle
		public RuleCall getArticleIndefiniteArticleParserRuleCall_0_0_0() { return cArticleIndefiniteArticleParserRuleCall_0_0_0; }

		//classIdentifier=ResourceIdentifier
		public Assignment getClassIdentifierAssignment_0_1() { return cClassIdentifierAssignment_0_1; }

		//ResourceIdentifier
		public RuleCall getClassIdentifierResourceIdentifierParserRuleCall_0_1_0() { return cClassIdentifierResourceIdentifierParserRuleCall_0_1_0; }

		//article="any" classIdentifier=ResourceIdentifier
		public Group getGroup_1() { return cGroup_1; }

		//article="any"
		public Assignment getArticleAssignment_1_0() { return cArticleAssignment_1_0; }

		//"any"
		public Keyword getArticleAnyKeyword_1_0_0() { return cArticleAnyKeyword_1_0_0; }

		//classIdentifier=ResourceIdentifier
		public Assignment getClassIdentifierAssignment_1_1() { return cClassIdentifierAssignment_1_1; }

		//ResourceIdentifier
		public RuleCall getClassIdentifierResourceIdentifierParserRuleCall_1_1_0() { return cClassIdentifierResourceIdentifierParserRuleCall_1_1_0; }
	}

	public class InstanceDeclarationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceDeclarationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInstanceDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// Allows a statement to declare an instance.
		//InstanceDeclarationStatement:
		//	InstanceDeclaration EOS;
		public ParserRule getRule() { return rule; }

		//InstanceDeclaration EOS
		public Group getGroup() { return cGroup; }

		//InstanceDeclaration
		public RuleCall getInstanceDeclarationParserRuleCall_0() { return cInstanceDeclarationParserRuleCall_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1() { return cEOSTerminalRuleCall_1; }
	}

	public class InstanceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeDeclAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeDeclTypeDeclarationParserRuleCall_0_0_0 = (RuleCall)cTypeDeclAssignment_0_0.eContents().get(0);
		private final Assignment cAddlInfoItemsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAddlInfoItemsPropValPartialTripleParserRuleCall_0_1_0 = (RuleCall)cAddlInfoItemsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cArticleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArticleIndefiniteArticleParserRuleCall_1_0_0 = (RuleCall)cArticleAssignment_1_0.eContents().get(0);
		private final Assignment cClassNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClassNameResourceByNameParserRuleCall_1_1_0 = (RuleCall)cClassNameAssignment_1_1.eContents().get(0);
		private final Assignment cInstanceNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInstanceNameResourceNameParserRuleCall_1_2_0 = (RuleCall)cInstanceNameAssignment_1_2.eContents().get(0);
		private final Assignment cAddlInfoItemsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAddlInfoItemsPropValPartialTripleParserRuleCall_1_3_0 = (RuleCall)cAddlInfoItemsAssignment_1_3.eContents().get(0);
		
		//// Declares an instance by either 1 & 2) giving its name and type and
		//// optionally adding attributes and values or 3) creating a blank node
		//// by giving it a type and at least one attribute and value.  This rule
		//// is reused in other places so it can't contain an EOS token.
		//// e.g., a Person George with age 23, with spouse Martha.
		//// e.g., a Birth with child George, with mother Mary, with location (a Location with latitude 38.18611).
		//InstanceDeclaration:
		//	typeDecl=TypeDeclaration addlInfoItems+=PropValPartialTriple* // e.g., George is a Person, has age 23, has spouse Martha.
		//	| article=IndefiniteArticle className=ResourceByName instanceName=ResourceName? addlInfoItems+=PropValPartialTriple*;
		public ParserRule getRule() { return rule; }

		//typeDecl=TypeDeclaration addlInfoItems+=PropValPartialTriple* // e.g., George is a Person, has age 23, has spouse Martha.
		//| article=IndefiniteArticle className=ResourceByName instanceName=ResourceName? addlInfoItems+=PropValPartialTriple*
		public Alternatives getAlternatives() { return cAlternatives; }

		//typeDecl=TypeDeclaration addlInfoItems+=PropValPartialTriple*
		public Group getGroup_0() { return cGroup_0; }

		//typeDecl=TypeDeclaration
		public Assignment getTypeDeclAssignment_0_0() { return cTypeDeclAssignment_0_0; }

		//TypeDeclaration
		public RuleCall getTypeDeclTypeDeclarationParserRuleCall_0_0_0() { return cTypeDeclTypeDeclarationParserRuleCall_0_0_0; }

		//addlInfoItems+=PropValPartialTriple*
		public Assignment getAddlInfoItemsAssignment_0_1() { return cAddlInfoItemsAssignment_0_1; }

		//PropValPartialTriple
		public RuleCall getAddlInfoItemsPropValPartialTripleParserRuleCall_0_1_0() { return cAddlInfoItemsPropValPartialTripleParserRuleCall_0_1_0; }

		//article=IndefiniteArticle className=ResourceByName instanceName=ResourceName? addlInfoItems+=PropValPartialTriple*
		public Group getGroup_1() { return cGroup_1; }

		//article=IndefiniteArticle
		public Assignment getArticleAssignment_1_0() { return cArticleAssignment_1_0; }

		//IndefiniteArticle
		public RuleCall getArticleIndefiniteArticleParserRuleCall_1_0_0() { return cArticleIndefiniteArticleParserRuleCall_1_0_0; }

		//className=ResourceByName
		public Assignment getClassNameAssignment_1_1() { return cClassNameAssignment_1_1; }

		//ResourceByName
		public RuleCall getClassNameResourceByNameParserRuleCall_1_1_0() { return cClassNameResourceByNameParserRuleCall_1_1_0; }

		//instanceName=ResourceName?
		public Assignment getInstanceNameAssignment_1_2() { return cInstanceNameAssignment_1_2; }

		//ResourceName
		public RuleCall getInstanceNameResourceNameParserRuleCall_1_2_0() { return cInstanceNameResourceNameParserRuleCall_1_2_0; }

		//addlInfoItems+=PropValPartialTriple*
		public Assignment getAddlInfoItemsAssignment_1_3() { return cAddlInfoItemsAssignment_1_3; }

		//PropValPartialTriple
		public RuleCall getAddlInfoItemsPropValPartialTripleParserRuleCall_1_3_0() { return cAddlInfoItemsPropValPartialTripleParserRuleCall_1_3_0; }
	}

	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstNameResourceNameParserRuleCall_0_0 = (RuleCall)cInstNameAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypedBNodeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//// Issue: type declaration and variable declaration conflict:
		////	George is a Person	-- defines new instance of Person (this can be a complete statement)
		////	x is a Person		-- says that for variable has constraint x <rdf:type> <Person> (this is never a complete statement)
		//TypeDeclaration:
		//	instName=ResourceName "is" type=TypedBNode;
		public ParserRule getRule() { return rule; }

		//instName=ResourceName "is" type=TypedBNode
		public Group getGroup() { return cGroup; }

		//instName=ResourceName
		public Assignment getInstNameAssignment_0() { return cInstNameAssignment_0; }

		//ResourceName
		public RuleCall getInstNameResourceNameParserRuleCall_0_0() { return cInstNameResourceNameParserRuleCall_0_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//type=TypedBNode
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypedBNode
		public RuleCall getTypeTypedBNodeParserRuleCall_2_0() { return cTypeTypedBNodeParserRuleCall_2_0; }
	}

	public class InstanceDifferentFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceDifferentFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstName1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstName1ResourceByNameParserRuleCall_0_0 = (RuleCall)cInstName1Assignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInstName2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInstName2ResourceByNameParserRuleCall_6_0 = (RuleCall)cInstName2Assignment_6.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//// e.g., George is a Person.
		////		 x is Person
		//// Two instances are known to not be the same instance.
		//InstanceDifferentFrom:
		//	instName1=ResourceByName "is" "not" "the" "same" "as" instName2=ResourceByName EOS;
		public ParserRule getRule() { return rule; }

		//instName1=ResourceByName "is" "not" "the" "same" "as" instName2=ResourceByName EOS
		public Group getGroup() { return cGroup; }

		//instName1=ResourceByName
		public Assignment getInstName1Assignment_0() { return cInstName1Assignment_0; }

		//ResourceByName
		public RuleCall getInstName1ResourceByNameParserRuleCall_0_0() { return cInstName1ResourceByNameParserRuleCall_0_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//"not"
		public Keyword getNotKeyword_2() { return cNotKeyword_2; }

		//"the"
		public Keyword getTheKeyword_3() { return cTheKeyword_3; }

		//"same"
		public Keyword getSameKeyword_4() { return cSameKeyword_4; }

		//"as"
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }

		//instName2=ResourceByName
		public Assignment getInstName2Assignment_6() { return cInstName2Assignment_6; }

		//ResourceByName
		public RuleCall getInstName2ResourceByNameParserRuleCall_6_0() { return cInstName2ResourceByNameParserRuleCall_6_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_7() { return cEOSTerminalRuleCall_7; }
	}

	public class InstancesAllDifferentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstancesAllDifferent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstancesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstancesExistingResourceListParserRuleCall_0_0 = (RuleCall)cInstancesAssignment_0.eContents().get(0);
		private final Keyword cAreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cEOSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//InstancesAllDifferent:
		//	instances=ExistingResourceList "are" "not" "the" "same" EOS;
		public ParserRule getRule() { return rule; }

		//instances=ExistingResourceList "are" "not" "the" "same" EOS
		public Group getGroup() { return cGroup; }

		//instances=ExistingResourceList
		public Assignment getInstancesAssignment_0() { return cInstancesAssignment_0; }

		//ExistingResourceList
		public RuleCall getInstancesExistingResourceListParserRuleCall_0_0() { return cInstancesExistingResourceListParserRuleCall_0_0; }

		//"are"
		public Keyword getAreKeyword_1() { return cAreKeyword_1; }

		//"not"
		public Keyword getNotKeyword_2() { return cNotKeyword_2; }

		//"the"
		public Keyword getTheKeyword_3() { return cTheKeyword_3; }

		//"same"
		public Keyword getSameKeyword_4() { return cSameKeyword_4; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_5() { return cEOSTerminalRuleCall_5; }
	}

	public class ExistingInstanceAttributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistingInstanceAttribution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSubjAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSubjResourceByNameParserRuleCall_0_0_0 = (RuleCall)cSubjAssignment_0_0.eContents().get(0);
		private final Assignment cAddlInfoItemsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAddlInfoItemsPropValPartialTripleParserRuleCall_0_1_0 = (RuleCall)cAddlInfoItemsAssignment_0_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPOfSAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPOfSOfPatternReturningValuesParserRuleCall_1_0_0 = (RuleCall)cPOfSAssignment_1_0.eContents().get(0);
		private final Keyword cIsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cObjAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cObjObjectParserRuleCall_1_2_0 = (RuleCall)cObjAssignment_1_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cObjAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cObjExplicitValueParserRuleCall_2_0_0 = (RuleCall)cObjAssignment_2_0.eContents().get(0);
		private final Keyword cIsKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cPOfSAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cPOfSOfPatternReturningValuesParserRuleCall_2_2_0 = (RuleCall)cPOfSAssignment_2_2.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//// This is the form for declaring instance data for an existing instance.
		//// e.g., 25 is the age of the spouse of Martha.
		//ExistingInstanceAttribution:
		//	subj=ResourceByName addlInfoItems+=PropValPartialTriple+ EOS // e.g., George has residence (a Location with latitude -76.1, with longitude 38.186, with description "Mount Vernon").
		//	// e.g., The age of the spouse of Martha is 25 .
		//	| pOfS=OfPatternReturningValues "is" obj=Object EOS | obj=ExplicitValue "is" pOfS=OfPatternReturningValues // leading object isn't allowed to be an InstanceDeclaration (non-LL)
		//	EOS;
		public ParserRule getRule() { return rule; }

		//subj=ResourceByName addlInfoItems+=PropValPartialTriple+ EOS // e.g., George has residence (a Location with latitude -76.1, with longitude 38.186, with description "Mount Vernon").
		//// e.g., The age of the spouse of Martha is 25 .
		//| pOfS=OfPatternReturningValues "is" obj=Object EOS | obj=ExplicitValue "is" pOfS=OfPatternReturningValues // leading object isn't allowed to be an InstanceDeclaration (non-LL)
		//EOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//subj=ResourceByName addlInfoItems+=PropValPartialTriple+ EOS
		public Group getGroup_0() { return cGroup_0; }

		//subj=ResourceByName
		public Assignment getSubjAssignment_0_0() { return cSubjAssignment_0_0; }

		//ResourceByName
		public RuleCall getSubjResourceByNameParserRuleCall_0_0_0() { return cSubjResourceByNameParserRuleCall_0_0_0; }

		//addlInfoItems+=PropValPartialTriple+
		public Assignment getAddlInfoItemsAssignment_0_1() { return cAddlInfoItemsAssignment_0_1; }

		//PropValPartialTriple
		public RuleCall getAddlInfoItemsPropValPartialTripleParserRuleCall_0_1_0() { return cAddlInfoItemsPropValPartialTripleParserRuleCall_0_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_0_2() { return cEOSTerminalRuleCall_0_2; }

		//pOfS=OfPatternReturningValues "is" obj=Object EOS
		public Group getGroup_1() { return cGroup_1; }

		//pOfS=OfPatternReturningValues
		public Assignment getPOfSAssignment_1_0() { return cPOfSAssignment_1_0; }

		//OfPatternReturningValues
		public RuleCall getPOfSOfPatternReturningValuesParserRuleCall_1_0_0() { return cPOfSOfPatternReturningValuesParserRuleCall_1_0_0; }

		//"is"
		public Keyword getIsKeyword_1_1() { return cIsKeyword_1_1; }

		//obj=Object
		public Assignment getObjAssignment_1_2() { return cObjAssignment_1_2; }

		//Object
		public RuleCall getObjObjectParserRuleCall_1_2_0() { return cObjObjectParserRuleCall_1_2_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_3() { return cEOSTerminalRuleCall_1_3; }

		//obj=ExplicitValue "is" pOfS=OfPatternReturningValues // leading object isn't allowed to be an InstanceDeclaration (non-LL)
		//EOS
		public Group getGroup_2() { return cGroup_2; }

		//obj=ExplicitValue
		public Assignment getObjAssignment_2_0() { return cObjAssignment_2_0; }

		//ExplicitValue
		public RuleCall getObjExplicitValueParserRuleCall_2_0_0() { return cObjExplicitValueParserRuleCall_2_0_0; }

		//"is"
		public Keyword getIsKeyword_2_1() { return cIsKeyword_2_1; }

		//pOfS=OfPatternReturningValues
		public Assignment getPOfSAssignment_2_2() { return cPOfSAssignment_2_2; }

		//OfPatternReturningValues
		public RuleCall getPOfSOfPatternReturningValuesParserRuleCall_2_2_0() { return cPOfSOfPatternReturningValuesParserRuleCall_2_2_0; }

		//// leading object isn't allowed to be an InstanceDeclaration (non-LL)
		//EOS
		public RuleCall getEOSTerminalRuleCall_2_3() { return cEOSTerminalRuleCall_2_3; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValAlternatives_0 = (Alternatives)cValAssignment.eContents().get(0);
		private final RuleCall cValLiteralValueParserRuleCall_0_0 = (RuleCall)cValAlternatives_0.eContents().get(0);
		private final RuleCall cValResourceByNameParserRuleCall_0_1 = (RuleCall)cValAlternatives_0.eContents().get(1);
		private final RuleCall cValInstanceDeclarationParserRuleCall_0_2 = (RuleCall)cValAlternatives_0.eContents().get(2);
		
		//// The object (value) of a triple can be a LiteralValue (DatatypeProperty) or an ResourceByName (ObjectProperty)
		//Object:
		//	val=(LiteralValue | ResourceByName | InstanceDeclaration);
		public ParserRule getRule() { return rule; }

		//val=(LiteralValue | ResourceByName | InstanceDeclaration)
		public Assignment getValAssignment() { return cValAssignment; }

		//LiteralValue | ResourceByName | InstanceDeclaration
		public Alternatives getValAlternatives_0() { return cValAlternatives_0; }

		//LiteralValue
		public RuleCall getValLiteralValueParserRuleCall_0_0() { return cValLiteralValueParserRuleCall_0_0; }

		//ResourceByName
		public RuleCall getValResourceByNameParserRuleCall_0_1() { return cValResourceByNameParserRuleCall_0_1; }

		//InstanceDeclaration
		public RuleCall getValInstanceDeclarationParserRuleCall_0_2() { return cValInstanceDeclarationParserRuleCall_0_2; }
	}

	public class PropValPartialTripleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropValPartialTriple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHasKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cWithKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cPropertyNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_2_0 = (RuleCall)cPropertyNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cObjectValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cObjectValueExplicitValueParserRuleCall_3_0_0 = (RuleCall)cObjectValueAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cObjectValueBNodeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cObjectValueBNodeInstanceDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cObjectValueBNodeAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//// This pattern is used in instance data declarations.
		//PropValPartialTriple:
		//	","? ("has" | "with")? propertyName=ResourceByName (objectValue=ExplicitValue | "("
		//	objectValueBNode=InstanceDeclaration ")");
		public ParserRule getRule() { return rule; }

		//","? ("has" | "with")? propertyName=ResourceByName (objectValue=ExplicitValue | "(" objectValueBNode=InstanceDeclaration
		//")")
		public Group getGroup() { return cGroup; }

		//","?
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//("has" | "with")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"has"
		public Keyword getHasKeyword_1_0() { return cHasKeyword_1_0; }

		//"with"
		public Keyword getWithKeyword_1_1() { return cWithKeyword_1_1; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_2() { return cPropertyNameAssignment_2; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_2_0() { return cPropertyNameResourceByNameParserRuleCall_2_0; }

		//objectValue=ExplicitValue | "(" objectValueBNode=InstanceDeclaration ")"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//objectValue=ExplicitValue
		public Assignment getObjectValueAssignment_3_0() { return cObjectValueAssignment_3_0; }

		//ExplicitValue
		public RuleCall getObjectValueExplicitValueParserRuleCall_3_0_0() { return cObjectValueExplicitValueParserRuleCall_3_0_0; }

		//"(" objectValueBNode=InstanceDeclaration ")"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1_0() { return cLeftParenthesisKeyword_3_1_0; }

		//objectValueBNode=InstanceDeclaration
		public Assignment getObjectValueBNodeAssignment_3_1_1() { return cObjectValueBNodeAssignment_3_1_1; }

		//InstanceDeclaration
		public RuleCall getObjectValueBNodeInstanceDeclarationParserRuleCall_3_1_1_0() { return cObjectValueBNodeInstanceDeclarationParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_1_2() { return cRightParenthesisKeyword_3_1_2; }
	}

	public class OfPatternReturningValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OfPatternReturningValues");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOfphrsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOfphrsOfPhraseParserRuleCall_0_0_0 = (RuleCall)cOfphrsAssignment_0_0.eContents().get(0);
		private final Assignment cSubjectAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSubjectResourceByNameParserRuleCall_0_1_0 = (RuleCall)cSubjectAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeTypedBNodeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//// | objectInstanceList=ResourceList  // this would allow a list of object values
		/// ********************************************************************************************************************* /
		/// *      The rest of the rules in this file are for defining patterns in Tests, Queries, and Rules                    * /
		/// ********************************************************************************************************************* / // This phrase identifies a graph pattern pinned to a point (the subject, at the end of the phrase) and identified by edges (properties)
		////	The whole phrase can be thought of as as expression selecting all nodes in the graph from which once can trace "backwards" along
		////	the specified edges to arrive at the subject node. All properties except the first in the phrase must be ObjectProperty names. If
		////	the first is an ObjectProperty the value(s) selected with be instances; if the first is a DatatypeProperty the value(s) will be
		////	literals.
		//OfPatternReturningValues:
		//	ofphrs+=OfPhrase+ // e.g., latitude of location of NYC
		//	// e.g., the age of a friend of George
		//	// e.g., the age of a father of a Person
		//	subject=ResourceByName | type=TypedBNode;
		public ParserRule getRule() { return rule; }

		//ofphrs+=OfPhrase+ // e.g., latitude of location of NYC
		//// e.g., the age of a friend of George
		//// e.g., the age of a father of a Person
		//subject=ResourceByName | type=TypedBNode
		public Alternatives getAlternatives() { return cAlternatives; }

		//ofphrs+=OfPhrase+ // e.g., latitude of location of NYC
		//// e.g., the age of a friend of George
		//// e.g., the age of a father of a Person
		//subject=ResourceByName
		public Group getGroup_0() { return cGroup_0; }

		//ofphrs+=OfPhrase+
		public Assignment getOfphrsAssignment_0_0() { return cOfphrsAssignment_0_0; }

		//OfPhrase
		public RuleCall getOfphrsOfPhraseParserRuleCall_0_0_0() { return cOfphrsOfPhraseParserRuleCall_0_0_0; }

		//subject=ResourceByName
		public Assignment getSubjectAssignment_0_1() { return cSubjectAssignment_0_1; }

		//ResourceByName
		public RuleCall getSubjectResourceByNameParserRuleCall_0_1_0() { return cSubjectResourceByNameParserRuleCall_0_1_0; }

		//type=TypedBNode
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypedBNode
		public RuleCall getTypeTypedBNodeParserRuleCall_1_0() { return cTypeTypedBNodeParserRuleCall_1_0; }
	}

	public class WithChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithChain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWpsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cWpsWithPhraseParserRuleCall_0_0 = (RuleCall)cWpsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWpsWithPhraseParserRuleCall_1_1_0 = (RuleCall)cWpsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// This is a more complex qualifier
		//WithChain: // e.g., with friend with spouse
		//	wps+=WithPhrase+ | "(" wps+=WithPhrase+ ")";
		public ParserRule getRule() { return rule; }

		//// e.g., with friend with spouse
		//wps+=WithPhrase+ | "(" wps+=WithPhrase+ ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//// e.g., with friend with spouse
		//wps+=WithPhrase+
		public Assignment getWpsAssignment_0() { return cWpsAssignment_0; }

		//WithPhrase
		public RuleCall getWpsWithPhraseParserRuleCall_0_0() { return cWpsWithPhraseParserRuleCall_0_0; }

		//"(" wps+=WithPhrase+ ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//wps+=WithPhrase+
		public Assignment getWpsAssignment_1_1() { return cWpsAssignment_1_1; }

		//WithPhrase
		public RuleCall getWpsWithPhraseParserRuleCall_1_1_0() { return cWpsWithPhraseParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class WithPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCommaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cHasKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cWithKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_0_2_0 = (RuleCall)cPropertyNameAssignment_0_2.eContents().get(0);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueExplicitValueParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cHasKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cWithKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cPropertyNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_1_2_0 = (RuleCall)cPropertyNameAssignment_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueIntervalValueParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cHasKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cWithKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Assignment cPropertyNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_2_2_0 = (RuleCall)cPropertyNameAssignment_2_2.eContents().get(0);
		private final Assignment cValueAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Alternatives cValueAlternatives_2_3_0 = (Alternatives)cValueAssignment_2_3.eContents().get(0);
		private final RuleCall cValueEmbeddedInstanceDeclarationParserRuleCall_2_3_0_0 = (RuleCall)cValueAlternatives_2_3_0.eContents().get(0);
		private final RuleCall cValueWithPhraseParserRuleCall_2_3_0_1 = (RuleCall)cValueAlternatives_2_3_0.eContents().get(1);
		private final RuleCall cValueLimitedExpressionParserRuleCall_2_3_0_2 = (RuleCall)cValueAlternatives_2_3_0.eContents().get(2);
		
		//// This is a "forward" or has|with phrase
		//WithPhrase: // e.g., , has age 23
		//// e.g., , with spouse Martha
		//// e.g., , with friend with spouse with age 23
		//	","? ("has" | "with") propertyName=ResourceByName value=ExplicitValue | ","? ("has" | "with")
		//	propertyName=ResourceByName value=IntervalValue | ","? ("has" | "with") propertyName=ResourceByName
		//	value=(EmbeddedInstanceDeclaration | WithPhrase | LimitedExpression);
		public ParserRule getRule() { return rule; }

		//// e.g., , has age 23
		//// e.g., , with spouse Martha
		//// e.g., , with friend with spouse with age 23
		//","? ("has" | "with") propertyName=ResourceByName value=ExplicitValue | ","? ("has" | "with")
		//propertyName=ResourceByName value=IntervalValue | ","? ("has" | "with") propertyName=ResourceByName
		//value=(EmbeddedInstanceDeclaration | WithPhrase | LimitedExpression)
		public Alternatives getAlternatives() { return cAlternatives; }

		//// e.g., , has age 23
		//// e.g., , with spouse Martha
		//// e.g., , with friend with spouse with age 23
		//","? ("has" | "with") propertyName=ResourceByName value=ExplicitValue
		public Group getGroup_0() { return cGroup_0; }

		//// e.g., , has age 23
		//// e.g., , with spouse Martha
		//// e.g., , with friend with spouse with age 23
		//","?
		public Keyword getCommaKeyword_0_0() { return cCommaKeyword_0_0; }

		//"has" | "with"
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//"has"
		public Keyword getHasKeyword_0_1_0() { return cHasKeyword_0_1_0; }

		//"with"
		public Keyword getWithKeyword_0_1_1() { return cWithKeyword_0_1_1; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_0_2() { return cPropertyNameAssignment_0_2; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_0_2_0() { return cPropertyNameResourceByNameParserRuleCall_0_2_0; }

		//value=ExplicitValue
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//ExplicitValue
		public RuleCall getValueExplicitValueParserRuleCall_0_3_0() { return cValueExplicitValueParserRuleCall_0_3_0; }

		//","? ("has" | "with") propertyName=ResourceByName value=IntervalValue
		public Group getGroup_1() { return cGroup_1; }

		//","?
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//"has" | "with"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"has"
		public Keyword getHasKeyword_1_1_0() { return cHasKeyword_1_1_0; }

		//"with"
		public Keyword getWithKeyword_1_1_1() { return cWithKeyword_1_1_1; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_1_2() { return cPropertyNameAssignment_1_2; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_1_2_0() { return cPropertyNameResourceByNameParserRuleCall_1_2_0; }

		//value=IntervalValue
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//IntervalValue
		public RuleCall getValueIntervalValueParserRuleCall_1_3_0() { return cValueIntervalValueParserRuleCall_1_3_0; }

		//","? ("has" | "with") propertyName=ResourceByName value=(EmbeddedInstanceDeclaration | WithPhrase | LimitedExpression)
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//"has" | "with"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"has"
		public Keyword getHasKeyword_2_1_0() { return cHasKeyword_2_1_0; }

		//"with"
		public Keyword getWithKeyword_2_1_1() { return cWithKeyword_2_1_1; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_2_2() { return cPropertyNameAssignment_2_2; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_2_2_0() { return cPropertyNameResourceByNameParserRuleCall_2_2_0; }

		//value=(EmbeddedInstanceDeclaration | WithPhrase | LimitedExpression)
		public Assignment getValueAssignment_2_3() { return cValueAssignment_2_3; }

		//EmbeddedInstanceDeclaration | WithPhrase | LimitedExpression
		public Alternatives getValueAlternatives_2_3_0() { return cValueAlternatives_2_3_0; }

		//EmbeddedInstanceDeclaration
		public RuleCall getValueEmbeddedInstanceDeclarationParserRuleCall_2_3_0_0() { return cValueEmbeddedInstanceDeclarationParserRuleCall_2_3_0_0; }

		//WithPhrase
		public RuleCall getValueWithPhraseParserRuleCall_2_3_0_1() { return cValueWithPhraseParserRuleCall_2_3_0_1; }

		//LimitedExpression
		public RuleCall getValueLimitedExpressionParserRuleCall_2_3_0_2() { return cValueLimitedExpressionParserRuleCall_2_3_0_2; }
	}

	public class EmbeddedInstanceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmbeddedInstanceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInstanceDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EmbeddedInstanceDeclaration:
		//	"(" InstanceDeclaration ")";
		public ParserRule getRule() { return rule; }

		//"(" InstanceDeclaration ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//InstanceDeclaration
		public RuleCall getInstanceDeclarationParserRuleCall_1() { return cInstanceDeclarationParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class MergedTriplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MergedTriples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpsOfPhraseParserRuleCall_0_0 = (RuleCall)cOpsAssignment_0.eContents().get(0);
		private final Assignment cPivotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPivotTypedBNodeParserRuleCall_1_0 = (RuleCall)cPivotAssignment_1.eContents().get(0);
		private final Assignment cWcsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWcsWithChainParserRuleCall_2_0 = (RuleCall)cWcsAssignment_2.eContents().get(0);
		
		//// This is a phrase which returns a set of values like an OfPatternReturningValues except instead of being pinned to a single
		////	specified subject the subject is all of the instances returned by a WithPatternReturningInstances
		//MergedTriples:
		//	ops+=OfPhrase* pivot=TypedBNode wcs+=WithChain*;
		public ParserRule getRule() { return rule; }

		//ops+=OfPhrase* pivot=TypedBNode wcs+=WithChain*
		public Group getGroup() { return cGroup; }

		//ops+=OfPhrase*
		public Assignment getOpsAssignment_0() { return cOpsAssignment_0; }

		//OfPhrase
		public RuleCall getOpsOfPhraseParserRuleCall_0_0() { return cOpsOfPhraseParserRuleCall_0_0; }

		//pivot=TypedBNode
		public Assignment getPivotAssignment_1() { return cPivotAssignment_1; }

		//TypedBNode
		public RuleCall getPivotTypedBNodeParserRuleCall_1_0() { return cPivotTypedBNodeParserRuleCall_1_0; }

		//wcs+=WithChain*
		public Assignment getWcsAssignment_2() { return cWcsAssignment_2; }

		//WithChain
		public RuleCall getWcsWithChainParserRuleCall_2_0() { return cWcsWithChainParserRuleCall_2_0; }
	}

	public class OfPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OfPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArticleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArticleAnArticleParserRuleCall_0_0 = (RuleCall)cArticleAssignment_0.eContents().get(0);
		private final Assignment cPropertyNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyNameResourceByNameParserRuleCall_1_0 = (RuleCall)cPropertyNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// e.g., the age of the friend of a Person with spouse with age 21
		//OfPhrase:
		//	article=AnArticle? propertyName=ResourceByName "of";
		public ParserRule getRule() { return rule; }

		//article=AnArticle? propertyName=ResourceByName "of"
		public Group getGroup() { return cGroup; }

		//article=AnArticle?
		public Assignment getArticleAssignment_0() { return cArticleAssignment_0; }

		//AnArticle
		public RuleCall getArticleAnArticleParserRuleCall_0_0() { return cArticleAnArticleParserRuleCall_0_0; }

		//propertyName=ResourceByName
		public Assignment getPropertyNameAssignment_1() { return cPropertyNameAssignment_1; }

		//ResourceByName
		public RuleCall getPropertyNameResourceByNameParserRuleCall_1_0() { return cPropertyNameResourceByNameParserRuleCall_1_0; }

		//"of"
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
	}

	public class VariableListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesResourceNameParserRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesResourceNameParserRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//VariableList:
		//	names+=ResourceName (","? names+=ResourceName)*;
		public ParserRule getRule() { return rule; }

		//names+=ResourceName (","? names+=ResourceName)*
		public Group getGroup() { return cGroup; }

		//names+=ResourceName
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }

		//ResourceName
		public RuleCall getNamesResourceNameParserRuleCall_0_0() { return cNamesResourceNameParserRuleCall_0_0; }

		//(","? names+=ResourceName)*
		public Group getGroup_1() { return cGroup_1; }

		//","?
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//names+=ResourceName
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }

		//ResourceName
		public RuleCall getNamesResourceNameParserRuleCall_1_1_0() { return cNamesResourceNameParserRuleCall_1_1_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGivenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGivensAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGivensElementSetParserRuleCall_3_1_0 = (RuleCall)cGivensAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIfsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIfsElementSetParserRuleCall_4_1_0 = (RuleCall)cIfsAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThensAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThensElementSetParserRuleCall_6_0 = (RuleCall)cThensAssignment_6.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//// The Rule statement
		//Rule: //	('Rule' name=ID)|(name=ID 'Rule') (':')? ('given' givens=ElementSet)? ('if' ifs=ElementSet)? 'then' thens=ElementSet;
		//	"Rule" name=NAME ":"? ("given" givens=ElementSet?)? ("if" ifs=ElementSet?)? "then" thens=ElementSet EOS;
		public ParserRule getRule() { return rule; }

		////	('Rule' name=ID)|(name=ID 'Rule') (':')? ('given' givens=ElementSet)? ('if' ifs=ElementSet)? 'then' thens=ElementSet;
		//"Rule" name=NAME ":"? ("given" givens=ElementSet?)? ("if" ifs=ElementSet?)? "then" thens=ElementSet EOS
		public Group getGroup() { return cGroup; }

		////	('Rule' name=ID)|(name=ID 'Rule') (':')? ('given' givens=ElementSet)? ('if' ifs=ElementSet)? 'then' thens=ElementSet;
		//"Rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//NAME
		public RuleCall getNameNAMEParserRuleCall_1_0() { return cNameNAMEParserRuleCall_1_0; }

		//":"?
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("given" givens=ElementSet?)?
		public Group getGroup_3() { return cGroup_3; }

		//"given"
		public Keyword getGivenKeyword_3_0() { return cGivenKeyword_3_0; }

		//givens=ElementSet?
		public Assignment getGivensAssignment_3_1() { return cGivensAssignment_3_1; }

		//ElementSet
		public RuleCall getGivensElementSetParserRuleCall_3_1_0() { return cGivensElementSetParserRuleCall_3_1_0; }

		//("if" ifs=ElementSet?)?
		public Group getGroup_4() { return cGroup_4; }

		//"if"
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }

		//ifs=ElementSet?
		public Assignment getIfsAssignment_4_1() { return cIfsAssignment_4_1; }

		//ElementSet
		public RuleCall getIfsElementSetParserRuleCall_4_1_0() { return cIfsElementSetParserRuleCall_4_1_0; }

		//"then"
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }

		//thens=ElementSet
		public Assignment getThensAssignment_6() { return cThensAssignment_6; }

		//ElementSet
		public RuleCall getThensElementSetParserRuleCall_6_0() { return cThensElementSetParserRuleCall_6_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_7() { return cEOSTerminalRuleCall_7; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////// e.g., Rule AreaOfCircle: given x is a Circle then area of x is radius of x ^ 2 * PI.
		////// 		 Rule UncleRule: if w is brother of x and x is parent of y then w is uncle of y.
		//////		 Rule UncleRule: if x has brother y and x has child z then y is uncle of z.
		//// The Query statement has two forms: 1) explicit "select..." as in SPARQL and 2) implied select using patterns that return one implied variaable
		////	The "select" can be ommitted from the first form.
		//Query:
		//	"Ask:" expr=Expression EOS;
		public ParserRule getRule() { return rule; }

		//"Ask:" expr=Expression EOS
		public Group getGroup() { return cGroup; }

		//"Ask:"
		public Keyword getAskKeyword_0() { return cAskKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2() { return cEOSTerminalRuleCall_2; }
	}

	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// The Test statement
		//Test:
		//	"Test:" expr=Expression EOS;
		public ParserRule getRule() { return rule; }

		//"Test:" expr=Expression EOS
		public Group getGroup() { return cGroup; }

		//"Test:"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2() { return cEOSTerminalRuleCall_2; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExprKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// The Expr statement
		//Expr:
		//	"Expr:" expr=Expression EOS;
		public ParserRule getRule() { return rule; }

		//"Expr:" expr=Expression EOS
		public Group getGroup() { return cGroup; }

		//"Expr:"
		public Keyword getExprKeyword_0() { return cExprKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_2() { return cEOSTerminalRuleCall_2; }
	}

	public class DisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Display");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cDisplayStringAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cDisplayStringSTRINGTerminalRuleCall_1_0_0_0 = (RuleCall)cDisplayStringAssignment_1_0_0.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cModelAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cModelDeductionsKeyword_1_1_0_0 = (Keyword)cModelAssignment_1_1_0.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cModelAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final Keyword cModelModelKeyword_1_2_0_0 = (Keyword)cModelAssignment_1_2_0.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		
		//Display:
		//	"Print:" (displayString=STRING EOS | model="Deductions" EOS | model="Model" EOS);
		public ParserRule getRule() { return rule; }

		//"Print:" (displayString=STRING EOS | model="Deductions" EOS | model="Model" EOS)
		public Group getGroup() { return cGroup; }

		//"Print:"
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }

		//displayString=STRING EOS | model="Deductions" EOS | model="Model" EOS
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//displayString=STRING EOS
		public Group getGroup_1_0() { return cGroup_1_0; }

		//displayString=STRING
		public Assignment getDisplayStringAssignment_1_0_0() { return cDisplayStringAssignment_1_0_0; }

		//STRING
		public RuleCall getDisplayStringSTRINGTerminalRuleCall_1_0_0_0() { return cDisplayStringSTRINGTerminalRuleCall_1_0_0_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_0_1() { return cEOSTerminalRuleCall_1_0_1; }

		//model="Deductions" EOS
		public Group getGroup_1_1() { return cGroup_1_1; }

		//model="Deductions"
		public Assignment getModelAssignment_1_1_0() { return cModelAssignment_1_1_0; }

		//"Deductions"
		public Keyword getModelDeductionsKeyword_1_1_0_0() { return cModelDeductionsKeyword_1_1_0_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_1_1() { return cEOSTerminalRuleCall_1_1_1; }

		//model="Model" EOS
		public Group getGroup_1_2() { return cGroup_1_2; }

		//model="Model"
		public Assignment getModelAssignment_1_2_0() { return cModelAssignment_1_2_0; }

		//"Model"
		public Keyword getModelModelKeyword_1_2_0_0() { return cModelModelKeyword_1_2_0_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_2_1() { return cEOSTerminalRuleCall_1_2_1; }
	}

	public class ExplanationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Explanation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExplainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExprAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExprInstanceDeclarationParserRuleCall_1_0_0_0 = (RuleCall)cExprAssignment_1_0_0.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cExprAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExprExistingInstanceAttributionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cExprAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_1_2_0_0 = (RuleCall)cExprAssignment_1_2_0.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cRuleKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cRulenameAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRulenameNAMEParserRuleCall_1_3_1_0 = (RuleCall)cRulenameAssignment_1_3_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_1_3_2 = (RuleCall)cGroup_1_3.eContents().get(2);
		
		//Explanation:
		//	"Explain:" (expr=InstanceDeclaration EOS | expr=ExistingInstanceAttribution | expr=Expression EOS | "Rule"
		//	rulename=NAME EOS);
		public ParserRule getRule() { return rule; }

		//"Explain:" (expr=InstanceDeclaration EOS | expr=ExistingInstanceAttribution | expr=Expression EOS | "Rule" rulename=NAME
		//EOS)
		public Group getGroup() { return cGroup; }

		//"Explain:"
		public Keyword getExplainKeyword_0() { return cExplainKeyword_0; }

		//expr=InstanceDeclaration EOS | expr=ExistingInstanceAttribution | expr=Expression EOS | "Rule" rulename=NAME EOS
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//expr=InstanceDeclaration EOS
		public Group getGroup_1_0() { return cGroup_1_0; }

		//expr=InstanceDeclaration
		public Assignment getExprAssignment_1_0_0() { return cExprAssignment_1_0_0; }

		//InstanceDeclaration
		public RuleCall getExprInstanceDeclarationParserRuleCall_1_0_0_0() { return cExprInstanceDeclarationParserRuleCall_1_0_0_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_0_1() { return cEOSTerminalRuleCall_1_0_1; }

		//expr=ExistingInstanceAttribution
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//ExistingInstanceAttribution
		public RuleCall getExprExistingInstanceAttributionParserRuleCall_1_1_0() { return cExprExistingInstanceAttributionParserRuleCall_1_1_0; }

		//expr=Expression EOS
		public Group getGroup_1_2() { return cGroup_1_2; }

		//expr=Expression
		public Assignment getExprAssignment_1_2_0() { return cExprAssignment_1_2_0; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_0_0() { return cExprExpressionParserRuleCall_1_2_0_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_2_1() { return cEOSTerminalRuleCall_1_2_1; }

		//"Rule" rulename=NAME EOS
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"Rule"
		public Keyword getRuleKeyword_1_3_0() { return cRuleKeyword_1_3_0; }

		//rulename=NAME
		public Assignment getRulenameAssignment_1_3_1() { return cRulenameAssignment_1_3_1; }

		//NAME
		public RuleCall getRulenameNAMEParserRuleCall_1_3_1_0() { return cRulenameNAMEParserRuleCall_1_3_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_1_3_2() { return cEOSTerminalRuleCall_1_3_2; }
	}

	public class ElementSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		////// The set of elements used in a Rule block
		//ElementSet:
		//	elements+=Expression (","? elements+=Expression)*;
		public ParserRule getRule() { return rule; }

		//elements+=Expression (","? elements+=Expression)*
		public Group getGroup() { return cGroup; }

		//elements+=Expression
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_0_0() { return cElementsExpressionParserRuleCall_0_0; }

		//(","? elements+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","?
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_1_1_0() { return cElementsExpressionParserRuleCall_1_1_0; }
	}

	public class SelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistinctAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDistinctDistinctKeyword_1_0 = (Keyword)cDistinctAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAllVarsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cAllVarsAsteriskKeyword_2_0_0 = (Keyword)cAllVarsAssignment_2_0.eContents().get(0);
		private final Assignment cVarListAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVarListVariableListParserRuleCall_2_1_0 = (RuleCall)cVarListAssignment_2_1.eContents().get(0);
		private final Keyword cWhereKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprOrExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOrderbyAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cOrderbyOrderByKeyword_5_0_0 = (Keyword)cOrderbyAssignment_5_0.eContents().get(0);
		private final Assignment cOrderListAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOrderListOrderListParserRuleCall_5_1_0 = (RuleCall)cOrderListAssignment_5_1.eContents().get(0);
		
		//SelectExpression:
		//	"select" distinct="distinct"? (allVars="*" | varList=VariableList) "where" expr=OrExpression (orderby="order by"
		//	orderList=OrderList)?;
		public ParserRule getRule() { return rule; }

		//"select" distinct="distinct"? (allVars="*" | varList=VariableList) "where" expr=OrExpression (orderby="order by"
		//orderList=OrderList)?
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//distinct="distinct"?
		public Assignment getDistinctAssignment_1() { return cDistinctAssignment_1; }

		//"distinct"
		public Keyword getDistinctDistinctKeyword_1_0() { return cDistinctDistinctKeyword_1_0; }

		//allVars="*" | varList=VariableList
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//allVars="*"
		public Assignment getAllVarsAssignment_2_0() { return cAllVarsAssignment_2_0; }

		//"*"
		public Keyword getAllVarsAsteriskKeyword_2_0_0() { return cAllVarsAsteriskKeyword_2_0_0; }

		//varList=VariableList
		public Assignment getVarListAssignment_2_1() { return cVarListAssignment_2_1; }

		//VariableList
		public RuleCall getVarListVariableListParserRuleCall_2_1_0() { return cVarListVariableListParserRuleCall_2_1_0; }

		//"where"
		public Keyword getWhereKeyword_3() { return cWhereKeyword_3; }

		//expr=OrExpression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//OrExpression
		public RuleCall getExprOrExpressionParserRuleCall_4_0() { return cExprOrExpressionParserRuleCall_4_0; }

		//(orderby="order by" orderList=OrderList)?
		public Group getGroup_5() { return cGroup_5; }

		//orderby="order by"
		public Assignment getOrderbyAssignment_5_0() { return cOrderbyAssignment_5_0; }

		//"order by"
		public Keyword getOrderbyOrderByKeyword_5_0_0() { return cOrderbyOrderByKeyword_5_0_0; }

		//orderList=OrderList
		public Assignment getOrderListAssignment_5_1() { return cOrderListAssignment_5_1; }

		//OrderList
		public RuleCall getOrderListOrderListParserRuleCall_5_1_0() { return cOrderListOrderListParserRuleCall_5_1_0; }
	}

	public class ConstructExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubjResourceNameParserRuleCall_1_0 = (RuleCall)cSubjAssignment_1.eContents().get(0);
		private final Assignment cPredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredResourceNameParserRuleCall_2_0 = (RuleCall)cPredAssignment_2.eContents().get(0);
		private final Assignment cObjAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjResourceNameParserRuleCall_3_0 = (RuleCall)cObjAssignment_3.eContents().get(0);
		private final Keyword cWhereKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprOrExpressionParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		
		//ConstructExpression:
		//	"construct" subj=ResourceName pred=ResourceName obj=ResourceName "where" expr=OrExpression;
		public ParserRule getRule() { return rule; }

		//"construct" subj=ResourceName pred=ResourceName obj=ResourceName "where" expr=OrExpression
		public Group getGroup() { return cGroup; }

		//"construct"
		public Keyword getConstructKeyword_0() { return cConstructKeyword_0; }

		//subj=ResourceName
		public Assignment getSubjAssignment_1() { return cSubjAssignment_1; }

		//ResourceName
		public RuleCall getSubjResourceNameParserRuleCall_1_0() { return cSubjResourceNameParserRuleCall_1_0; }

		//pred=ResourceName
		public Assignment getPredAssignment_2() { return cPredAssignment_2; }

		//ResourceName
		public RuleCall getPredResourceNameParserRuleCall_2_0() { return cPredResourceNameParserRuleCall_2_0; }

		//obj=ResourceName
		public Assignment getObjAssignment_3() { return cObjAssignment_3; }

		//ResourceName
		public RuleCall getObjResourceNameParserRuleCall_3_0() { return cObjResourceNameParserRuleCall_3_0; }

		//"where"
		public Keyword getWhereKeyword_4() { return cWhereKeyword_4; }

		//expr=OrExpression
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//OrExpression
		public RuleCall getExprOrExpressionParserRuleCall_5_0() { return cExprOrExpressionParserRuleCall_5_0; }
	}

	public class AskQueryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AskQueryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWhereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprOrExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AskQueryExpression:
		//	"ask" "where" expr=OrExpression;
		public ParserRule getRule() { return rule; }

		//"ask" "where" expr=OrExpression
		public Group getGroup() { return cGroup; }

		//"ask"
		public Keyword getAskKeyword_0() { return cAskKeyword_0; }

		//"where"
		public Keyword getWhereKeyword_1() { return cWhereKeyword_1; }

		//expr=OrExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//OrExpression
		public RuleCall getExprOrExpressionParserRuleCall_2_0() { return cExprOrExpressionParserRuleCall_2_0; }
	}

	public class OrderListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrderListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrderListOrderElementParserRuleCall_0_0 = (RuleCall)cOrderListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOrderListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrderListOrderElementParserRuleCall_1_1_0 = (RuleCall)cOrderListAssignment_1_1.eContents().get(0);
		
		//OrderList:
		//	orderList+=OrderElement (","? orderList+=OrderElement)*;
		public ParserRule getRule() { return rule; }

		//orderList+=OrderElement (","? orderList+=OrderElement)*
		public Group getGroup() { return cGroup; }

		//orderList+=OrderElement
		public Assignment getOrderListAssignment_0() { return cOrderListAssignment_0; }

		//OrderElement
		public RuleCall getOrderListOrderElementParserRuleCall_0_0() { return cOrderListOrderElementParserRuleCall_0_0; }

		//(","? orderList+=OrderElement)*
		public Group getGroup_1() { return cGroup_1; }

		//","?
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//orderList+=OrderElement
		public Assignment getOrderListAssignment_1_1() { return cOrderListAssignment_1_1; }

		//OrderElement
		public RuleCall getOrderListOrderElementParserRuleCall_1_1_0() { return cOrderListOrderElementParserRuleCall_1_1_0; }
	}

	public class OrderElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOrderAlternatives_0_0 = (Alternatives)cOrderAssignment_0.eContents().get(0);
		private final Keyword cOrderAscKeyword_0_0_0 = (Keyword)cOrderAlternatives_0_0.eContents().get(0);
		private final Keyword cOrderDescKeyword_0_0_1 = (Keyword)cOrderAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameResourceNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OrderElement:
		//	order=("asc" | "desc")? name=ResourceName;
		public ParserRule getRule() { return rule; }

		//order=("asc" | "desc")? name=ResourceName
		public Group getGroup() { return cGroup; }

		//order=("asc" | "desc")?
		public Assignment getOrderAssignment_0() { return cOrderAssignment_0; }

		//"asc" | "desc"
		public Alternatives getOrderAlternatives_0_0() { return cOrderAlternatives_0_0; }

		//"asc"
		public Keyword getOrderAscKeyword_0_0_0() { return cOrderAscKeyword_0_0_0; }

		//"desc"
		public Keyword getOrderDescKeyword_0_0_1() { return cOrderDescKeyword_0_0_1; }

		//name=ResourceName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ResourceName
		public RuleCall getNameResourceNameParserRuleCall_1_0() { return cNameResourceNameParserRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstructExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAskQueryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//	SelectExpression | ConstructExpression | AskQueryExpression | OrExpression;
		public ParserRule getRule() { return rule; }

		//SelectExpression | ConstructExpression | AskQueryExpression | OrExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SelectExpression
		public RuleCall getSelectExpressionParserRuleCall_0() { return cSelectExpressionParserRuleCall_0; }

		//ConstructExpression
		public RuleCall getConstructExpressionParserRuleCall_1() { return cConstructExpressionParserRuleCall_1; }

		//AskQueryExpression
		public RuleCall getAskQueryExpressionParserRuleCall_2() { return cAskQueryExpressionParserRuleCall_2; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_3() { return cOrExpressionParserRuleCall_3; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cJunctionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpOrKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns Expression:
		//	AndExpression ({JunctionExpression.left=current} op=("||" | "or") right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression ({JunctionExpression.left=current} op=("||" | "or") right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({JunctionExpression.left=current} op=("||" | "or") right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{JunctionExpression.left=current}
		public Action getJunctionExpressionLeftAction_1_0() { return cJunctionExpressionLeftAction_1_0; }

		//op=("||" | "or")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"||" | "or"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0_0; }

		//"or"
		public Keyword getOpOrKeyword_1_1_0_1() { return cOpOrKeyword_1_1_0_1; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cJunctionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpAndKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		//	RelationalExpression ({JunctionExpression.left=current} op=("&&" | "and") right=RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpression ({JunctionExpression.left=current} op=("&&" | "and") right=RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//({JunctionExpression.left=current} op=("&&" | "and") right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{JunctionExpression.left=current}
		public Action getJunctionExpressionLeftAction_1_0() { return cJunctionExpressionLeftAction_1_0; }

		//op=("&&" | "and")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"&&" | "and"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0_0() { return cOpAmpersandAmpersandKeyword_1_1_0_0; }

		//"and"
		public Keyword getOpAndKeyword_1_1_0_1() { return cOpAndKeyword_1_1_0_1; }

		//right=RelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_2_0() { return cRightRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpIsKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpLessThanSignKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_5 = (Keyword)cOpAlternatives_1_1_0.eContents().get(5);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_6 = (Keyword)cOpAlternatives_1_1_0.eContents().get(6);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_7 = (Keyword)cOpAlternatives_1_1_0.eContents().get(7);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//	AdditiveExpression ({BinaryOpExpression.left=current} op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=")
		//	right=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression ({BinaryOpExpression.left=current} op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=")
		//right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({BinaryOpExpression.left=current} op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=") right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOpExpression.left=current}
		public Action getBinaryOpExpressionLeftAction_1_0() { return cBinaryOpExpressionLeftAction_1_0; }

		//op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_1() { return cOpEqualsSignEqualsSignKeyword_1_1_0_1; }

		//"is"
		public Keyword getOpIsKeyword_1_1_0_2() { return cOpIsKeyword_1_1_0_2; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_3() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_3; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_4() { return cOpLessThanSignKeyword_1_1_0_4; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_5() { return cOpLessThanSignEqualsSignKeyword_1_1_0_5; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_6() { return cOpGreaterThanSignKeyword_1_1_0_6; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_7() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_7; }

		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//	MultiplicativeExpression ({BinaryOpExpression.left=current} op=("+" | "-") right=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({BinaryOpExpression.left=current} op=("+" | "-") right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({BinaryOpExpression.left=current} op=("+" | "-") right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOpExpression.left=current}
		public Action getBinaryOpExpressionLeftAction_1_0() { return cBinaryOpExpressionLeftAction_1_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOrPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpPercentSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryOrPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	UnaryOrPrimaryExpression ({BinaryOpExpression.left=current} op=("*" | "/" | "^" | "%")
		//	right=UnaryOrPrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//UnaryOrPrimaryExpression ({BinaryOpExpression.left=current} op=("*" | "/" | "^" | "%") right=UnaryOrPrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryOrPrimaryExpression
		public RuleCall getUnaryOrPrimaryExpressionParserRuleCall_0() { return cUnaryOrPrimaryExpressionParserRuleCall_0; }

		//({BinaryOpExpression.left=current} op=("*" | "/" | "^" | "%") right=UnaryOrPrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOpExpression.left=current}
		public Action getBinaryOpExpressionLeftAction_1_0() { return cBinaryOpExpressionLeftAction_1_0; }

		//op=("*" | "/" | "^" | "%")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/" | "^" | "%"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_1_0_2() { return cOpCircumflexAccentKeyword_1_1_0_2; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_1_0_3() { return cOpPercentSignKeyword_1_1_0_3; }

		//right=UnaryOrPrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//UnaryOrPrimaryExpression
		public RuleCall getRightUnaryOrPrimaryExpressionParserRuleCall_1_2_0() { return cRightUnaryOrPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class NotOnlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotOnly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnlyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NotOnly:
		//	"not" "only";
		public ParserRule getRule() { return rule; }

		//"not" "only"
		public Group getGroup() { return cGroup; }

		//"not"
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//"only"
		public Keyword getOnlyKeyword_1() { return cOnlyKeyword_1; }
	}

	public class UnaryOrPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOrPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOpExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Keyword cOpOnlyKeyword_0_1_0_2 = (Keyword)cOpAlternatives_0_1_0.eContents().get(2);
		private final RuleCall cOpNotOnlyParserRuleCall_0_1_0_3 = (RuleCall)cOpAlternatives_0_1_0.eContents().get(3);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_4 = (Keyword)cOpAlternatives_0_1_0.eContents().get(4);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrimaryExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOrPrimaryExpression returns Expression:
		//	{UnaryOpExpression} op=("!" | "not" | "only" | NotOnly | "-") expr=PrimaryExpression | PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{UnaryOpExpression} op=("!" | "not" | "only" | NotOnly | "-") expr=PrimaryExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOpExpression} op=("!" | "not" | "only" | NotOnly | "-") expr=PrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOpExpression}
		public Action getUnaryOpExpressionAction_0_0() { return cUnaryOpExpressionAction_0_0; }

		//op=("!" | "not" | "only" | NotOnly | "-")
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"!" | "not" | "only" | NotOnly | "-"
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//"!"
		public Keyword getOpExclamationMarkKeyword_0_1_0_0() { return cOpExclamationMarkKeyword_0_1_0_0; }

		//"not"
		public Keyword getOpNotKeyword_0_1_0_1() { return cOpNotKeyword_0_1_0_1; }

		//"only"
		public Keyword getOpOnlyKeyword_0_1_0_2() { return cOpOnlyKeyword_0_1_0_2; }

		//NotOnly
		public RuleCall getOpNotOnlyParserRuleCall_0_1_0_3() { return cOpNotOnlyParserRuleCall_0_1_0_3; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_1_0_4() { return cOpHyphenMinusKeyword_0_1_0_4; }

		//expr=PrimaryExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//PrimaryExpression
		public RuleCall getExprPrimaryExpressionParserRuleCall_0_2_0() { return cExprPrimaryExpressionParserRuleCall_0_2_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFuncAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFuncIDTerminalRuleCall_1_0_0 = (RuleCall)cFuncAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cArgsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_1_2_0_0 = (RuleCall)cArgsAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_2_1_1_0 = (RuleCall)cArgsAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cGpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cGpGraphPatternParserRuleCall_2_0 = (RuleCall)cGpAssignment_2.eContents().get(0);
		private final Assignment cIvalueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIvalueIntervalValueParserRuleCall_3_0 = (RuleCall)cIvalueAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cValueExplicitValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Assignment cValueTableAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cValueTableValueTableParserRuleCall_5_0 = (RuleCall)cValueTableAssignment_5.eContents().get(0);
		
		//PrimaryExpression returns Expression:
		//	"(" expr=Expression // an expression in parentheses
		//	")" | func=ID "(" (args+=Expression ("," args+=Expression)*)? // built-in calls
		//	")" | gp= // a graph pattern
		//	GraphPattern | ivalue= // an one-sided interval value
		//	IntervalValue | value= // an explicit value
		//	ExplicitValue | valueTable= // a table of values (one or more rows of one or more columns)
		//	ValueTable;
		public ParserRule getRule() { return rule; }

		//"(" expr=Expression // an expression in parentheses
		//")" | func=ID "(" (args+=Expression ("," args+=Expression)*)? // built-in calls
		//")" | gp= // a graph pattern
		//GraphPattern | ivalue= // an one-sided interval value
		//IntervalValue | value= // an explicit value
		//ExplicitValue | valueTable= // a table of values (one or more rows of one or more columns)
		//ValueTable
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" expr=Expression // an expression in parentheses
		//")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//expr=Expression
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_1_0() { return cExprExpressionParserRuleCall_0_1_0; }

		//// an expression in parentheses
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//func=ID "(" (args+=Expression ("," args+=Expression)*)? // built-in calls
		//")"
		public Group getGroup_1() { return cGroup_1; }

		//func=ID
		public Assignment getFuncAssignment_1_0() { return cFuncAssignment_1_0; }

		//ID
		public RuleCall getFuncIDTerminalRuleCall_1_0_0() { return cFuncIDTerminalRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//args+=Expression
		public Assignment getArgsAssignment_1_2_0() { return cArgsAssignment_1_2_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_2_0_0() { return cArgsExpressionParserRuleCall_1_2_0_0; }

		//("," args+=Expression)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//","
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_2_1_1() { return cArgsAssignment_1_2_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_2_1_1_0() { return cArgsExpressionParserRuleCall_1_2_1_1_0; }

		//// built-in calls
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//gp= // a graph pattern
		//GraphPattern
		public Assignment getGpAssignment_2() { return cGpAssignment_2; }

		//// a graph pattern
		//GraphPattern
		public RuleCall getGpGraphPatternParserRuleCall_2_0() { return cGpGraphPatternParserRuleCall_2_0; }

		//ivalue= // an one-sided interval value
		//IntervalValue
		public Assignment getIvalueAssignment_3() { return cIvalueAssignment_3; }

		//// an one-sided interval value
		//IntervalValue
		public RuleCall getIvalueIntervalValueParserRuleCall_3_0() { return cIvalueIntervalValueParserRuleCall_3_0; }

		//value= // an explicit value
		//ExplicitValue
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//// an explicit value
		//ExplicitValue
		public RuleCall getValueExplicitValueParserRuleCall_4_0() { return cValueExplicitValueParserRuleCall_4_0; }

		//valueTable= // a table of values (one or more rows of one or more columns)
		//ValueTable
		public Assignment getValueTableAssignment_5() { return cValueTableAssignment_5; }

		//// a table of values (one or more rows of one or more columns)
		//ValueTable
		public RuleCall getValueTableValueTableParserRuleCall_5_0() { return cValueTableValueTableParserRuleCall_5_0; }
	}

	public class LimitedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedExpression");
		private final RuleCall cLimitedOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LimitedExpression returns Expression:
		//	LimitedOrExpression;
		public ParserRule getRule() { return rule; }

		//LimitedOrExpression
		public RuleCall getLimitedOrExpressionParserRuleCall() { return cLimitedOrExpressionParserRuleCall; }
	}

	public class LimitedOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLimitedAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cJunctionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpOrKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLimitedAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LimitedOrExpression returns Expression:
		//	LimitedAndExpression ({JunctionExpression.left=current} op=("||" | "or") right=LimitedAndExpression)*;
		public ParserRule getRule() { return rule; }

		//LimitedAndExpression ({JunctionExpression.left=current} op=("||" | "or") right=LimitedAndExpression)*
		public Group getGroup() { return cGroup; }

		//LimitedAndExpression
		public RuleCall getLimitedAndExpressionParserRuleCall_0() { return cLimitedAndExpressionParserRuleCall_0; }

		//({JunctionExpression.left=current} op=("||" | "or") right=LimitedAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{JunctionExpression.left=current}
		public Action getJunctionExpressionLeftAction_1_0() { return cJunctionExpressionLeftAction_1_0; }

		//op=("||" | "or")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"||" | "or"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0_0; }

		//"or"
		public Keyword getOpOrKeyword_1_1_0_1() { return cOpOrKeyword_1_1_0_1; }

		//right=LimitedAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//LimitedAndExpression
		public RuleCall getRightLimitedAndExpressionParserRuleCall_1_2_0() { return cRightLimitedAndExpressionParserRuleCall_1_2_0; }
	}

	public class LimitedAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLimitedRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cJunctionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpAndKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLimitedRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LimitedAndExpression returns Expression:
		//	LimitedRelationalExpression ({JunctionExpression.left=current} op=("&&" | "and") right=LimitedRelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//LimitedRelationalExpression ({JunctionExpression.left=current} op=("&&" | "and") right=LimitedRelationalExpression)*
		public Group getGroup() { return cGroup; }

		//LimitedRelationalExpression
		public RuleCall getLimitedRelationalExpressionParserRuleCall_0() { return cLimitedRelationalExpressionParserRuleCall_0; }

		//({JunctionExpression.left=current} op=("&&" | "and") right=LimitedRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{JunctionExpression.left=current}
		public Action getJunctionExpressionLeftAction_1_0() { return cJunctionExpressionLeftAction_1_0; }

		//op=("&&" | "and")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"&&" | "and"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0_0() { return cOpAmpersandAmpersandKeyword_1_1_0_0; }

		//"and"
		public Keyword getOpAndKeyword_1_1_0_1() { return cOpAndKeyword_1_1_0_1; }

		//right=LimitedRelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//LimitedRelationalExpression
		public RuleCall getRightLimitedRelationalExpressionParserRuleCall_1_2_0() { return cRightLimitedRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class LimitedRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLimitedAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpIsKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpLessThanSignKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_5 = (Keyword)cOpAlternatives_1_1_0.eContents().get(5);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_6 = (Keyword)cOpAlternatives_1_1_0.eContents().get(6);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_7 = (Keyword)cOpAlternatives_1_1_0.eContents().get(7);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLimitedAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LimitedRelationalExpression returns Expression:
		//	LimitedAdditiveExpression ({BinaryOpExpression.left=current} op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=")
		//	right=LimitedAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//LimitedAdditiveExpression ({BinaryOpExpression.left=current} op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=")
		//right=LimitedAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//LimitedAdditiveExpression
		public RuleCall getLimitedAdditiveExpressionParserRuleCall_0() { return cLimitedAdditiveExpressionParserRuleCall_0; }

		//({BinaryOpExpression.left=current} op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=")
		//right=LimitedAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOpExpression.left=current}
		public Action getBinaryOpExpressionLeftAction_1_0() { return cBinaryOpExpressionLeftAction_1_0; }

		//op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_1() { return cOpEqualsSignEqualsSignKeyword_1_1_0_1; }

		//"is"
		public Keyword getOpIsKeyword_1_1_0_2() { return cOpIsKeyword_1_1_0_2; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_3() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_3; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_4() { return cOpLessThanSignKeyword_1_1_0_4; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_5() { return cOpLessThanSignEqualsSignKeyword_1_1_0_5; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_6() { return cOpGreaterThanSignKeyword_1_1_0_6; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_7() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_7; }

		//right=LimitedAdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//LimitedAdditiveExpression
		public RuleCall getRightLimitedAdditiveExpressionParserRuleCall_1_2_0() { return cRightLimitedAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class LimitedAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLimitedMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLimitedMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LimitedAdditiveExpression returns Expression:
		//	LimitedMultiplicativeExpression ({BinaryOpExpression.left=current} op=("+" | "-")
		//	right=LimitedMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//LimitedMultiplicativeExpression ({BinaryOpExpression.left=current} op=("+" | "-")
		//right=LimitedMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//LimitedMultiplicativeExpression
		public RuleCall getLimitedMultiplicativeExpressionParserRuleCall_0() { return cLimitedMultiplicativeExpressionParserRuleCall_0; }

		//({BinaryOpExpression.left=current} op=("+" | "-") right=LimitedMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOpExpression.left=current}
		public Action getBinaryOpExpressionLeftAction_1_0() { return cBinaryOpExpressionLeftAction_1_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//right=LimitedMultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//LimitedMultiplicativeExpression
		public RuleCall getRightLimitedMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightLimitedMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class LimitedMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLimitedUnaryOrPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpPercentSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLimitedUnaryOrPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LimitedMultiplicativeExpression returns Expression:
		//	LimitedUnaryOrPrimaryExpression ({BinaryOpExpression.left=current} op=("*" | "/" | "^" | "%")
		//	right=LimitedUnaryOrPrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//LimitedUnaryOrPrimaryExpression ({BinaryOpExpression.left=current} op=("*" | "/" | "^" | "%")
		//right=LimitedUnaryOrPrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//LimitedUnaryOrPrimaryExpression
		public RuleCall getLimitedUnaryOrPrimaryExpressionParserRuleCall_0() { return cLimitedUnaryOrPrimaryExpressionParserRuleCall_0; }

		//({BinaryOpExpression.left=current} op=("*" | "/" | "^" | "%") right=LimitedUnaryOrPrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOpExpression.left=current}
		public Action getBinaryOpExpressionLeftAction_1_0() { return cBinaryOpExpressionLeftAction_1_0; }

		//op=("*" | "/" | "^" | "%")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/" | "^" | "%"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_1_0_2() { return cOpCircumflexAccentKeyword_1_1_0_2; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_1_0_3() { return cOpPercentSignKeyword_1_1_0_3; }

		//right=LimitedUnaryOrPrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//LimitedUnaryOrPrimaryExpression
		public RuleCall getRightLimitedUnaryOrPrimaryExpressionParserRuleCall_1_2_0() { return cRightLimitedUnaryOrPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class LimitedUnaryOrPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedUnaryOrPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOpExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprLimitedPrimaryExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cLimitedPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LimitedUnaryOrPrimaryExpression returns Expression:
		//	{UnaryOpExpression} op=("!" | "-") expr=LimitedPrimaryExpression | LimitedPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{UnaryOpExpression} op=("!" | "-") expr=LimitedPrimaryExpression | LimitedPrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOpExpression} op=("!" | "-") expr=LimitedPrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOpExpression}
		public Action getUnaryOpExpressionAction_0_0() { return cUnaryOpExpressionAction_0_0; }

		//op=("!" | "-")
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"!" | "-"
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//"!"
		public Keyword getOpExclamationMarkKeyword_0_1_0_0() { return cOpExclamationMarkKeyword_0_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_1_0_1() { return cOpHyphenMinusKeyword_0_1_0_1; }

		//expr=LimitedPrimaryExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//LimitedPrimaryExpression
		public RuleCall getExprLimitedPrimaryExpressionParserRuleCall_0_2_0() { return cExprLimitedPrimaryExpressionParserRuleCall_0_2_0; }

		//LimitedPrimaryExpression
		public RuleCall getLimitedPrimaryExpressionParserRuleCall_1() { return cLimitedPrimaryExpressionParserRuleCall_1; }
	}

	public class LimitedPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFuncAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFuncIDTerminalRuleCall_1_0_0 = (RuleCall)cFuncAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cArgsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_1_2_0_0 = (RuleCall)cArgsAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_2_1_1_0 = (RuleCall)cArgsAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cIvalueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIvalueIntervalValueParserRuleCall_2_0 = (RuleCall)cIvalueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValueExplicitValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cValueTableAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cValueTableValueTableParserRuleCall_4_0 = (RuleCall)cValueTableAssignment_4.eContents().get(0);
		
		//LimitedPrimaryExpression returns Expression:
		//	"(" expr=Expression // an expression in parentheses
		//	")" | func=ID "(" (args+=Expression ("," args+=Expression)*)? // built-in calls
		//	")" | ivalue= // an one-sided interval value
		//	IntervalValue | value= // an explicit value
		//	ExplicitValue | valueTable= // a table of values (one or more rows of one or more columns)
		//	ValueTable;
		public ParserRule getRule() { return rule; }

		//"(" expr=Expression // an expression in parentheses
		//")" | func=ID "(" (args+=Expression ("," args+=Expression)*)? // built-in calls
		//")" | ivalue= // an one-sided interval value
		//IntervalValue | value= // an explicit value
		//ExplicitValue | valueTable= // a table of values (one or more rows of one or more columns)
		//ValueTable
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" expr=Expression // an expression in parentheses
		//")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//expr=Expression
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_1_0() { return cExprExpressionParserRuleCall_0_1_0; }

		//// an expression in parentheses
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//func=ID "(" (args+=Expression ("," args+=Expression)*)? // built-in calls
		//")"
		public Group getGroup_1() { return cGroup_1; }

		//func=ID
		public Assignment getFuncAssignment_1_0() { return cFuncAssignment_1_0; }

		//ID
		public RuleCall getFuncIDTerminalRuleCall_1_0_0() { return cFuncIDTerminalRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//args+=Expression
		public Assignment getArgsAssignment_1_2_0() { return cArgsAssignment_1_2_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_2_0_0() { return cArgsExpressionParserRuleCall_1_2_0_0; }

		//("," args+=Expression)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//","
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_2_1_1() { return cArgsAssignment_1_2_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_2_1_1_0() { return cArgsExpressionParserRuleCall_1_2_1_1_0; }

		//// built-in calls
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//ivalue= // an one-sided interval value
		//IntervalValue
		public Assignment getIvalueAssignment_2() { return cIvalueAssignment_2; }

		//// an one-sided interval value
		//IntervalValue
		public RuleCall getIvalueIntervalValueParserRuleCall_2_0() { return cIvalueIntervalValueParserRuleCall_2_0; }

		//value= // an explicit value
		//ExplicitValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//// an explicit value
		//ExplicitValue
		public RuleCall getValueExplicitValueParserRuleCall_3_0() { return cValueExplicitValueParserRuleCall_3_0; }

		//valueTable= // a table of values (one or more rows of one or more columns)
		//ValueTable
		public Assignment getValueTableAssignment_4() { return cValueTableAssignment_4; }

		//// a table of values (one or more rows of one or more columns)
		//ValueTable
		public RuleCall getValueTableValueTableParserRuleCall_4_0() { return cValueTableValueTableParserRuleCall_4_0; }
	}

	public class GraphPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropOfSubjParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubjPropParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstAttrSPVParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInstAttrPSVParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMergedTriplesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubTypeOfParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExistentialNegationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//GraphPattern:
		//	PropOfSubj | SubjProp | InstAttrSPV | InstAttrPSV | MergedTriples | SubTypeOf | ExistentialNegation;
		public ParserRule getRule() { return rule; }

		//PropOfSubj | SubjProp | InstAttrSPV | InstAttrPSV | MergedTriples | SubTypeOf | ExistentialNegation
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropOfSubj
		public RuleCall getPropOfSubjParserRuleCall_0() { return cPropOfSubjParserRuleCall_0; }

		//SubjProp
		public RuleCall getSubjPropParserRuleCall_1() { return cSubjPropParserRuleCall_1; }

		//InstAttrSPV
		public RuleCall getInstAttrSPVParserRuleCall_2() { return cInstAttrSPVParserRuleCall_2; }

		//InstAttrPSV
		public RuleCall getInstAttrPSVParserRuleCall_3() { return cInstAttrPSVParserRuleCall_3; }

		//MergedTriples
		public RuleCall getMergedTriplesParserRuleCall_4() { return cMergedTriplesParserRuleCall_4; }

		//SubTypeOf
		public RuleCall getSubTypeOfParserRuleCall_5() { return cSubTypeOfParserRuleCall_5; }

		//ExistentialNegation
		public RuleCall getExistentialNegationParserRuleCall_6() { return cExistentialNegationParserRuleCall_6; }
	}

	public class PropOfSubjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropOfSubj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOfPhrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOfPhrOfPhraseParserRuleCall_0_0 = (RuleCall)cOfPhrAssignment_0.eContents().get(0);
		private final Assignment cSubjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubjResourceByNameParserRuleCall_1_0 = (RuleCall)cSubjAssignment_1.eContents().get(0);
		
		//PropOfSubj:
		//	ofPhr+=OfPhrase+ subj=ResourceByName;
		public ParserRule getRule() { return rule; }

		//ofPhr+=OfPhrase+ subj=ResourceByName
		public Group getGroup() { return cGroup; }

		//ofPhr+=OfPhrase+
		public Assignment getOfPhrAssignment_0() { return cOfPhrAssignment_0; }

		//OfPhrase
		public RuleCall getOfPhrOfPhraseParserRuleCall_0_0() { return cOfPhrOfPhraseParserRuleCall_0_0; }

		//subj=ResourceByName
		public Assignment getSubjAssignment_1() { return cSubjAssignment_1; }

		//ResourceByName
		public RuleCall getSubjResourceByNameParserRuleCall_1_0() { return cSubjResourceByNameParserRuleCall_1_0; }
	}

	public class SubjPropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubjProp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubjResourceByNameParserRuleCall_0_0 = (RuleCall)cSubjAssignment_0.eContents().get(0);
		private final Assignment cHwPhrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHwPhrWithPhraseParserRuleCall_1_0 = (RuleCall)cHwPhrAssignment_1.eContents().get(0);
		
		//SubjProp:
		//	subj=ResourceByName hwPhr+=WithPhrase+;
		public ParserRule getRule() { return rule; }

		//subj=ResourceByName hwPhr+=WithPhrase+
		public Group getGroup() { return cGroup; }

		//subj=ResourceByName
		public Assignment getSubjAssignment_0() { return cSubjAssignment_0; }

		//ResourceByName
		public RuleCall getSubjResourceByNameParserRuleCall_0_0() { return cSubjResourceByNameParserRuleCall_0_0; }

		//hwPhr+=WithPhrase+
		public Assignment getHwPhrAssignment_1() { return cHwPhrAssignment_1; }

		//WithPhrase
		public RuleCall getHwPhrWithPhraseParserRuleCall_1_0() { return cHwPhrWithPhraseParserRuleCall_1_0; }
	}

	public class InstAttrSPVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstAttrSPV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubjResourceByNameParserRuleCall_0_0 = (RuleCall)cSubjAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHasKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cWithKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cPropsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropsResourceByNameParserRuleCall_2_0 = (RuleCall)cPropsAssignment_2.eContents().get(0);
		private final Assignment cValsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValsAdditiveExpressionParserRuleCall_3_0 = (RuleCall)cValsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cHasKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Keyword cWithKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final Assignment cPropsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPropsResourceByNameParserRuleCall_4_2_0 = (RuleCall)cPropsAssignment_4_2.eContents().get(0);
		private final Assignment cValsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cValsAdditiveExpressionParserRuleCall_4_3_0 = (RuleCall)cValsAssignment_4_3.eContents().get(0);
		
		//InstAttrSPV:
		//	subj=ResourceByName ("has" | "with")? props+=ResourceByName vals+=AdditiveExpression (","? ("has" | "with")
		//	props+=ResourceByName vals+=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//subj=ResourceByName ("has" | "with")? props+=ResourceByName vals+=AdditiveExpression (","? ("has" | "with")
		//props+=ResourceByName vals+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//subj=ResourceByName
		public Assignment getSubjAssignment_0() { return cSubjAssignment_0; }

		//ResourceByName
		public RuleCall getSubjResourceByNameParserRuleCall_0_0() { return cSubjResourceByNameParserRuleCall_0_0; }

		//("has" | "with")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"has"
		public Keyword getHasKeyword_1_0() { return cHasKeyword_1_0; }

		//"with"
		public Keyword getWithKeyword_1_1() { return cWithKeyword_1_1; }

		//props+=ResourceByName
		public Assignment getPropsAssignment_2() { return cPropsAssignment_2; }

		//ResourceByName
		public RuleCall getPropsResourceByNameParserRuleCall_2_0() { return cPropsResourceByNameParserRuleCall_2_0; }

		//vals+=AdditiveExpression
		public Assignment getValsAssignment_3() { return cValsAssignment_3; }

		//AdditiveExpression
		public RuleCall getValsAdditiveExpressionParserRuleCall_3_0() { return cValsAdditiveExpressionParserRuleCall_3_0; }

		//(","? ("has" | "with") props+=ResourceByName vals+=AdditiveExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//","?
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//"has" | "with"
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//"has"
		public Keyword getHasKeyword_4_1_0() { return cHasKeyword_4_1_0; }

		//"with"
		public Keyword getWithKeyword_4_1_1() { return cWithKeyword_4_1_1; }

		//props+=ResourceByName
		public Assignment getPropsAssignment_4_2() { return cPropsAssignment_4_2; }

		//ResourceByName
		public RuleCall getPropsResourceByNameParserRuleCall_4_2_0() { return cPropsResourceByNameParserRuleCall_4_2_0; }

		//vals+=AdditiveExpression
		public Assignment getValsAssignment_4_3() { return cValsAssignment_4_3; }

		//AdditiveExpression
		public RuleCall getValsAdditiveExpressionParserRuleCall_4_3_0() { return cValsAdditiveExpressionParserRuleCall_4_3_0; }
	}

	public class InstAttrPSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstAttrPSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropPropOfSubjParserRuleCall_0_0 = (RuleCall)cPropAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValExplicitValueParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//InstAttrPSV:
		//	prop=PropOfSubj "is" val=ExplicitValue;
		public ParserRule getRule() { return rule; }

		//prop=PropOfSubj "is" val=ExplicitValue
		public Group getGroup() { return cGroup; }

		//prop=PropOfSubj
		public Assignment getPropAssignment_0() { return cPropAssignment_0; }

		//PropOfSubj
		public RuleCall getPropPropOfSubjParserRuleCall_0_0() { return cPropPropOfSubjParserRuleCall_0_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//val=ExplicitValue
		public Assignment getValAssignment_2() { return cValAssignment_2; }

		//ExplicitValue
		public RuleCall getValExplicitValueParserRuleCall_2_0() { return cValExplicitValueParserRuleCall_2_0; }
	}

	public class SubTypeOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubTypeOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubclassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubclassResourceByNameParserRuleCall_0_0 = (RuleCall)cSubclassAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuperclassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSuperclassResourceByNameParserRuleCall_5_0 = (RuleCall)cSuperclassAssignment_5.eContents().get(0);
		
		//SubTypeOf:
		//	subclass=ResourceByName "is" "a" "type" "of" superclass=ResourceByName;
		public ParserRule getRule() { return rule; }

		//subclass=ResourceByName "is" "a" "type" "of" superclass=ResourceByName
		public Group getGroup() { return cGroup; }

		//subclass=ResourceByName
		public Assignment getSubclassAssignment_0() { return cSubclassAssignment_0; }

		//ResourceByName
		public RuleCall getSubclassResourceByNameParserRuleCall_0_0() { return cSubclassResourceByNameParserRuleCall_0_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//"a"
		public Keyword getAKeyword_2() { return cAKeyword_2; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//"of"
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }

		//superclass=ResourceByName
		public Assignment getSuperclassAssignment_5() { return cSuperclassAssignment_5; }

		//ResourceByName
		public RuleCall getSuperclassResourceByNameParserRuleCall_5_0() { return cSuperclassResourceByNameParserRuleCall_5_0; }
	}

	public class ExistentialNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistentialNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarListVariableListParserRuleCall_3_0 = (RuleCall)cVarListAssignment_3.eContents().get(0);
		private final Keyword cSuchKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThatKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQuantifiedAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQuantifiedPrimaryExpressionParserRuleCall_6_0 = (RuleCall)cQuantifiedAssignment_6.eContents().get(0);
		
		//ExistentialNegation:
		//	"there" "is" "no" varList=VariableList "such" "that" quantified=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//"there" "is" "no" varList=VariableList "such" "that" quantified=PrimaryExpression
		public Group getGroup() { return cGroup; }

		//"there"
		public Keyword getThereKeyword_0() { return cThereKeyword_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//"no"
		public Keyword getNoKeyword_2() { return cNoKeyword_2; }

		//varList=VariableList
		public Assignment getVarListAssignment_3() { return cVarListAssignment_3; }

		//VariableList
		public RuleCall getVarListVariableListParserRuleCall_3_0() { return cVarListVariableListParserRuleCall_3_0; }

		//"such"
		public Keyword getSuchKeyword_4() { return cSuchKeyword_4; }

		//"that"
		public Keyword getThatKeyword_5() { return cThatKeyword_5; }

		//quantified=PrimaryExpression
		public Assignment getQuantifiedAssignment_6() { return cQuantifiedAssignment_6; }

		//PrimaryExpression
		public RuleCall getQuantifiedPrimaryExpressionParserRuleCall_6_0() { return cQuantifiedPrimaryExpressionParserRuleCall_6_0; }
	}

	public class IntervalValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntervalValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_0_0_2 = (Keyword)cOpAlternatives_0_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignKeyword_0_0_3 = (Keyword)cOpAlternatives_0_0.eContents().get(3);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_0_0_4 = (Keyword)cOpAlternatives_0_0.eContents().get(4);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAdditiveExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//IntervalValue:
		//	op=("==" | "<" | "<=" | ">" | ">=") expr=AdditiveExpression;
		public ParserRule getRule() { return rule; }

		//op=("==" | "<" | "<=" | ">" | ">=") expr=AdditiveExpression
		public Group getGroup() { return cGroup; }

		//op=("==" | "<" | "<=" | ">" | ">=")
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"==" | "<" | "<=" | ">" | ">="
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_0_0_0() { return cOpEqualsSignEqualsSignKeyword_0_0_0; }

		//"<"
		public Keyword getOpLessThanSignKeyword_0_0_1() { return cOpLessThanSignKeyword_0_0_1; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_0_0_2() { return cOpLessThanSignEqualsSignKeyword_0_0_2; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_0_0_3() { return cOpGreaterThanSignKeyword_0_0_3; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_0_0_4() { return cOpGreaterThanSignEqualsSignKeyword_0_0_4; }

		//expr=AdditiveExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//AdditiveExpression
		public RuleCall getExprAdditiveExpressionParserRuleCall_1_0() { return cExprAdditiveExpressionParserRuleCall_1_0; }
	}

	public class ExplicitValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExplicitValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInstNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInstNameResourceByNameParserRuleCall_0_0 = (RuleCall)cInstNameAssignment_0.eContents().get(0);
		private final Assignment cLitValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLitValueLiteralValueParserRuleCall_1_0 = (RuleCall)cLitValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cValueListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cValueListLeftSquareBracketKeyword_2_0_0 = (Keyword)cValueListAssignment_2_0.eContents().get(0);
		private final Assignment cRowAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRowValueRowParserRuleCall_2_1_0 = (RuleCall)cRowAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTermAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTermPIKeyword_3_0 = (Keyword)cTermAssignment_3.eContents().get(0);
		private final Assignment cTermAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTermKnownKeyword_4_0 = (Keyword)cTermAssignment_4.eContents().get(0);
		
		//ExplicitValue:
		//	instName= // e.g., George
		//	ResourceByName | litValue= // e.g., 38.186111
		//	LiteralValue | valueList="[" row=ValueRow "]" | term= // PI
		//	"PI" | term= // known
		//	"known";
		public ParserRule getRule() { return rule; }

		//instName= // e.g., George
		//ResourceByName | litValue= // e.g., 38.186111
		//LiteralValue | valueList="[" row=ValueRow "]" | term= // PI
		//"PI" | term= // known
		//"known"
		public Alternatives getAlternatives() { return cAlternatives; }

		//instName= // e.g., George
		//ResourceByName
		public Assignment getInstNameAssignment_0() { return cInstNameAssignment_0; }

		//// e.g., George
		//ResourceByName
		public RuleCall getInstNameResourceByNameParserRuleCall_0_0() { return cInstNameResourceByNameParserRuleCall_0_0; }

		//litValue= // e.g., 38.186111
		//LiteralValue
		public Assignment getLitValueAssignment_1() { return cLitValueAssignment_1; }

		//// e.g., 38.186111
		//LiteralValue
		public RuleCall getLitValueLiteralValueParserRuleCall_1_0() { return cLitValueLiteralValueParserRuleCall_1_0; }

		//valueList="[" row=ValueRow "]"
		public Group getGroup_2() { return cGroup_2; }

		//valueList="["
		public Assignment getValueListAssignment_2_0() { return cValueListAssignment_2_0; }

		//"["
		public Keyword getValueListLeftSquareBracketKeyword_2_0_0() { return cValueListLeftSquareBracketKeyword_2_0_0; }

		//row=ValueRow
		public Assignment getRowAssignment_2_1() { return cRowAssignment_2_1; }

		//ValueRow
		public RuleCall getRowValueRowParserRuleCall_2_1_0() { return cRowValueRowParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//term= // PI
		//"PI"
		public Assignment getTermAssignment_3() { return cTermAssignment_3; }

		//// PI
		//"PI"
		public Keyword getTermPIKeyword_3_0() { return cTermPIKeyword_3_0; }

		//term= // known
		//"known"
		public Assignment getTermAssignment_4() { return cTermAssignment_4; }

		//// known
		//"known"
		public Keyword getTermKnownKeyword_4_0() { return cTermKnownKeyword_4_0; }
	}

	public class ValueTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRowsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRowsValueRowParserRuleCall_2_0 = (RuleCall)cRowsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cRowsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cRowsValueRowParserRuleCall_4_2_0 = (RuleCall)cRowsAssignment_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// e.g., {[George, 23, "Purple", 38.186111], [Martha, 24, "Pink", 45.203]}
		//ValueTable: //	 	row=ValueRow
		////		'[' row=ValueRow ']'
		//// e.g., [George, 23, "Purple", 38.186111]
		////	|	
		//	"{" "[" rows+=ValueRow "]" (","? "[" rows+=ValueRow "]")* "}";
		public ParserRule getRule() { return rule; }

		////	 	row=ValueRow
		////		'[' row=ValueRow ']'
		//// e.g., [George, 23, "Purple", 38.186111]
		////	|	
		//"{" "[" rows+=ValueRow "]" (","? "[" rows+=ValueRow "]")* "}"
		public Group getGroup() { return cGroup; }

		////	 	row=ValueRow
		////		'[' row=ValueRow ']'
		//// e.g., [George, 23, "Purple", 38.186111]
		////	|	
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//rows+=ValueRow
		public Assignment getRowsAssignment_2() { return cRowsAssignment_2; }

		//ValueRow
		public RuleCall getRowsValueRowParserRuleCall_2_0() { return cRowsValueRowParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//(","? "[" rows+=ValueRow "]")*
		public Group getGroup_4() { return cGroup_4; }

		//","?
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }

		//rows+=ValueRow
		public Assignment getRowsAssignment_4_2() { return cRowsAssignment_4_2; }

		//ValueRow
		public RuleCall getRowsValueRowParserRuleCall_4_2_0() { return cRowsValueRowParserRuleCall_4_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralNumberNUMBERParserRuleCall_0_0 = (RuleCall)cLiteralNumberAssignment_0.eContents().get(0);
		private final Assignment cLiteralStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cLiteralStringAssignment_1.eContents().get(0);
		private final Assignment cLiteralBooleanAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cLiteralBooleanAlternatives_2_0 = (Alternatives)cLiteralBooleanAssignment_2.eContents().get(0);
		private final Keyword cLiteralBooleanTrueKeyword_2_0_0 = (Keyword)cLiteralBooleanAlternatives_2_0.eContents().get(0);
		private final Keyword cLiteralBooleanFalseKeyword_2_0_1 = (Keyword)cLiteralBooleanAlternatives_2_0.eContents().get(1);
		
		//LiteralValue:
		//	literalNumber=NUMBER | literalString=STRING | literalBoolean=("true" | "false");
		public ParserRule getRule() { return rule; }

		//literalNumber=NUMBER | literalString=STRING | literalBoolean=("true" | "false")
		public Alternatives getAlternatives() { return cAlternatives; }

		//literalNumber=NUMBER
		public Assignment getLiteralNumberAssignment_0() { return cLiteralNumberAssignment_0; }

		//NUMBER
		public RuleCall getLiteralNumberNUMBERParserRuleCall_0_0() { return cLiteralNumberNUMBERParserRuleCall_0_0; }

		//literalString=STRING
		public Assignment getLiteralStringAssignment_1() { return cLiteralStringAssignment_1; }

		//STRING
		public RuleCall getLiteralStringSTRINGTerminalRuleCall_1_0() { return cLiteralStringSTRINGTerminalRuleCall_1_0; }

		//literalBoolean=("true" | "false")
		public Assignment getLiteralBooleanAssignment_2() { return cLiteralBooleanAssignment_2; }

		//"true" | "false"
		public Alternatives getLiteralBooleanAlternatives_2_0() { return cLiteralBooleanAlternatives_2_0; }

		//"true"
		public Keyword getLiteralBooleanTrueKeyword_2_0_0() { return cLiteralBooleanTrueKeyword_2_0_0; }

		//"false"
		public Keyword getLiteralBooleanFalseKeyword_2_0_1() { return cLiteralBooleanFalseKeyword_2_0_1; }
	}

	public class ValueRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExplicitValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExplicitValuesExplicitValueParserRuleCall_0_0 = (RuleCall)cExplicitValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExplicitValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExplicitValuesExplicitValueParserRuleCall_1_1_0 = (RuleCall)cExplicitValuesAssignment_1_1.eContents().get(0);
		
		//// e.g., George, 23, "Purple", 38.186111
		//ValueRow:
		//	explicitValues+=ExplicitValue ("," explicitValues+=ExplicitValue)*;
		public ParserRule getRule() { return rule; }

		//explicitValues+=ExplicitValue ("," explicitValues+=ExplicitValue)*
		public Group getGroup() { return cGroup; }

		//explicitValues+=ExplicitValue
		public Assignment getExplicitValuesAssignment_0() { return cExplicitValuesAssignment_0; }

		//ExplicitValue
		public RuleCall getExplicitValuesExplicitValueParserRuleCall_0_0() { return cExplicitValuesExplicitValueParserRuleCall_0_0; }

		//("," explicitValues+=ExplicitValue)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//explicitValues+=ExplicitValue
		public Assignment getExplicitValuesAssignment_1_1() { return cExplicitValuesAssignment_1_1; }

		//ExplicitValue
		public RuleCall getExplicitValuesExplicitValueParserRuleCall_1_1_0() { return cExplicitValuesExplicitValueParserRuleCall_1_1_0; }
	}

	public class NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_0_0_0 = (Keyword)cAlternatives_2_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_0_1 = (Keyword)cAlternatives_2_0_0.eContents().get(1);
		private final Keyword cTildeKeyword_2_0_0_2 = (Keyword)cAlternatives_2_0_0.eContents().get(2);
		private final RuleCall cNAME_FRAGMENTParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cPercentSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cNAME_FRAGMENTParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//// NAME should match an optional namespace followed by a local name (separated
		//// from the namespace by a colon character).  We also need to accept legal URI
		//// fragments as local names.  In particular, we need names like X.509 to work.
		//NAME hidden():
		//	ID (":" ID)? (("-" | "." | "~") NAME_FRAGMENT? | "%"? NAME_FRAGMENT)*;
		public ParserRule getRule() { return rule; }

		//ID (":" ID)? (("-" | "." | "~") NAME_FRAGMENT? | "%"? NAME_FRAGMENT)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(":" ID)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//(("-" | "." | "~") NAME_FRAGMENT? | "%"? NAME_FRAGMENT)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//("-" | "." | "~") NAME_FRAGMENT?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"-" | "." | "~"
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_0_0_0() { return cHyphenMinusKeyword_2_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_2_0_0_1() { return cFullStopKeyword_2_0_0_1; }

		//"~"
		public Keyword getTildeKeyword_2_0_0_2() { return cTildeKeyword_2_0_0_2; }

		//NAME_FRAGMENT?
		public RuleCall getNAME_FRAGMENTParserRuleCall_2_0_1() { return cNAME_FRAGMENTParserRuleCall_2_0_1; }

		//"%"? NAME_FRAGMENT
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"%"?
		public Keyword getPercentSignKeyword_2_1_0() { return cPercentSignKeyword_2_1_0; }

		//NAME_FRAGMENT
		public RuleCall getNAME_FRAGMENTParserRuleCall_2_1_1() { return cNAME_FRAGMENTParserRuleCall_2_1_1; }
	}

	public class NAME_FRAGMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NAME_FRAGMENT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cID_OR_KEYWORDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUNSIGNED_NUMBERTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cID_OR_KEYWORDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NAME_FRAGMENT hidden():
		//	ID_OR_KEYWORD | UNSIGNED_NUMBER ID_OR_KEYWORD?;
		public ParserRule getRule() { return rule; }

		//ID_OR_KEYWORD | UNSIGNED_NUMBER ID_OR_KEYWORD?
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID_OR_KEYWORD
		public RuleCall getID_OR_KEYWORDParserRuleCall_0() { return cID_OR_KEYWORDParserRuleCall_0; }

		//UNSIGNED_NUMBER ID_OR_KEYWORD?
		public Group getGroup_1() { return cGroup_1; }

		//UNSIGNED_NUMBER
		public RuleCall getUNSIGNED_NUMBERTerminalRuleCall_1_0() { return cUNSIGNED_NUMBERTerminalRuleCall_1_0; }

		//ID_OR_KEYWORD?
		public RuleCall getID_OR_KEYWORDParserRuleCall_1_1() { return cID_OR_KEYWORDParserRuleCall_1_1; }
	}

	public class ID_OR_KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID_OR_KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAreKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ID_OR_KEYWORD hidden():
		//	"a" | "A" | "is" | "are" | / * list allowed name-parts here| * / ID;
		public ParserRule getRule() { return rule; }

		//"a" | "A" | "is" | "are" | / * list allowed name-parts here| * / ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"a"
		public Keyword getAKeyword_0() { return cAKeyword_0; }

		//"A"
		public Keyword getAKeyword_1() { return cAKeyword_1; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//"are"
		public Keyword getAreKeyword_3() { return cAreKeyword_3; }

		/// * list allowed name-parts here| * / ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cUNSIGNED_NUMBERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// NUMBER matches both integral and floating point numbers.
		//NUMBER hidden():
		//	"-"? UNSIGNED_NUMBER;
		public ParserRule getRule() { return rule; }

		//"-"? UNSIGNED_NUMBER
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//UNSIGNED_NUMBER
		public RuleCall getUNSIGNED_NUMBERTerminalRuleCall_1() { return cUNSIGNED_NUMBERTerminalRuleCall_1; }
	}
	
	
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBooleanBooleanKeyword_1_0 = (Keyword)cBooleanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDecimalDecimalKeyword_2_0 = (Keyword)cDecimalEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIntIntKeyword_3_0 = (Keyword)cIntEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLongLongKeyword_4_0 = (Keyword)cLongEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFloatFloatKeyword_5_0 = (Keyword)cFloatEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDoubleDoubleKeyword_6_0 = (Keyword)cDoubleEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDurationEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDurationDurationKeyword_7_0 = (Keyword)cDurationEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDateTimeEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDateTimeDateTimeKeyword_8_0 = (Keyword)cDateTimeEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTimeTimeKeyword_9_0 = (Keyword)cTimeEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cDateDateKeyword_10_0 = (Keyword)cDateEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cGYearMonthEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cGYearMonthGYearMonthKeyword_11_0 = (Keyword)cGYearMonthEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cGYearEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cGYearGYearKeyword_12_0 = (Keyword)cGYearEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cGMonthDayEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cGMonthDayGMonthDayKeyword_13_0 = (Keyword)cGMonthDayEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cGDayEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cGDayGDayKeyword_14_0 = (Keyword)cGDayEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cGMonthEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cGMonthGMonthKeyword_15_0 = (Keyword)cGMonthEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cHexBinaryEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cHexBinaryHexBinaryKeyword_16_0 = (Keyword)cHexBinaryEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cBase64BinaryEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cBase64BinaryBase64BinaryKeyword_17_0 = (Keyword)cBase64BinaryEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cAnyURIEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cAnyURIAnyURIKeyword_18_0 = (Keyword)cAnyURIEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cDataEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cDataDataKeyword_19_0 = (Keyword)cDataEnumLiteralDeclaration_19.eContents().get(0);
		
		//enum DataType:
		//	string | boolean | decimal | int | long | float | double | duration | dateTime | time | date | gYearMonth | gYear |
		//	gMonthDay | gDay | gMonth | hexBinary | base64Binary | anyURI | data;
		public EnumRule getRule() { return rule; }

		//string | boolean | decimal | int | long | float | double | duration | dateTime | time | date | gYearMonth | gYear |
		//gMonthDay | gDay | gMonth | hexBinary | base64Binary | anyURI | data
		public Alternatives getAlternatives() { return cAlternatives; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }

		//"string"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_1() { return cBooleanEnumLiteralDeclaration_1; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_1_0() { return cBooleanBooleanKeyword_1_0; }

		//decimal
		public EnumLiteralDeclaration getDecimalEnumLiteralDeclaration_2() { return cDecimalEnumLiteralDeclaration_2; }

		//"decimal"
		public Keyword getDecimalDecimalKeyword_2_0() { return cDecimalDecimalKeyword_2_0; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_3() { return cIntEnumLiteralDeclaration_3; }

		//"int"
		public Keyword getIntIntKeyword_3_0() { return cIntIntKeyword_3_0; }

		//long
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_4() { return cLongEnumLiteralDeclaration_4; }

		//"long"
		public Keyword getLongLongKeyword_4_0() { return cLongLongKeyword_4_0; }

		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_5() { return cFloatEnumLiteralDeclaration_5; }

		//"float"
		public Keyword getFloatFloatKeyword_5_0() { return cFloatFloatKeyword_5_0; }

		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_6() { return cDoubleEnumLiteralDeclaration_6; }

		//"double"
		public Keyword getDoubleDoubleKeyword_6_0() { return cDoubleDoubleKeyword_6_0; }

		//duration
		public EnumLiteralDeclaration getDurationEnumLiteralDeclaration_7() { return cDurationEnumLiteralDeclaration_7; }

		//"duration"
		public Keyword getDurationDurationKeyword_7_0() { return cDurationDurationKeyword_7_0; }

		//dateTime
		public EnumLiteralDeclaration getDateTimeEnumLiteralDeclaration_8() { return cDateTimeEnumLiteralDeclaration_8; }

		//"dateTime"
		public Keyword getDateTimeDateTimeKeyword_8_0() { return cDateTimeDateTimeKeyword_8_0; }

		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_9() { return cTimeEnumLiteralDeclaration_9; }

		//"time"
		public Keyword getTimeTimeKeyword_9_0() { return cTimeTimeKeyword_9_0; }

		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_10() { return cDateEnumLiteralDeclaration_10; }

		//"date"
		public Keyword getDateDateKeyword_10_0() { return cDateDateKeyword_10_0; }

		//gYearMonth
		public EnumLiteralDeclaration getGYearMonthEnumLiteralDeclaration_11() { return cGYearMonthEnumLiteralDeclaration_11; }

		//"gYearMonth"
		public Keyword getGYearMonthGYearMonthKeyword_11_0() { return cGYearMonthGYearMonthKeyword_11_0; }

		//gYear
		public EnumLiteralDeclaration getGYearEnumLiteralDeclaration_12() { return cGYearEnumLiteralDeclaration_12; }

		//"gYear"
		public Keyword getGYearGYearKeyword_12_0() { return cGYearGYearKeyword_12_0; }

		//gMonthDay
		public EnumLiteralDeclaration getGMonthDayEnumLiteralDeclaration_13() { return cGMonthDayEnumLiteralDeclaration_13; }

		//"gMonthDay"
		public Keyword getGMonthDayGMonthDayKeyword_13_0() { return cGMonthDayGMonthDayKeyword_13_0; }

		//gDay
		public EnumLiteralDeclaration getGDayEnumLiteralDeclaration_14() { return cGDayEnumLiteralDeclaration_14; }

		//"gDay"
		public Keyword getGDayGDayKeyword_14_0() { return cGDayGDayKeyword_14_0; }

		//gMonth
		public EnumLiteralDeclaration getGMonthEnumLiteralDeclaration_15() { return cGMonthEnumLiteralDeclaration_15; }

		//"gMonth"
		public Keyword getGMonthGMonthKeyword_15_0() { return cGMonthGMonthKeyword_15_0; }

		//hexBinary
		public EnumLiteralDeclaration getHexBinaryEnumLiteralDeclaration_16() { return cHexBinaryEnumLiteralDeclaration_16; }

		//"hexBinary"
		public Keyword getHexBinaryHexBinaryKeyword_16_0() { return cHexBinaryHexBinaryKeyword_16_0; }

		//base64Binary
		public EnumLiteralDeclaration getBase64BinaryEnumLiteralDeclaration_17() { return cBase64BinaryEnumLiteralDeclaration_17; }

		//"base64Binary"
		public Keyword getBase64BinaryBase64BinaryKeyword_17_0() { return cBase64BinaryBase64BinaryKeyword_17_0; }

		//anyURI
		public EnumLiteralDeclaration getAnyURIEnumLiteralDeclaration_18() { return cAnyURIEnumLiteralDeclaration_18; }

		//"anyURI"
		public Keyword getAnyURIAnyURIKeyword_18_0() { return cAnyURIAnyURIKeyword_18_0; }

		//data
		public EnumLiteralDeclaration getDataEnumLiteralDeclaration_19() { return cDataEnumLiteralDeclaration_19; }

		//"data"
		public Keyword getDataDataKeyword_19_0() { return cDataDataKeyword_19_0; }
	}
	
	private ModelElements pModel;
	private ModelNameElements pModelName;
	private ImportElements pImport;
	private ModelElementElements pModelElement;
	private StatementElements pStatement;
	private ResourceNameElements pResourceName;
	private ContentListElements pContentList;
	private ResourceListElements pResourceList;
	private LiteralListElements pLiteralList;
	private ResourceByNameElements pResourceByName;
	private ExistingResourceListElements pExistingResourceList;
	private ResourceIdentifierElements pResourceIdentifier;
	private ResourceBySetOpElements pResourceBySetOp;
	private ResourceByRestrictionElements pResourceByRestriction;
	private UnionResourceElements pUnionResource;
	private IntersectionResourceElements pIntersectionResource;
	private ClassDeclarationElements pClassDeclaration;
	private EnumeratedInstancesElements pEnumeratedInstances;
	private AddlClassInfoElements pAddlClassInfo;
	private RangeElements pRange;
	private RangeTypeElements pRangeType;
	private UserDefinedDataTypeElements pUserDefinedDataType;
	private DataTypeRestrictionElements pDataTypeRestriction;
	private FacetsElements pFacets;
	private DataTypeElements unknownRuleDataType;
	private AnArticleElements pAnArticle;
	private IndefiniteArticleElements pIndefiniteArticle;
	private DefiniteArticleElements pDefiniteArticle;
	private EquivalentConceptsElements pEquivalentConcepts;
	private DisjointClassesElements pDisjointClasses;
	private ComplementOfClassElements pComplementOfClass;
	private AllValuesFromElements pAllValuesFrom;
	private SomeValuesFromElements pSomeValuesFrom;
	private HasValueElements pHasValue;
	private CardinalityElements pCardinality;
	private MinCardinalityElements pMinCardinality;
	private MaxCardinalityElements pMaxCardinality;
	private PropertyOfClassElements pPropertyOfClass;
	private AllValuesConditionElements pAllValuesCondition;
	private EnumeratedAllValuesFromElements pEnumeratedAllValuesFrom;
	private EnumeratedAllAndSomeValuesFromElements pEnumeratedAllAndSomeValuesFrom;
	private DefaultValueElements pDefaultValue;
	private SomeValuesConditionElements pSomeValuesCondition;
	private HasValueConditionElements pHasValueCondition;
	private MinCardConditionElements pMinCardCondition;
	private MaxCardConditionElements pMaxCardCondition;
	private CardConditionElements pCardCondition;
	private NecessaryAndSufficientElements pNecessaryAndSufficient;
	private ConditionElements pCondition;
	private PropertyDeclarationElements pPropertyDeclaration;
	private AdditionalPropertyInfoElements pAdditionalPropertyInfo;
	private FunctionalPropertyElements pFunctionalProperty;
	private IsFunctionalElements pIsFunctional;
	private InverseFunctionalPropertyElements pInverseFunctionalProperty;
	private IsInverseFunctionalElements pIsInverseFunctional;
	private SymmetricalPropertyElements pSymmetricalProperty;
	private IsSymmetricalElements pIsSymmetrical;
	private TransitivePropertyElements pTransitiveProperty;
	private IsTransitiveElements pIsTransitive;
	private InversePropertyElements pInverseProperty;
	private IsInverseOfElements pIsInverseOf;
	private TypedBNodeElements pTypedBNode;
	private InstanceDeclarationStatementElements pInstanceDeclarationStatement;
	private InstanceDeclarationElements pInstanceDeclaration;
	private TypeDeclarationElements pTypeDeclaration;
	private InstanceDifferentFromElements pInstanceDifferentFrom;
	private InstancesAllDifferentElements pInstancesAllDifferent;
	private ExistingInstanceAttributionElements pExistingInstanceAttribution;
	private ObjectElements pObject;
	private PropValPartialTripleElements pPropValPartialTriple;
	private OfPatternReturningValuesElements pOfPatternReturningValues;
	private WithChainElements pWithChain;
	private WithPhraseElements pWithPhrase;
	private EmbeddedInstanceDeclarationElements pEmbeddedInstanceDeclaration;
	private MergedTriplesElements pMergedTriples;
	private OfPhraseElements pOfPhrase;
	private VariableListElements pVariableList;
	private RuleElements pRule;
	private QueryElements pQuery;
	private TestElements pTest;
	private ExprElements pExpr;
	private DisplayElements pDisplay;
	private ExplanationElements pExplanation;
	private ElementSetElements pElementSet;
	private SelectExpressionElements pSelectExpression;
	private ConstructExpressionElements pConstructExpression;
	private AskQueryExpressionElements pAskQueryExpression;
	private OrderListElements pOrderList;
	private OrderElementElements pOrderElement;
	private ExpressionElements pExpression;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private RelationalExpressionElements pRelationalExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private NotOnlyElements pNotOnly;
	private UnaryOrPrimaryExpressionElements pUnaryOrPrimaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private LimitedExpressionElements pLimitedExpression;
	private LimitedOrExpressionElements pLimitedOrExpression;
	private LimitedAndExpressionElements pLimitedAndExpression;
	private LimitedRelationalExpressionElements pLimitedRelationalExpression;
	private LimitedAdditiveExpressionElements pLimitedAdditiveExpression;
	private LimitedMultiplicativeExpressionElements pLimitedMultiplicativeExpression;
	private LimitedUnaryOrPrimaryExpressionElements pLimitedUnaryOrPrimaryExpression;
	private LimitedPrimaryExpressionElements pLimitedPrimaryExpression;
	private GraphPatternElements pGraphPattern;
	private PropOfSubjElements pPropOfSubj;
	private SubjPropElements pSubjProp;
	private InstAttrSPVElements pInstAttrSPV;
	private InstAttrPSVElements pInstAttrPSV;
	private SubTypeOfElements pSubTypeOf;
	private ExistentialNegationElements pExistentialNegation;
	private IntervalValueElements pIntervalValue;
	private ExplicitValueElements pExplicitValue;
	private ValueTableElements pValueTable;
	private LiteralValueElements pLiteralValue;
	private ValueRowElements pValueRow;
	private NAMEElements pNAME;
	private NAME_FRAGMENTElements pNAME_FRAGMENT;
	private ID_OR_KEYWORDElements pID_OR_KEYWORD;
	private NUMBERElements pNUMBER;
	private TerminalRule tUNSIGNED_NUMBER;
	private TerminalRule tINT;
	private TerminalRule tEOS;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SadlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ge.research.sadl.Sadl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Top-level element; a model consists of...
	//Model:
	//	modelName=ModelName imports+=Import* elements+=ModelElement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// The baseUri is the namespace of the model and should be of the form
	//// "http://..."; the version is optional.
	//ModelName:
	//	"uri" baseUri=STRING ("alias" alias=NAME)? ("version" version=STRING)? ("(" annType+=("alias" | "note")
	//	annContent+=ContentList ")")* EOS;
	public ModelNameElements getModelNameAccess() {
		return (pModelName != null) ? pModelName : (pModelName = new ModelNameElements());
	}
	
	public ParserRule getModelNameRule() {
		return getModelNameAccess().getRule();
	}

	//// Every import is by either by actual relative URL (other SADL models only) 
	////	or by URI (SADL models and external OWL files); 
	////	an import may have a unique alias (which becomes the "prefix" in compound names)
	////	but this is discouraged in favor of global aliases given with ModelName.
	//Import:
	//	"import" importURI=STRING ("as" alias=NAME)? EOS;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// The various kinds of elements that make up the body of a model.
	//ModelElement: // used to generate the OWL model
	//	Statement | // used to generate the rules in a generic format which can be translated to target system
	//	Rule | // used to generate queries which can be translated to the target system but which are used by SADL/SadlServer only
	//	Query | // used to generate the Test cases, used by SADL/SadlServer only
	//	Test | // temp for testing only
	//	Expr | // used to generate display statements in the output of Tests, etc., used by SADL only
	//	Display | // used to generate explanations of particular triples (if an explanation found), used by SADL only
	//	Explanation;
	public ModelElementElements getModelElementAccess() {
		return (pModelElement != null) ? pModelElement : (pModelElement = new ModelElementElements());
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}

	//// These are the things that translate directly to OWL.
	//Statement:
	//	ClassDeclaration | ComplementOfClass | DisjointClasses | EquivalentConcepts | AllValuesFrom | Cardinality | HasValue
	//	| MaxCardinality | MinCardinality | SomeValuesFrom | EnumeratedAllAndSomeValuesFrom | EnumeratedAllValuesFrom |
	//	DefaultValue | NecessaryAndSufficient | PropertyDeclaration | FunctionalProperty | InverseFunctionalProperty |
	//	InverseProperty | SymmetricalProperty | TransitiveProperty | InstanceDeclarationStatement |
	//	ExistingInstanceAttribution | InstanceDifferentFrom | InstancesAllDifferent | UserDefinedDataType;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//// SADL identifiers may name classes, instances, and properties.
	//ResourceName:
	//	name=NAME ("(" annType+=("alias" | "note") annContent+=ContentList ")")*;
	public ResourceNameElements getResourceNameAccess() {
		return (pResourceName != null) ? pResourceName : (pResourceName = new ResourceNameElements());
	}
	
	public ParserRule getResourceNameRule() {
		return getResourceNameAccess().getRule();
	}

	//ContentList:
	//	annContent+=STRING ("," annContent+=STRING)*;
	public ContentListElements getContentListAccess() {
		return (pContentList != null) ? pContentList : (pContentList = new ContentListElements());
	}
	
	public ParserRule getContentListRule() {
		return getContentListAccess().getRule();
	}

	//// SADL identifiers may also be grouped into lists in some places.
	//ResourceList:
	//	"{" names+=ResourceName ("," names+=ResourceName)* "}";
	public ResourceListElements getResourceListAccess() {
		return (pResourceList != null) ? pResourceList : (pResourceList = new ResourceListElements());
	}
	
	public ParserRule getResourceListRule() {
		return getResourceListAccess().getRule();
	}

	//LiteralList:
	//	"{" literals+=LiteralValue ("," literals+=LiteralValue)* "}";
	public LiteralListElements getLiteralListAccess() {
		return (pLiteralList != null) ? pLiteralList : (pLiteralList = new LiteralListElements());
	}
	
	public ParserRule getLiteralListRule() {
		return getLiteralListAccess().getRule();
	}

	//// References to imported SADL names are qualified by namespaces.
	//ResourceByName:
	//	name=[ResourceName|NAME];
	public ResourceByNameElements getResourceByNameAccess() {
		return (pResourceByName != null) ? pResourceByName : (pResourceByName = new ResourceByNameElements());
	}
	
	public ParserRule getResourceByNameRule() {
		return getResourceByNameAccess().getRule();
	}

	////RecursivePropertyByName :
	////	name=[ResourceName|NAME] (recurse=('*' | '+'))?
	////;    
	//// This is for classes that have already been defined.
	//ExistingResourceList:
	//	"{" names+=(ResourceByName | ResourceBySetOp) ("," names+=(ResourceByName | ResourceBySetOp))* "}";
	public ExistingResourceListElements getExistingResourceListAccess() {
		return (pExistingResourceList != null) ? pExistingResourceList : (pExistingResourceList = new ExistingResourceListElements());
	}
	
	public ParserRule getExistingResourceListRule() {
		return getExistingResourceListAccess().getRule();
	}

	//// In some places, we must allow class names to be referenced and created by set operations.
	//ResourceIdentifier:
	//	ResourceByName | ResourceBySetOp ("(" annType+=("alias" | "note") annContent+=ContentList ")")* |
	//	ResourceByRestriction ("(" annType+=("alias" | "note") annContent+=ContentList ")")*;
	public ResourceIdentifierElements getResourceIdentifierAccess() {
		return (pResourceIdentifier != null) ? pResourceIdentifier : (pResourceIdentifier = new ResourceIdentifierElements());
	}
	
	public ParserRule getResourceIdentifierRule() {
		return getResourceIdentifierAccess().getRule();
	}

	//ResourceBySetOp:
	//	UnionResource | IntersectionResource;
	public ResourceBySetOpElements getResourceBySetOpAccess() {
		return (pResourceBySetOp != null) ? pResourceBySetOp : (pResourceBySetOp = new ResourceBySetOpElements());
	}
	
	public ParserRule getResourceBySetOpRule() {
		return getResourceBySetOpAccess().getRule();
	}

	//ResourceByRestriction:
	//	"(" propName=ResourceByName cond=Condition ")";
	public ResourceByRestrictionElements getResourceByRestrictionAccess() {
		return (pResourceByRestriction != null) ? pResourceByRestriction : (pResourceByRestriction = new ResourceByRestrictionElements());
	}
	
	public ParserRule getResourceByRestrictionRule() {
		return getResourceByRestrictionAccess().getRule();
	}

	//UnionResource:
	//	"{" names+=ResourceIdentifier (op+=("," | "or") names+=ResourceIdentifier)+ "}";
	public UnionResourceElements getUnionResourceAccess() {
		return (pUnionResource != null) ? pUnionResource : (pUnionResource = new UnionResourceElements());
	}
	
	public ParserRule getUnionResourceRule() {
		return getUnionResourceAccess().getRule();
	}

	//IntersectionResource:
	//	"{" names+=ResourceIdentifier (op+="and" names+=ResourceIdentifier)+ "}";
	public IntersectionResourceElements getIntersectionResourceAccess() {
		return (pIntersectionResource != null) ? pIntersectionResource : (pIntersectionResource = new IntersectionResourceElements());
	}
	
	public ParserRule getIntersectionResourceRule() {
		return getIntersectionResourceAccess().getRule();
	}

	//// Classes may be declared in many ways.
	//ClassDeclaration:
	//	className=ResourceName "is" "a" "top-level"? "class" mustBeOneOf=EnumeratedInstances? describedBy+=AddlClassInfo* EOS
	//	| classList=ResourceList "are" "top-level"? "classes" describedBy+=AddlClassInfo* EOS | className=ResourceName "is"
	//	"a" "type" "of" classIdentifier=ResourceIdentifier mustBeOneOf=EnumeratedInstances? describedBy+=AddlClassInfo* EOS |
	//	classList=ResourceList "are" "types" "of" classIdentifier=ResourceIdentifier describedBy+=AddlClassInfo* EOS;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return (pClassDeclaration != null) ? pClassDeclaration : (pClassDeclaration = new ClassDeclarationElements());
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}

	//// Class declarations may also enumerate the class's instances.
	//EnumeratedInstances:
	//	","? "must" "be" "one" "of" instanceList=ResourceList;
	public EnumeratedInstancesElements getEnumeratedInstancesAccess() {
		return (pEnumeratedInstances != null) ? pEnumeratedInstances : (pEnumeratedInstances = new EnumeratedInstancesElements());
	}
	
	public ParserRule getEnumeratedInstancesRule() {
		return getEnumeratedInstancesAccess().getRule();
	}

	//// Class declarations may also describe the class's properties.
	//AddlClassInfo:
	//	","? "described" "by" (propertyByName=ResourceByName | propertyName=ResourceName range=Range) | ","? "described" "by"
	//	propertyByName=ResourceByName restriction=Condition;
	public AddlClassInfoElements getAddlClassInfoAccess() {
		return (pAddlClassInfo != null) ? pAddlClassInfo : (pAddlClassInfo = new AddlClassInfoElements());
	}
	
	public ParserRule getAddlClassInfoRule() {
		return getAddlClassInfoAccess().getRule();
	}

	//// ... a single value ...
	//// ... a List of values ...
	//// ... Lists of values ...
	//// ... values ...
	//Range:
	//	("has" //    ('has'|'with') ('a' single='single' 'value'|'values') 'of' 'type' type=RangeType;
	//	| "with") ("a" single="single" "value" | ("a" list="List" | lists="Lists") "of" "values" | "values") "of" "type"
	//	type=RangeType;
	public RangeElements getRangeAccess() {
		return (pRange != null) ? pRange : (pRange = new RangeElements());
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	////	  | dataType=ResourceName
	//RangeType:
	//	classIdentifier=ResourceIdentifier | dataType=DataType;
	public RangeTypeElements getRangeTypeAccess() {
		return (pRangeType != null) ? pRangeType : (pRangeType = new RangeTypeElements());
	}
	
	public ParserRule getRangeTypeRule() {
		return getRangeTypeAccess().getRule();
	}

	//UserDefinedDataType:
	//	"data" "type" userDefinedDataType=ResourceName "is" restriction=DataTypeRestriction EOS;
	public UserDefinedDataTypeElements getUserDefinedDataTypeAccess() {
		return (pUserDefinedDataType != null) ? pUserDefinedDataType : (pUserDefinedDataType = new UserDefinedDataTypeElements());
	}
	
	public ParserRule getUserDefinedDataTypeRule() {
		return getUserDefinedDataTypeAccess().getRule();
	}

	//DataTypeRestriction:
	//	("a" | "an")? basetype=DataType facets=Facets | "{" basetypes+=DataType (("," | "or") basetypes+=DataType)+ "}";
	public DataTypeRestrictionElements getDataTypeRestrictionAccess() {
		return (pDataTypeRestriction != null) ? pDataTypeRestriction : (pDataTypeRestriction = new DataTypeRestrictionElements());
	}
	
	public ParserRule getDataTypeRestrictionRule() {
		return getDataTypeRestrictionAccess().getRule();
	}

	//Facets:
	//	minexin=("(" | "[") min=NUMBER? "," max=NUMBER? maxexin=("]" | ")") | regex=STRING | "length" (len=NUMBER |
	//	minlen=NUMBER "-" maxlen=NUMBER) | "{" values+=(STRING | NUMBER) (","? values+=(STRING | NUMBER))* "}";
	public FacetsElements getFacetsAccess() {
		return (pFacets != null) ? pFacets : (pFacets = new FacetsElements());
	}
	
	public ParserRule getFacetsRule() {
		return getFacetsAccess().getRule();
	}

	//enum DataType:
	//	string | boolean | decimal | int | long | float | double | duration | dateTime | time | date | gYearMonth | gYear |
	//	gMonthDay | gDay | gMonth | hexBinary | base64Binary | anyURI | data;
	public DataTypeElements getDataTypeAccess() {
		return (unknownRuleDataType != null) ? unknownRuleDataType : (unknownRuleDataType = new DataTypeElements());
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//// These articles can appear before the property name and are indicative of the functionality of the property or
	////	the cardinality of the property on the class
	//AnArticle:
	//	IndefiniteArticle | DefiniteArticle;
	public AnArticleElements getAnArticleAccess() {
		return (pAnArticle != null) ? pAnArticle : (pAnArticle = new AnArticleElements());
	}
	
	public ParserRule getAnArticleRule() {
		return getAnArticleAccess().getRule();
	}

	//IndefiniteArticle:
	//	"A" | "a" | "An" | "an";
	public IndefiniteArticleElements getIndefiniteArticleAccess() {
		return (pIndefiniteArticle != null) ? pIndefiniteArticle : (pIndefiniteArticle = new IndefiniteArticleElements());
	}
	
	public ParserRule getIndefiniteArticleRule() {
		return getIndefiniteArticleAccess().getRule();
	}

	//DefiniteArticle:
	//	"The" | "the";
	public DefiniteArticleElements getDefiniteArticleAccess() {
		return (pDefiniteArticle != null) ? pDefiniteArticle : (pDefiniteArticle = new DefiniteArticleElements());
	}
	
	public ParserRule getDefiniteArticleRule() {
		return getDefiniteArticleAccess().getRule();
	}

	//// Two classes, properties, or individuals are known to be "the same"
	////	-- equivalent sets for classes
	////  -- equivalent properties for properties
	////  -- the same individual for individuals
	//EquivalentConcepts:
	//	class1=ResourceByName "is" "the" "same" "as" class2=ResourceIdentifier EOS;
	public EquivalentConceptsElements getEquivalentConceptsAccess() {
		return (pEquivalentConcepts != null) ? pEquivalentConcepts : (pEquivalentConcepts = new EquivalentConceptsElements());
	}
	
	public ParserRule getEquivalentConceptsRule() {
		return getEquivalentConceptsAccess().getRule();
	}

	//// Two classes are known to be disjoint sets.
	//DisjointClasses:
	//	class1=ResourceByName "and" class2=ResourceIdentifier "are" "disjoint" EOS | classes=ExistingResourceList "are"
	//	"disjoint" EOS;
	public DisjointClassesElements getDisjointClassesAccess() {
		return (pDisjointClasses != null) ? pDisjointClasses : (pDisjointClasses = new DisjointClassesElements());
	}
	
	public ParserRule getDisjointClassesRule() {
		return getDisjointClassesAccess().getRule();
	}

	//// A class is known to be the complement of another class.
	//ComplementOfClass:
	//	class1=ResourceByName "is" "the" "same" "as" "not" class2=ResourceIdentifier EOS;
	public ComplementOfClassElements getComplementOfClassAccess() {
		return (pComplementOfClass != null) ? pComplementOfClass : (pComplementOfClass = new ComplementOfClassElements());
	}
	
	public ParserRule getComplementOfClassRule() {
		return getComplementOfClassAccess().getRule();
	}

	//// These class restrictions have a similar structure, one of two forms:
	////	1) <p> of <C> <cond>, e.g., spouse of Man only has values of type Woman
	////	2) <C> <p> <cond>, e.g, Person spouse has at most 1 value
	//AllValuesFrom:
	//	restricted=PropertyOfClass cond=AllValuesCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
	//	cond=AllValuesCondition EOS;
	public AllValuesFromElements getAllValuesFromAccess() {
		return (pAllValuesFrom != null) ? pAllValuesFrom : (pAllValuesFrom = new AllValuesFromElements());
	}
	
	public ParserRule getAllValuesFromRule() {
		return getAllValuesFromAccess().getRule();
	}

	//SomeValuesFrom:
	//	restricted=PropertyOfClass cond=SomeValuesCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
	//	cond=SomeValuesCondition EOS;
	public SomeValuesFromElements getSomeValuesFromAccess() {
		return (pSomeValuesFrom != null) ? pSomeValuesFrom : (pSomeValuesFrom = new SomeValuesFromElements());
	}
	
	public ParserRule getSomeValuesFromRule() {
		return getSomeValuesFromAccess().getRule();
	}

	//HasValue:
	//	restricted=PropertyOfClass cond=HasValueCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
	//	cond=HasValueCondition EOS;
	public HasValueElements getHasValueAccess() {
		return (pHasValue != null) ? pHasValue : (pHasValue = new HasValueElements());
	}
	
	public ParserRule getHasValueRule() {
		return getHasValueAccess().getRule();
	}

	//Cardinality:
	//	restricted=PropertyOfClass cond=CardCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
	//	cond=CardCondition EOS;
	public CardinalityElements getCardinalityAccess() {
		return (pCardinality != null) ? pCardinality : (pCardinality = new CardinalityElements());
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//MinCardinality:
	//	restricted=PropertyOfClass cond=MinCardCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
	//	cond=MinCardCondition EOS;
	public MinCardinalityElements getMinCardinalityAccess() {
		return (pMinCardinality != null) ? pMinCardinality : (pMinCardinality = new MinCardinalityElements());
	}
	
	public ParserRule getMinCardinalityRule() {
		return getMinCardinalityAccess().getRule();
	}

	//MaxCardinality:
	//	restricted=PropertyOfClass cond=MaxCardCondition EOS | className=ResourceIdentifier propertyName=ResourceByName
	//	cond=MaxCardCondition EOS;
	public MaxCardinalityElements getMaxCardinalityAccess() {
		return (pMaxCardinality != null) ? pMaxCardinality : (pMaxCardinality = new MaxCardinalityElements());
	}
	
	public ParserRule getMaxCardinalityRule() {
		return getMaxCardinalityAccess().getRule();
	}

	//// These are supporting rules for the above class restrictions
	//PropertyOfClass:
	//	propertyName=ResourceByName "of" className=ResourceIdentifier;
	public PropertyOfClassElements getPropertyOfClassAccess() {
		return (pPropertyOfClass != null) ? pPropertyOfClass : (pPropertyOfClass = new PropertyOfClassElements());
	}
	
	public ParserRule getPropertyOfClassRule() {
		return getPropertyOfClassAccess().getRule();
	}

	//AllValuesCondition:
	//	"only" "has" "values" "of" "type" restriction=ResourceIdentifier;
	public AllValuesConditionElements getAllValuesConditionAccess() {
		return (pAllValuesCondition != null) ? pAllValuesCondition : (pAllValuesCondition = new AllValuesConditionElements());
	}
	
	public ParserRule getAllValuesConditionRule() {
		return getAllValuesConditionAccess().getRule();
	}

	//EnumeratedAllValuesFrom:
	//	restricted=PropertyOfClass "can" "only" "be" "one" "of" (enumeration=ExistingResourceList | enumeration=LiteralList)
	//	EOS;
	public EnumeratedAllValuesFromElements getEnumeratedAllValuesFromAccess() {
		return (pEnumeratedAllValuesFrom != null) ? pEnumeratedAllValuesFrom : (pEnumeratedAllValuesFrom = new EnumeratedAllValuesFromElements());
	}
	
	public ParserRule getEnumeratedAllValuesFromRule() {
		return getEnumeratedAllValuesFromAccess().getRule();
	}

	//EnumeratedAllAndSomeValuesFrom:
	//	restricted=PropertyOfClass "must" "be" "one" "of" (enumeration=ExistingResourceList | enumeration=LiteralList) EOS;
	public EnumeratedAllAndSomeValuesFromElements getEnumeratedAllAndSomeValuesFromAccess() {
		return (pEnumeratedAllAndSomeValuesFrom != null) ? pEnumeratedAllAndSomeValuesFrom : (pEnumeratedAllAndSomeValuesFrom = new EnumeratedAllAndSomeValuesFromElements());
	}
	
	public ParserRule getEnumeratedAllAndSomeValuesFromRule() {
		return getEnumeratedAllAndSomeValuesFromAccess().getRule();
	}

	//DefaultValue:
	//	defValueClass=PropertyOfClass "has" ("level" level=NUMBER)? "default" defValue=ExplicitValue EOS;
	public DefaultValueElements getDefaultValueAccess() {
		return (pDefaultValue != null) ? pDefaultValue : (pDefaultValue = new DefaultValueElements());
	}
	
	public ParserRule getDefaultValueRule() {
		return getDefaultValueAccess().getRule();
	}

	//SomeValuesCondition:
	//	("has" | "with") "at" "least" "one" "value" ("of" "type" restriction=ResourceIdentifier | "each" "of" "types"
	//	restriction=ExistingResourceList);
	public SomeValuesConditionElements getSomeValuesConditionAccess() {
		return (pSomeValuesCondition != null) ? pSomeValuesCondition : (pSomeValuesCondition = new SomeValuesConditionElements());
	}
	
	public ParserRule getSomeValuesConditionRule() {
		return getSomeValuesConditionAccess().getRule();
	}

	//HasValueCondition:
	//	"always" ("has" | "with") "value" restriction=ExplicitValue;
	public HasValueConditionElements getHasValueConditionAccess() {
		return (pHasValueCondition != null) ? pHasValueCondition : (pHasValueCondition = new HasValueConditionElements());
	}
	
	public ParserRule getHasValueConditionRule() {
		return getHasValueConditionAccess().getRule();
	}

	//MinCardCondition:
	//	("has" | "with") "at" "least" card=NUMBER ("value" | "values") ("of" "type" classQualifier=ResourceIdentifier)?;
	public MinCardConditionElements getMinCardConditionAccess() {
		return (pMinCardCondition != null) ? pMinCardCondition : (pMinCardCondition = new MinCardConditionElements());
	}
	
	public ParserRule getMinCardConditionRule() {
		return getMinCardConditionAccess().getRule();
	}

	//MaxCardCondition:
	//	("has" | "with") "at" "most" card=NUMBER ("value" | "values") ("of" "type" classQualifier=ResourceIdentifier)?;
	public MaxCardConditionElements getMaxCardConditionAccess() {
		return (pMaxCardCondition != null) ? pMaxCardCondition : (pMaxCardCondition = new MaxCardConditionElements());
	}
	
	public ParserRule getMaxCardConditionRule() {
		return getMaxCardConditionAccess().getRule();
	}

	//CardCondition:
	//	("has" | "with") "exactly" card=NUMBER ("value" | "values") ("of" "type" classQualifier=ResourceIdentifier)?;
	public CardConditionElements getCardConditionAccess() {
		return (pCardCondition != null) ? pCardCondition : (pCardCondition = new CardConditionElements());
	}
	
	public ParserRule getCardConditionRule() {
		return getCardConditionAccess().getRule();
	}

	//// Necessary and sufficient conditions (a sub class is equivalent to a restriction on a superclass).
	//NecessaryAndSufficient:
	//	superClass=TypedBNode "is" article=IndefiniteArticle subClass=ResourceName "only" "if" propertyName+=ResourceByName
	//	cond+=Condition ("and" propertyName+=ResourceByName cond+=Condition)* EOS;
	public NecessaryAndSufficientElements getNecessaryAndSufficientAccess() {
		return (pNecessaryAndSufficient != null) ? pNecessaryAndSufficient : (pNecessaryAndSufficient = new NecessaryAndSufficientElements());
	}
	
	public ParserRule getNecessaryAndSufficientRule() {
		return getNecessaryAndSufficientAccess().getRule();
	}

	//Condition:
	//	AllValuesCondition | SomeValuesCondition | HasValueCondition | MinCardCondition | MaxCardCondition | CardCondition;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//// Properties may be declared in several ways too.
	//// e.g., age describes Person with a single value of type decimal.
	//// e.g., parent describes Person with values of type Person.
	//// e.g., child describes Person with values of type Person.
	//PropertyDeclaration:
	//	propertyName=ResourceName ("is" "a" "type" "of" superPropName=ResourceByName)? addlPropInfo+=AdditionalPropertyInfo+
	//	EOS | article=AnArticle? "relationship" "of" domain=ResourceIdentifier "to" rangeResource=ResourceIdentifier "is"
	//	propertyName=ResourceName EOS | annotationProperty=ResourceName "is" "a" "type" "of" "annotation" EOS;
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return (pPropertyDeclaration != null) ? pPropertyDeclaration : (pPropertyDeclaration = new PropertyDeclarationElements());
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}

	//AdditionalPropertyInfo:
	//	","? "describes" domain=ResourceIdentifier | ","? cond=Condition | ","? range=Range | ","? isfunc=IsFunctional | ","?
	//	isinvfunc=IsInverseFunctional | ","? isSym=IsSymmetrical | ","? isTrans=IsTransitive | ","? isInvOf=IsInverseOf;
	public AdditionalPropertyInfoElements getAdditionalPropertyInfoAccess() {
		return (pAdditionalPropertyInfo != null) ? pAdditionalPropertyInfo : (pAdditionalPropertyInfo = new AdditionalPropertyInfoElements());
	}
	
	public ParserRule getAdditionalPropertyInfoRule() {
		return getAdditionalPropertyInfoAccess().getRule();
	}

	//// Declares an existing property to be functional.
	//FunctionalProperty:
	//	propertyName=ResourceByName IsFunctional EOS;
	public FunctionalPropertyElements getFunctionalPropertyAccess() {
		return (pFunctionalProperty != null) ? pFunctionalProperty : (pFunctionalProperty = new FunctionalPropertyElements());
	}
	
	public ParserRule getFunctionalPropertyRule() {
		return getFunctionalPropertyAccess().getRule();
	}

	//IsFunctional:
	//	"has" "a" "single" "value";
	public IsFunctionalElements getIsFunctionalAccess() {
		return (pIsFunctional != null) ? pIsFunctional : (pIsFunctional = new IsFunctionalElements());
	}
	
	public ParserRule getIsFunctionalRule() {
		return getIsFunctionalAccess().getRule();
	}

	//// Declares an existing property to be inverse functional.
	//InverseFunctionalProperty:
	//	propertyName=ResourceByName IsInverseFunctional EOS;
	public InverseFunctionalPropertyElements getInverseFunctionalPropertyAccess() {
		return (pInverseFunctionalProperty != null) ? pInverseFunctionalProperty : (pInverseFunctionalProperty = new InverseFunctionalPropertyElements());
	}
	
	public ParserRule getInverseFunctionalPropertyRule() {
		return getInverseFunctionalPropertyAccess().getRule();
	}

	//IsInverseFunctional:
	//	"has" "a" "single" "subject";
	public IsInverseFunctionalElements getIsInverseFunctionalAccess() {
		return (pIsInverseFunctional != null) ? pIsInverseFunctional : (pIsInverseFunctional = new IsInverseFunctionalElements());
	}
	
	public ParserRule getIsInverseFunctionalRule() {
		return getIsInverseFunctionalAccess().getRule();
	}

	//// Declares an existing property to be symmetric
	//SymmetricalProperty:
	//	propertyName=ResourceByName IsSymmetrical EOS;
	public SymmetricalPropertyElements getSymmetricalPropertyAccess() {
		return (pSymmetricalProperty != null) ? pSymmetricalProperty : (pSymmetricalProperty = new SymmetricalPropertyElements());
	}
	
	public ParserRule getSymmetricalPropertyRule() {
		return getSymmetricalPropertyAccess().getRule();
	}

	//IsSymmetrical:
	//	"is" "symmetrical";
	public IsSymmetricalElements getIsSymmetricalAccess() {
		return (pIsSymmetrical != null) ? pIsSymmetrical : (pIsSymmetrical = new IsSymmetricalElements());
	}
	
	public ParserRule getIsSymmetricalRule() {
		return getIsSymmetricalAccess().getRule();
	}

	//// Declares an existing property to be transitive.
	//TransitiveProperty:
	//	propertyName=ResourceByName IsTransitive EOS;
	public TransitivePropertyElements getTransitivePropertyAccess() {
		return (pTransitiveProperty != null) ? pTransitiveProperty : (pTransitiveProperty = new TransitivePropertyElements());
	}
	
	public ParserRule getTransitivePropertyRule() {
		return getTransitivePropertyAccess().getRule();
	}

	//IsTransitive:
	//	"is" "transitive";
	public IsTransitiveElements getIsTransitiveAccess() {
		return (pIsTransitive != null) ? pIsTransitive : (pIsTransitive = new IsTransitiveElements());
	}
	
	public ParserRule getIsTransitiveRule() {
		return getIsTransitiveAccess().getRule();
	}

	//// Declares two existing properties to be inverses of each other.
	//InverseProperty:
	//	propertyName1=ResourceByName invOf=IsInverseOf EOS;
	public InversePropertyElements getInversePropertyAccess() {
		return (pInverseProperty != null) ? pInverseProperty : (pInverseProperty = new InversePropertyElements());
	}
	
	public ParserRule getInversePropertyRule() {
		return getInversePropertyAccess().getRule();
	}

	//IsInverseOf:
	//	"is" "the" "inverse" "of" propertyName2=ResourceByName;
	public IsInverseOfElements getIsInverseOfAccess() {
		return (pIsInverseOf != null) ? pIsInverseOf : (pIsInverseOf = new IsInverseOfElements());
	}
	
	public ParserRule getIsInverseOfRule() {
		return getIsInverseOfAccess().getRule();
	}

	//// This is the general phrase specifying a type: "a <Class>" which is used
	//// both in data declaration and in patterns for Tests, Queries, and Rules.
	//// e.g., a Person
	//TypedBNode:
	//	article=IndefiniteArticle classIdentifier=ResourceIdentifier | article="any" classIdentifier=ResourceIdentifier;
	public TypedBNodeElements getTypedBNodeAccess() {
		return (pTypedBNode != null) ? pTypedBNode : (pTypedBNode = new TypedBNodeElements());
	}
	
	public ParserRule getTypedBNodeRule() {
		return getTypedBNodeAccess().getRule();
	}

	//// Allows a statement to declare an instance.
	//InstanceDeclarationStatement:
	//	InstanceDeclaration EOS;
	public InstanceDeclarationStatementElements getInstanceDeclarationStatementAccess() {
		return (pInstanceDeclarationStatement != null) ? pInstanceDeclarationStatement : (pInstanceDeclarationStatement = new InstanceDeclarationStatementElements());
	}
	
	public ParserRule getInstanceDeclarationStatementRule() {
		return getInstanceDeclarationStatementAccess().getRule();
	}

	//// Declares an instance by either 1 & 2) giving its name and type and
	//// optionally adding attributes and values or 3) creating a blank node
	//// by giving it a type and at least one attribute and value.  This rule
	//// is reused in other places so it can't contain an EOS token.
	//// e.g., a Person George with age 23, with spouse Martha.
	//// e.g., a Birth with child George, with mother Mary, with location (a Location with latitude 38.18611).
	//InstanceDeclaration:
	//	typeDecl=TypeDeclaration addlInfoItems+=PropValPartialTriple* // e.g., George is a Person, has age 23, has spouse Martha.
	//	| article=IndefiniteArticle className=ResourceByName instanceName=ResourceName? addlInfoItems+=PropValPartialTriple*;
	public InstanceDeclarationElements getInstanceDeclarationAccess() {
		return (pInstanceDeclaration != null) ? pInstanceDeclaration : (pInstanceDeclaration = new InstanceDeclarationElements());
	}
	
	public ParserRule getInstanceDeclarationRule() {
		return getInstanceDeclarationAccess().getRule();
	}

	//// Issue: type declaration and variable declaration conflict:
	////	George is a Person	-- defines new instance of Person (this can be a complete statement)
	////	x is a Person		-- says that for variable has constraint x <rdf:type> <Person> (this is never a complete statement)
	//TypeDeclaration:
	//	instName=ResourceName "is" type=TypedBNode;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return (pTypeDeclaration != null) ? pTypeDeclaration : (pTypeDeclaration = new TypeDeclarationElements());
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//// e.g., George is a Person.
	////		 x is Person
	//// Two instances are known to not be the same instance.
	//InstanceDifferentFrom:
	//	instName1=ResourceByName "is" "not" "the" "same" "as" instName2=ResourceByName EOS;
	public InstanceDifferentFromElements getInstanceDifferentFromAccess() {
		return (pInstanceDifferentFrom != null) ? pInstanceDifferentFrom : (pInstanceDifferentFrom = new InstanceDifferentFromElements());
	}
	
	public ParserRule getInstanceDifferentFromRule() {
		return getInstanceDifferentFromAccess().getRule();
	}

	//InstancesAllDifferent:
	//	instances=ExistingResourceList "are" "not" "the" "same" EOS;
	public InstancesAllDifferentElements getInstancesAllDifferentAccess() {
		return (pInstancesAllDifferent != null) ? pInstancesAllDifferent : (pInstancesAllDifferent = new InstancesAllDifferentElements());
	}
	
	public ParserRule getInstancesAllDifferentRule() {
		return getInstancesAllDifferentAccess().getRule();
	}

	//// This is the form for declaring instance data for an existing instance.
	//// e.g., 25 is the age of the spouse of Martha.
	//ExistingInstanceAttribution:
	//	subj=ResourceByName addlInfoItems+=PropValPartialTriple+ EOS // e.g., George has residence (a Location with latitude -76.1, with longitude 38.186, with description "Mount Vernon").
	//	// e.g., The age of the spouse of Martha is 25 .
	//	| pOfS=OfPatternReturningValues "is" obj=Object EOS | obj=ExplicitValue "is" pOfS=OfPatternReturningValues // leading object isn't allowed to be an InstanceDeclaration (non-LL)
	//	EOS;
	public ExistingInstanceAttributionElements getExistingInstanceAttributionAccess() {
		return (pExistingInstanceAttribution != null) ? pExistingInstanceAttribution : (pExistingInstanceAttribution = new ExistingInstanceAttributionElements());
	}
	
	public ParserRule getExistingInstanceAttributionRule() {
		return getExistingInstanceAttributionAccess().getRule();
	}

	//// The object (value) of a triple can be a LiteralValue (DatatypeProperty) or an ResourceByName (ObjectProperty)
	//Object:
	//	val=(LiteralValue | ResourceByName | InstanceDeclaration);
	public ObjectElements getObjectAccess() {
		return (pObject != null) ? pObject : (pObject = new ObjectElements());
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//// This pattern is used in instance data declarations.
	//PropValPartialTriple:
	//	","? ("has" | "with")? propertyName=ResourceByName (objectValue=ExplicitValue | "("
	//	objectValueBNode=InstanceDeclaration ")");
	public PropValPartialTripleElements getPropValPartialTripleAccess() {
		return (pPropValPartialTriple != null) ? pPropValPartialTriple : (pPropValPartialTriple = new PropValPartialTripleElements());
	}
	
	public ParserRule getPropValPartialTripleRule() {
		return getPropValPartialTripleAccess().getRule();
	}

	//// | objectInstanceList=ResourceList  // this would allow a list of object values
	/// ********************************************************************************************************************* /
	/// *      The rest of the rules in this file are for defining patterns in Tests, Queries, and Rules                    * /
	/// ********************************************************************************************************************* / // This phrase identifies a graph pattern pinned to a point (the subject, at the end of the phrase) and identified by edges (properties)
	////	The whole phrase can be thought of as as expression selecting all nodes in the graph from which once can trace "backwards" along
	////	the specified edges to arrive at the subject node. All properties except the first in the phrase must be ObjectProperty names. If
	////	the first is an ObjectProperty the value(s) selected with be instances; if the first is a DatatypeProperty the value(s) will be
	////	literals.
	//OfPatternReturningValues:
	//	ofphrs+=OfPhrase+ // e.g., latitude of location of NYC
	//	// e.g., the age of a friend of George
	//	// e.g., the age of a father of a Person
	//	subject=ResourceByName | type=TypedBNode;
	public OfPatternReturningValuesElements getOfPatternReturningValuesAccess() {
		return (pOfPatternReturningValues != null) ? pOfPatternReturningValues : (pOfPatternReturningValues = new OfPatternReturningValuesElements());
	}
	
	public ParserRule getOfPatternReturningValuesRule() {
		return getOfPatternReturningValuesAccess().getRule();
	}

	//// This is a more complex qualifier
	//WithChain: // e.g., with friend with spouse
	//	wps+=WithPhrase+ | "(" wps+=WithPhrase+ ")";
	public WithChainElements getWithChainAccess() {
		return (pWithChain != null) ? pWithChain : (pWithChain = new WithChainElements());
	}
	
	public ParserRule getWithChainRule() {
		return getWithChainAccess().getRule();
	}

	//// This is a "forward" or has|with phrase
	//WithPhrase: // e.g., , has age 23
	//// e.g., , with spouse Martha
	//// e.g., , with friend with spouse with age 23
	//	","? ("has" | "with") propertyName=ResourceByName value=ExplicitValue | ","? ("has" | "with")
	//	propertyName=ResourceByName value=IntervalValue | ","? ("has" | "with") propertyName=ResourceByName
	//	value=(EmbeddedInstanceDeclaration | WithPhrase | LimitedExpression);
	public WithPhraseElements getWithPhraseAccess() {
		return (pWithPhrase != null) ? pWithPhrase : (pWithPhrase = new WithPhraseElements());
	}
	
	public ParserRule getWithPhraseRule() {
		return getWithPhraseAccess().getRule();
	}

	//EmbeddedInstanceDeclaration:
	//	"(" InstanceDeclaration ")";
	public EmbeddedInstanceDeclarationElements getEmbeddedInstanceDeclarationAccess() {
		return (pEmbeddedInstanceDeclaration != null) ? pEmbeddedInstanceDeclaration : (pEmbeddedInstanceDeclaration = new EmbeddedInstanceDeclarationElements());
	}
	
	public ParserRule getEmbeddedInstanceDeclarationRule() {
		return getEmbeddedInstanceDeclarationAccess().getRule();
	}

	//// This is a phrase which returns a set of values like an OfPatternReturningValues except instead of being pinned to a single
	////	specified subject the subject is all of the instances returned by a WithPatternReturningInstances
	//MergedTriples:
	//	ops+=OfPhrase* pivot=TypedBNode wcs+=WithChain*;
	public MergedTriplesElements getMergedTriplesAccess() {
		return (pMergedTriples != null) ? pMergedTriples : (pMergedTriples = new MergedTriplesElements());
	}
	
	public ParserRule getMergedTriplesRule() {
		return getMergedTriplesAccess().getRule();
	}

	//// e.g., the age of the friend of a Person with spouse with age 21
	//OfPhrase:
	//	article=AnArticle? propertyName=ResourceByName "of";
	public OfPhraseElements getOfPhraseAccess() {
		return (pOfPhrase != null) ? pOfPhrase : (pOfPhrase = new OfPhraseElements());
	}
	
	public ParserRule getOfPhraseRule() {
		return getOfPhraseAccess().getRule();
	}

	//VariableList:
	//	names+=ResourceName (","? names+=ResourceName)*;
	public VariableListElements getVariableListAccess() {
		return (pVariableList != null) ? pVariableList : (pVariableList = new VariableListElements());
	}
	
	public ParserRule getVariableListRule() {
		return getVariableListAccess().getRule();
	}

	//// The Rule statement
	//Rule: //	('Rule' name=ID)|(name=ID 'Rule') (':')? ('given' givens=ElementSet)? ('if' ifs=ElementSet)? 'then' thens=ElementSet;
	//	"Rule" name=NAME ":"? ("given" givens=ElementSet?)? ("if" ifs=ElementSet?)? "then" thens=ElementSet EOS;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	////// e.g., Rule AreaOfCircle: given x is a Circle then area of x is radius of x ^ 2 * PI.
	////// 		 Rule UncleRule: if w is brother of x and x is parent of y then w is uncle of y.
	//////		 Rule UncleRule: if x has brother y and x has child z then y is uncle of z.
	//// The Query statement has two forms: 1) explicit "select..." as in SPARQL and 2) implied select using patterns that return one implied variaable
	////	The "select" can be ommitted from the first form.
	//Query:
	//	"Ask:" expr=Expression EOS;
	public QueryElements getQueryAccess() {
		return (pQuery != null) ? pQuery : (pQuery = new QueryElements());
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//// The Test statement
	//Test:
	//	"Test:" expr=Expression EOS;
	public TestElements getTestAccess() {
		return (pTest != null) ? pTest : (pTest = new TestElements());
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	//// The Expr statement
	//Expr:
	//	"Expr:" expr=Expression EOS;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//Display:
	//	"Print:" (displayString=STRING EOS | model="Deductions" EOS | model="Model" EOS);
	public DisplayElements getDisplayAccess() {
		return (pDisplay != null) ? pDisplay : (pDisplay = new DisplayElements());
	}
	
	public ParserRule getDisplayRule() {
		return getDisplayAccess().getRule();
	}

	//Explanation:
	//	"Explain:" (expr=InstanceDeclaration EOS | expr=ExistingInstanceAttribution | expr=Expression EOS | "Rule"
	//	rulename=NAME EOS);
	public ExplanationElements getExplanationAccess() {
		return (pExplanation != null) ? pExplanation : (pExplanation = new ExplanationElements());
	}
	
	public ParserRule getExplanationRule() {
		return getExplanationAccess().getRule();
	}

	////// The set of elements used in a Rule block
	//ElementSet:
	//	elements+=Expression (","? elements+=Expression)*;
	public ElementSetElements getElementSetAccess() {
		return (pElementSet != null) ? pElementSet : (pElementSet = new ElementSetElements());
	}
	
	public ParserRule getElementSetRule() {
		return getElementSetAccess().getRule();
	}

	//SelectExpression:
	//	"select" distinct="distinct"? (allVars="*" | varList=VariableList) "where" expr=OrExpression (orderby="order by"
	//	orderList=OrderList)?;
	public SelectExpressionElements getSelectExpressionAccess() {
		return (pSelectExpression != null) ? pSelectExpression : (pSelectExpression = new SelectExpressionElements());
	}
	
	public ParserRule getSelectExpressionRule() {
		return getSelectExpressionAccess().getRule();
	}

	//ConstructExpression:
	//	"construct" subj=ResourceName pred=ResourceName obj=ResourceName "where" expr=OrExpression;
	public ConstructExpressionElements getConstructExpressionAccess() {
		return (pConstructExpression != null) ? pConstructExpression : (pConstructExpression = new ConstructExpressionElements());
	}
	
	public ParserRule getConstructExpressionRule() {
		return getConstructExpressionAccess().getRule();
	}

	//AskQueryExpression:
	//	"ask" "where" expr=OrExpression;
	public AskQueryExpressionElements getAskQueryExpressionAccess() {
		return (pAskQueryExpression != null) ? pAskQueryExpression : (pAskQueryExpression = new AskQueryExpressionElements());
	}
	
	public ParserRule getAskQueryExpressionRule() {
		return getAskQueryExpressionAccess().getRule();
	}

	//OrderList:
	//	orderList+=OrderElement (","? orderList+=OrderElement)*;
	public OrderListElements getOrderListAccess() {
		return (pOrderList != null) ? pOrderList : (pOrderList = new OrderListElements());
	}
	
	public ParserRule getOrderListRule() {
		return getOrderListAccess().getRule();
	}

	//OrderElement:
	//	order=("asc" | "desc")? name=ResourceName;
	public OrderElementElements getOrderElementAccess() {
		return (pOrderElement != null) ? pOrderElement : (pOrderElement = new OrderElementElements());
	}
	
	public ParserRule getOrderElementRule() {
		return getOrderElementAccess().getRule();
	}

	//Expression:
	//	SelectExpression | ConstructExpression | AskQueryExpression | OrExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//OrExpression returns Expression:
	//	AndExpression ({JunctionExpression.left=current} op=("||" | "or") right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	RelationalExpression ({JunctionExpression.left=current} op=("&&" | "and") right=RelationalExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	AdditiveExpression ({BinaryOpExpression.left=current} op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=")
	//	right=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({BinaryOpExpression.left=current} op=("+" | "-") right=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	UnaryOrPrimaryExpression ({BinaryOpExpression.left=current} op=("*" | "/" | "^" | "%")
	//	right=UnaryOrPrimaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//NotOnly:
	//	"not" "only";
	public NotOnlyElements getNotOnlyAccess() {
		return (pNotOnly != null) ? pNotOnly : (pNotOnly = new NotOnlyElements());
	}
	
	public ParserRule getNotOnlyRule() {
		return getNotOnlyAccess().getRule();
	}

	//UnaryOrPrimaryExpression returns Expression:
	//	{UnaryOpExpression} op=("!" | "not" | "only" | NotOnly | "-") expr=PrimaryExpression | PrimaryExpression;
	public UnaryOrPrimaryExpressionElements getUnaryOrPrimaryExpressionAccess() {
		return (pUnaryOrPrimaryExpression != null) ? pUnaryOrPrimaryExpression : (pUnaryOrPrimaryExpression = new UnaryOrPrimaryExpressionElements());
	}
	
	public ParserRule getUnaryOrPrimaryExpressionRule() {
		return getUnaryOrPrimaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	"(" expr=Expression // an expression in parentheses
	//	")" | func=ID "(" (args+=Expression ("," args+=Expression)*)? // built-in calls
	//	")" | gp= // a graph pattern
	//	GraphPattern | ivalue= // an one-sided interval value
	//	IntervalValue | value= // an explicit value
	//	ExplicitValue | valueTable= // a table of values (one or more rows of one or more columns)
	//	ValueTable;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//LimitedExpression returns Expression:
	//	LimitedOrExpression;
	public LimitedExpressionElements getLimitedExpressionAccess() {
		return (pLimitedExpression != null) ? pLimitedExpression : (pLimitedExpression = new LimitedExpressionElements());
	}
	
	public ParserRule getLimitedExpressionRule() {
		return getLimitedExpressionAccess().getRule();
	}

	//LimitedOrExpression returns Expression:
	//	LimitedAndExpression ({JunctionExpression.left=current} op=("||" | "or") right=LimitedAndExpression)*;
	public LimitedOrExpressionElements getLimitedOrExpressionAccess() {
		return (pLimitedOrExpression != null) ? pLimitedOrExpression : (pLimitedOrExpression = new LimitedOrExpressionElements());
	}
	
	public ParserRule getLimitedOrExpressionRule() {
		return getLimitedOrExpressionAccess().getRule();
	}

	//LimitedAndExpression returns Expression:
	//	LimitedRelationalExpression ({JunctionExpression.left=current} op=("&&" | "and") right=LimitedRelationalExpression)*;
	public LimitedAndExpressionElements getLimitedAndExpressionAccess() {
		return (pLimitedAndExpression != null) ? pLimitedAndExpression : (pLimitedAndExpression = new LimitedAndExpressionElements());
	}
	
	public ParserRule getLimitedAndExpressionRule() {
		return getLimitedAndExpressionAccess().getRule();
	}

	//LimitedRelationalExpression returns Expression:
	//	LimitedAdditiveExpression ({BinaryOpExpression.left=current} op=("=" | "==" | "is" | "!=" | "<" | "<=" | ">" | ">=")
	//	right=LimitedAdditiveExpression)*;
	public LimitedRelationalExpressionElements getLimitedRelationalExpressionAccess() {
		return (pLimitedRelationalExpression != null) ? pLimitedRelationalExpression : (pLimitedRelationalExpression = new LimitedRelationalExpressionElements());
	}
	
	public ParserRule getLimitedRelationalExpressionRule() {
		return getLimitedRelationalExpressionAccess().getRule();
	}

	//LimitedAdditiveExpression returns Expression:
	//	LimitedMultiplicativeExpression ({BinaryOpExpression.left=current} op=("+" | "-")
	//	right=LimitedMultiplicativeExpression)*;
	public LimitedAdditiveExpressionElements getLimitedAdditiveExpressionAccess() {
		return (pLimitedAdditiveExpression != null) ? pLimitedAdditiveExpression : (pLimitedAdditiveExpression = new LimitedAdditiveExpressionElements());
	}
	
	public ParserRule getLimitedAdditiveExpressionRule() {
		return getLimitedAdditiveExpressionAccess().getRule();
	}

	//LimitedMultiplicativeExpression returns Expression:
	//	LimitedUnaryOrPrimaryExpression ({BinaryOpExpression.left=current} op=("*" | "/" | "^" | "%")
	//	right=LimitedUnaryOrPrimaryExpression)*;
	public LimitedMultiplicativeExpressionElements getLimitedMultiplicativeExpressionAccess() {
		return (pLimitedMultiplicativeExpression != null) ? pLimitedMultiplicativeExpression : (pLimitedMultiplicativeExpression = new LimitedMultiplicativeExpressionElements());
	}
	
	public ParserRule getLimitedMultiplicativeExpressionRule() {
		return getLimitedMultiplicativeExpressionAccess().getRule();
	}

	//LimitedUnaryOrPrimaryExpression returns Expression:
	//	{UnaryOpExpression} op=("!" | "-") expr=LimitedPrimaryExpression | LimitedPrimaryExpression;
	public LimitedUnaryOrPrimaryExpressionElements getLimitedUnaryOrPrimaryExpressionAccess() {
		return (pLimitedUnaryOrPrimaryExpression != null) ? pLimitedUnaryOrPrimaryExpression : (pLimitedUnaryOrPrimaryExpression = new LimitedUnaryOrPrimaryExpressionElements());
	}
	
	public ParserRule getLimitedUnaryOrPrimaryExpressionRule() {
		return getLimitedUnaryOrPrimaryExpressionAccess().getRule();
	}

	//LimitedPrimaryExpression returns Expression:
	//	"(" expr=Expression // an expression in parentheses
	//	")" | func=ID "(" (args+=Expression ("," args+=Expression)*)? // built-in calls
	//	")" | ivalue= // an one-sided interval value
	//	IntervalValue | value= // an explicit value
	//	ExplicitValue | valueTable= // a table of values (one or more rows of one or more columns)
	//	ValueTable;
	public LimitedPrimaryExpressionElements getLimitedPrimaryExpressionAccess() {
		return (pLimitedPrimaryExpression != null) ? pLimitedPrimaryExpression : (pLimitedPrimaryExpression = new LimitedPrimaryExpressionElements());
	}
	
	public ParserRule getLimitedPrimaryExpressionRule() {
		return getLimitedPrimaryExpressionAccess().getRule();
	}

	//GraphPattern:
	//	PropOfSubj | SubjProp | InstAttrSPV | InstAttrPSV | MergedTriples | SubTypeOf | ExistentialNegation;
	public GraphPatternElements getGraphPatternAccess() {
		return (pGraphPattern != null) ? pGraphPattern : (pGraphPattern = new GraphPatternElements());
	}
	
	public ParserRule getGraphPatternRule() {
		return getGraphPatternAccess().getRule();
	}

	//PropOfSubj:
	//	ofPhr+=OfPhrase+ subj=ResourceByName;
	public PropOfSubjElements getPropOfSubjAccess() {
		return (pPropOfSubj != null) ? pPropOfSubj : (pPropOfSubj = new PropOfSubjElements());
	}
	
	public ParserRule getPropOfSubjRule() {
		return getPropOfSubjAccess().getRule();
	}

	//SubjProp:
	//	subj=ResourceByName hwPhr+=WithPhrase+;
	public SubjPropElements getSubjPropAccess() {
		return (pSubjProp != null) ? pSubjProp : (pSubjProp = new SubjPropElements());
	}
	
	public ParserRule getSubjPropRule() {
		return getSubjPropAccess().getRule();
	}

	//InstAttrSPV:
	//	subj=ResourceByName ("has" | "with")? props+=ResourceByName vals+=AdditiveExpression (","? ("has" | "with")
	//	props+=ResourceByName vals+=AdditiveExpression)*;
	public InstAttrSPVElements getInstAttrSPVAccess() {
		return (pInstAttrSPV != null) ? pInstAttrSPV : (pInstAttrSPV = new InstAttrSPVElements());
	}
	
	public ParserRule getInstAttrSPVRule() {
		return getInstAttrSPVAccess().getRule();
	}

	//InstAttrPSV:
	//	prop=PropOfSubj "is" val=ExplicitValue;
	public InstAttrPSVElements getInstAttrPSVAccess() {
		return (pInstAttrPSV != null) ? pInstAttrPSV : (pInstAttrPSV = new InstAttrPSVElements());
	}
	
	public ParserRule getInstAttrPSVRule() {
		return getInstAttrPSVAccess().getRule();
	}

	//SubTypeOf:
	//	subclass=ResourceByName "is" "a" "type" "of" superclass=ResourceByName;
	public SubTypeOfElements getSubTypeOfAccess() {
		return (pSubTypeOf != null) ? pSubTypeOf : (pSubTypeOf = new SubTypeOfElements());
	}
	
	public ParserRule getSubTypeOfRule() {
		return getSubTypeOfAccess().getRule();
	}

	//ExistentialNegation:
	//	"there" "is" "no" varList=VariableList "such" "that" quantified=PrimaryExpression;
	public ExistentialNegationElements getExistentialNegationAccess() {
		return (pExistentialNegation != null) ? pExistentialNegation : (pExistentialNegation = new ExistentialNegationElements());
	}
	
	public ParserRule getExistentialNegationRule() {
		return getExistentialNegationAccess().getRule();
	}

	//IntervalValue:
	//	op=("==" | "<" | "<=" | ">" | ">=") expr=AdditiveExpression;
	public IntervalValueElements getIntervalValueAccess() {
		return (pIntervalValue != null) ? pIntervalValue : (pIntervalValue = new IntervalValueElements());
	}
	
	public ParserRule getIntervalValueRule() {
		return getIntervalValueAccess().getRule();
	}

	//ExplicitValue:
	//	instName= // e.g., George
	//	ResourceByName | litValue= // e.g., 38.186111
	//	LiteralValue | valueList="[" row=ValueRow "]" | term= // PI
	//	"PI" | term= // known
	//	"known";
	public ExplicitValueElements getExplicitValueAccess() {
		return (pExplicitValue != null) ? pExplicitValue : (pExplicitValue = new ExplicitValueElements());
	}
	
	public ParserRule getExplicitValueRule() {
		return getExplicitValueAccess().getRule();
	}

	//// e.g., {[George, 23, "Purple", 38.186111], [Martha, 24, "Pink", 45.203]}
	//ValueTable: //	 	row=ValueRow
	////		'[' row=ValueRow ']'
	//// e.g., [George, 23, "Purple", 38.186111]
	////	|	
	//	"{" "[" rows+=ValueRow "]" (","? "[" rows+=ValueRow "]")* "}";
	public ValueTableElements getValueTableAccess() {
		return (pValueTable != null) ? pValueTable : (pValueTable = new ValueTableElements());
	}
	
	public ParserRule getValueTableRule() {
		return getValueTableAccess().getRule();
	}

	//LiteralValue:
	//	literalNumber=NUMBER | literalString=STRING | literalBoolean=("true" | "false");
	public LiteralValueElements getLiteralValueAccess() {
		return (pLiteralValue != null) ? pLiteralValue : (pLiteralValue = new LiteralValueElements());
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}

	//// e.g., George, 23, "Purple", 38.186111
	//ValueRow:
	//	explicitValues+=ExplicitValue ("," explicitValues+=ExplicitValue)*;
	public ValueRowElements getValueRowAccess() {
		return (pValueRow != null) ? pValueRow : (pValueRow = new ValueRowElements());
	}
	
	public ParserRule getValueRowRule() {
		return getValueRowAccess().getRule();
	}

	//// NAME should match an optional namespace followed by a local name (separated
	//// from the namespace by a colon character).  We also need to accept legal URI
	//// fragments as local names.  In particular, we need names like X.509 to work.
	//NAME hidden():
	//	ID (":" ID)? (("-" | "." | "~") NAME_FRAGMENT? | "%"? NAME_FRAGMENT)*;
	public NAMEElements getNAMEAccess() {
		return (pNAME != null) ? pNAME : (pNAME = new NAMEElements());
	}
	
	public ParserRule getNAMERule() {
		return getNAMEAccess().getRule();
	}

	//NAME_FRAGMENT hidden():
	//	ID_OR_KEYWORD | UNSIGNED_NUMBER ID_OR_KEYWORD?;
	public NAME_FRAGMENTElements getNAME_FRAGMENTAccess() {
		return (pNAME_FRAGMENT != null) ? pNAME_FRAGMENT : (pNAME_FRAGMENT = new NAME_FRAGMENTElements());
	}
	
	public ParserRule getNAME_FRAGMENTRule() {
		return getNAME_FRAGMENTAccess().getRule();
	}

	//ID_OR_KEYWORD hidden():
	//	"a" | "A" | "is" | "are" | / * list allowed name-parts here| * / ID;
	public ID_OR_KEYWORDElements getID_OR_KEYWORDAccess() {
		return (pID_OR_KEYWORD != null) ? pID_OR_KEYWORD : (pID_OR_KEYWORD = new ID_OR_KEYWORDElements());
	}
	
	public ParserRule getID_OR_KEYWORDRule() {
		return getID_OR_KEYWORDAccess().getRule();
	}

	//// NUMBER matches both integral and floating point numbers.
	//NUMBER hidden():
	//	"-"? UNSIGNED_NUMBER;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//terminal UNSIGNED_NUMBER:
	//	"0".."9"+ | "0".."9"+ "." "0".."9"* (("e" | "E") ("+" | "-")? "0".."9"+)? | "." "0".."9"+ (("e" | "E") ("+" | "-")?
	//	"0".."9"+)? | "0".."9"+ ("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getUNSIGNED_NUMBERRule() {
		return (tUNSIGNED_NUMBER != null) ? tUNSIGNED_NUMBER : (tUNSIGNED_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNSIGNED_NUMBER"));
	} 

	//// INT conflicts with NUMBER so we have to disable it.
	//terminal INT returns ecore::EInt:
	//	"this has been disabled";
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//// EOS matches one whitespace character or EOF after the period in order to
	//// disambiguate the end of sentence period from periods in names.
	//terminal EOS:
	//	"." (" " | "\t" | "\r" | "\n" | EOF);
	public TerminalRule getEOSRule() {
		return (tEOS != null) ? tEOS : (tEOS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EOS"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
