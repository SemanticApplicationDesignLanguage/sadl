/************************************************************************
 * Copyright 2007-2011 - General Electric Company, All Rights Reserved
 *
 * Project: SADL
 *
 * Description: The Semantic Application Design Language (SADL) is a
 * language for building semantic models and expressing rules that
 * capture additional domain knowledge. The SADL-IDE (integrated
 * development environment) is a set of Eclipse plug-ins that
 * support the editing and testing of semantic models using the
 * SADL language.
 *
 * This software is distributed "AS-IS" without ANY WARRANTIES
 * and licensed under the Eclipse Public License - v 1.0
 * which is available at http://www.eclipse.org/org/documents/epl-v10.php
 *
 ***********************************************************************/
grammar com.ge.research.sadl.Sadl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sadl "http://www.ge.com/research/sadl/Sadl"

// Top-level element; a model consists of...
Model :
    modelName=ModelName
    (imports+=Import)*
    (elements+=ModelElement)*;

// The baseUri is the namespace of the model and should be of the form
// "http://..."; the version is optional.
ModelName :
    'uri' baseUri=STRING ('alias' alias=NAME)? ('version' version=STRING)? 
    	('(' annType+=('alias'|'note') annContent+=ContentList ')')* EOS;

// Every import is by either by actual relative URL (other SADL models only) 
//	or by URI (SADL models and external OWL files); 
//	an import may have a unique alias (which becomes the "prefix" in compound names)
//	but this is discouraged in favor of global aliases given with ModelName.
Import :
    'import' importURI=STRING ('as' alias=NAME)? EOS;

// The various kinds of elements that make up the body of a model.
ModelElement :
    	Statement   // used to generate the OWL model
    | 	Rule        // used to generate the rules in a generic format which can be translated to target system
    |	Query       // used to generate queries which can be translated to the target system but which are used by SADL/SadlServer only
    |	Test        // used to generate the Test cases, used by SADL/SadlServer only
    |   Expr        // temp for testing only
	| 	Display     // used to generate display statements in the output of Tests, etc., used by SADL only
    |	Explanation // used to generate explanations of particular triples (if an explanation found), used by SADL only
    ;

// These are the things that translate directly to OWL.
Statement :
        ClassDeclaration
    |   ComplementOfClass
    |   DisjointClasses
    |   EquivalentConcepts
    |   AllValuesFrom
    |   Cardinality
    |   HasValue
    |   MaxCardinality
    |   MinCardinality
    |   SomeValuesFrom
    |   EnumeratedAllAndSomeValuesFrom
    |   EnumeratedAllValuesFrom
    |   DefaultValue
    |   NecessaryAndSufficient
    |   PropertyDeclaration
    |   FunctionalProperty
    |   InverseFunctionalProperty
    |   InverseProperty
    |   SymmetricalProperty
    |   TransitiveProperty
    |   InstanceDeclarationStatement
    |   ExistingInstanceAttribution
    |   InstanceDifferentFrom
    |   InstancesAllDifferent
    |	UserDefinedDataType
    ;

// SADL identifiers may name classes, instances, and properties.
ResourceName :
    name=NAME ('(' annType+=('alias'|'note') annContent+=ContentList ')')*;

ContentList :
    annContent+=STRING (',' annContent+=STRING)*;

// SADL identifiers may also be grouped into lists in some places.
ResourceList :
    '{' names+=ResourceName (',' names+=ResourceName)* '}';

LiteralList :
	'{' literals+=LiteralValue (',' literals+=LiteralValue)* '}';

// References to imported SADL names are qualified by namespaces.
ResourceByName :
    name=[ResourceName|NAME];
    
//RecursivePropertyByName :
//	name=[ResourceName|NAME] (recurse=('*' | '+'))?
//;    

// This is for classes that have already been defined.
ExistingResourceList :
    '{' names+=(ResourceByName|ResourceBySetOp) (',' names+=(ResourceByName|ResourceBySetOp))* '}';

// In some places, we must allow class names to be referenced and created by set operations.
ResourceIdentifier :
    	ResourceByName 
    | 	ResourceBySetOp ('(' annType+=('alias'|'note') annContent+=ContentList ')')* 
    | 	ResourceByRestriction ('(' annType+=('alias'|'note') annContent+=ContentList ')')*
    ;

ResourceBySetOp :
    UnionResource | IntersectionResource;
    
ResourceByRestriction :
	'(' propName=ResourceByName cond=Condition ')'
	;    

UnionResource :
    '{' names+=ResourceIdentifier (op+=(','|'or') names+=ResourceIdentifier)+ '}';

IntersectionResource :
    '{' names+=ResourceIdentifier (op+='and' names+=ResourceIdentifier)+ '}';

// Classes may be declared in many ways.
ClassDeclaration :
        className=ResourceName 'is' 'a' 'top-level'? 'class'
        (mustBeOneOf=EnumeratedInstances)? (describedBy+=AddlClassInfo)* EOS

    |   classList=ResourceList 'are' 'top-level'? 'classes'
        (describedBy+=AddlClassInfo)* EOS

    |   className=ResourceName 'is' 'a' 'type' 'of' classIdentifier=ResourceIdentifier
        (mustBeOneOf=EnumeratedInstances)? (describedBy+=AddlClassInfo)* EOS
        
    |   classList=ResourceList 'are' 'types' 'of' classIdentifier=ResourceIdentifier
        (describedBy+=AddlClassInfo)* EOS
    ;

// Class declarations may also enumerate the class's instances.
EnumeratedInstances :
    ','? 'must' 'be' 'one' 'of' instanceList=ResourceList;

// Class declarations may also describe the class's properties.
AddlClassInfo :
    	','? 'described' 'by' (propertyByName=ResourceByName | propertyName=ResourceName range=Range)
    | 	','? 'described' 'by' propertyByName=ResourceByName restriction=Condition;

// ... a single value ...
// ... a List of values ...
// ... Lists of values ...
// ... values ...
Range :
//    ('has'|'with') ('a' single='single' 'value'|'values') 'of' 'type' type=RangeType;
    ('has'|'with') ('a' single='single' 'value'|('a' list='List'|lists='Lists') 'of''values'|'values') 'of' 'type' type=RangeType;

RangeType :
        classIdentifier=ResourceIdentifier
    |   dataType=DataType
//	  | dataType=ResourceName
    ;

UserDefinedDataType :
	'data' 'type' userDefinedDataType=ResourceName 'is' restriction=DataTypeRestriction EOS
;

DataTypeRestriction :
		('a'|'an')? basetype=DataType facets=Facets
	|	'{' basetypes += DataType ((','|'or') basetypes+=DataType)+ '}'
	;
	
Facets :	
		minexin=('(' | '[') min=NUMBER? ',' max=NUMBER? maxexin=(']' | ')')
	|	regex=STRING
	|	'length' (len=NUMBER | minlen=NUMBER '-' maxlen=NUMBER)
	|	'{' values+=(STRING|NUMBER) ((',')? values+=(STRING|NUMBER))* '}'
;
 
enum DataType :
    string | boolean | decimal | int | long | float | double | duration | dateTime | time | date |
    gYearMonth | gYear | gMonthDay | gDay | gMonth | hexBinary | base64Binary | anyURI | data;

// These articles can appear before the property name and are indicative of the functionality of the property or
//	the cardinality of the property on the class
AnArticle :
	IndefiniteArticle | DefiniteArticle;

IndefiniteArticle :
	'A'|'a'|'An'|'an';

DefiniteArticle :
	'The'|'the';

// Two classes, properties, or individuals are known to be "the same"
//	-- equivalent sets for classes
//  -- equivalent properties for properties
//  -- the same individual for individuals
EquivalentConcepts :
	class1=ResourceByName 'is' 'the' 'same' 'as' class2=ResourceIdentifier EOS;

// Two classes are known to be disjoint sets.
DisjointClasses :
		class1=ResourceByName 'and' class2=ResourceIdentifier 'are' 'disjoint' EOS
	|	classes=ExistingResourceList 'are' 'disjoint' EOS
	;

// A class is known to be the complement of another class.
ComplementOfClass :
	class1=ResourceByName 'is' 'the' 'same' 'as' 'not' class2=ResourceIdentifier EOS;

// These class restrictions have a similar structure, one of two forms:
//	1) <p> of <C> <cond>, e.g., spouse of Man only has values of type Woman
//	2) <C> <p> <cond>, e.g, Person spouse has at most 1 value
AllValuesFrom :
		restricted=PropertyOfClass cond=AllValuesCondition EOS
	|	className=ResourceIdentifier propertyName=ResourceByName cond=AllValuesCondition EOS
	;

SomeValuesFrom :
		restricted=PropertyOfClass cond=SomeValuesCondition EOS
	|	className=ResourceIdentifier propertyName=ResourceByName cond=SomeValuesCondition EOS
	;

HasValue :
		restricted=PropertyOfClass cond=HasValueCondition EOS
	|	className=ResourceIdentifier propertyName=ResourceByName cond=HasValueCondition EOS
	;

Cardinality :
		restricted=PropertyOfClass cond=CardCondition EOS
	|	className=ResourceIdentifier propertyName=ResourceByName cond=CardCondition EOS
	;

MinCardinality :
		restricted=PropertyOfClass cond=MinCardCondition EOS
	|	className=ResourceIdentifier propertyName=ResourceByName cond=MinCardCondition EOS
	;

MaxCardinality :
		restricted=PropertyOfClass cond=MaxCardCondition EOS
	|	className=ResourceIdentifier propertyName=ResourceByName cond=MaxCardCondition EOS
	;

// These are supporting rules for the above class restrictions
PropertyOfClass :
	propertyName=ResourceByName 'of' className=ResourceIdentifier;

AllValuesCondition :
	'only' 'has' 'values' 'of' 'type' restriction=ResourceIdentifier;

EnumeratedAllValuesFrom :
	restricted=PropertyOfClass 'can' 'only' 'be' 'one' 'of'
	(enumeration=ExistingResourceList | enumeration=LiteralList) EOS;

EnumeratedAllAndSomeValuesFrom :
	restricted=PropertyOfClass 'must' 'be' 'one' 'of'
	(enumeration=ExistingResourceList | enumeration=LiteralList) EOS;

DefaultValue :
	defValueClass=PropertyOfClass 'has' ('level' level=NUMBER)? 'default' defValue=ExplicitValue EOS;

SomeValuesCondition :
	('has'|'with') 'at' 'least' 'one' 'value'
	('of' 'type' restriction=ResourceIdentifier | 'each' 'of' 'types' restriction=ExistingResourceList);

HasValueCondition :
	'always' ('has'|'with') 'value' restriction=ExplicitValue;

MinCardCondition :
	('has'|'with') 'at' 'least' card=NUMBER ('value'|'values') ('of' 'type' classQualifier=ResourceIdentifier)?;

MaxCardCondition :
	('has'|'with') 'at' 'most' card=NUMBER ('value'|'values') ('of' 'type' classQualifier=ResourceIdentifier)?;

CardCondition :
	('has'|'with') 'exactly' card=NUMBER ('value'|'values') ('of' 'type' classQualifier=ResourceIdentifier)?;

// Necessary and sufficient conditions (a sub class is equivalent to a restriction on a superclass).
NecessaryAndSufficient :
	superClass=TypedBNode 'is' article=IndefiniteArticle subClass=ResourceName 'only' 'if'
	propertyName+=ResourceByName cond+=Condition ('and' propertyName+= ResourceByName cond+=Condition)* EOS;

Condition :
    	AllValuesCondition
    |   SomeValuesCondition
    |   HasValueCondition
    |   MinCardCondition
    |   MaxCardCondition
    |   CardCondition
    ;

// Properties may be declared in several ways too.
// e.g., age describes Person with a single value of type decimal.
// e.g., parent describes Person with values of type Person.
// e.g., child describes Person with values of type Person.
PropertyDeclaration :
		propertyName=ResourceName ('is' 'a' 'type' 'of' superPropName=ResourceByName)? (addlPropInfo+=AdditionalPropertyInfo)+ EOS
    |   article=AnArticle? 'relationship' 'of' domain=ResourceIdentifier 'to' rangeResource=ResourceIdentifier 'is' propertyName=ResourceName EOS
	|	annotationProperty=ResourceName 'is' 'a' 'type' 'of' 'annotation' EOS
	;

AdditionalPropertyInfo :
		','? 'describes' domain=ResourceIdentifier
	|	','? cond=Condition
	|	','? range=Range
	|	','? isfunc=IsFunctional
	|	','? isinvfunc=IsInverseFunctional
	|	','? isSym=IsSymmetrical
	|	','? isTrans=IsTransitive
	|	','? isInvOf=IsInverseOf
	;

// Declares an existing property to be functional.
FunctionalProperty :
	propertyName=ResourceByName IsFunctional EOS;

IsFunctional :	'has' 'a' 'single' 'value';

// Declares an existing property to be inverse functional.
InverseFunctionalProperty :
	propertyName=ResourceByName IsInverseFunctional EOS;

IsInverseFunctional :	'has' 'a' 'single' 'subject';

// Declares an existing property to be symmetric
SymmetricalProperty :
	propertyName=ResourceByName IsSymmetrical EOS;

IsSymmetrical : 'is' 'symmetrical';

// Declares an existing property to be transitive.
TransitiveProperty :
	propertyName=ResourceByName IsTransitive EOS;

IsTransitive :	'is' 'transitive';

// Declares two existing properties to be inverses of each other.
InverseProperty :
	propertyName1=ResourceByName invOf=IsInverseOf EOS;

IsInverseOf :	'is' 'the' 'inverse' 'of' propertyName2=ResourceByName;

// This is the general phrase specifying a type: "a <Class>" which is used
// both in data declaration and in patterns for Tests, Queries, and Rules.
// e.g., a Person
TypedBNode :
		article=IndefiniteArticle classIdentifier=ResourceIdentifier
	|	article='any' classIdentifier=ResourceIdentifier;

// Allows a statement to declare an instance.
InstanceDeclarationStatement :
	InstanceDeclaration EOS;

// Declares an instance by either 1 & 2) giving its name and type and
// optionally adding attributes and values or 3) creating a blank node
// by giving it a type and at least one attribute and value.  This rule
// is reused in other places so it can't contain an EOS token.
InstanceDeclaration :
    	typeDecl=TypeDeclaration (addlInfoItems+=PropValPartialTriple)*
// e.g., George is a Person, has age 23, has spouse Martha.
    | 	article=IndefiniteArticle className=ResourceByName instanceName=ResourceName? (addlInfoItems+=PropValPartialTriple)*
// e.g., a Person George with age 23, with spouse Martha.
// e.g., a Birth with child George, with mother Mary, with location (a Location with latitude 38.18611).
    ;

// Issue: type declaration and variable declaration conflict:
//	George is a Person	-- defines new instance of Person (this can be a complete statement)
//	x is a Person		-- says that for variable has constraint x <rdf:type> <Person> (this is never a complete statement)
TypeDeclaration :
    instName=ResourceName 'is' type=TypedBNode;
// e.g., George is a Person.
//		 x is Person

// Two instances are known to not be the same instance.
InstanceDifferentFrom :
	instName1=ResourceByName 'is' 'not' 'the' 'same' 'as' instName2=ResourceByName EOS;

InstancesAllDifferent :
	instances=ExistingResourceList 'are' 'not' 'the' 'same' EOS;

// This is the form for declaring instance data for an existing instance.
ExistingInstanceAttribution :
    	subj=ResourceByName (addlInfoItems+=PropValPartialTriple)+ EOS
// e.g., George has residence (a Location with latitude -76.1, with longitude 38.186, with description "Mount Vernon").
    |	pOfS=OfPatternReturningValues 'is' obj=Object EOS
// e.g., The age of the spouse of Martha is 25 .
    |	obj=ExplicitValue 'is' pOfS=OfPatternReturningValues EOS	// leading object isn't allowed to be an InstanceDeclaration (non-LL)
// e.g., 25 is the age of the spouse of Martha.
    ;

// The object (value) of a triple can be a LiteralValue (DatatypeProperty) or an ResourceByName (ObjectProperty)
Object :
	val = (LiteralValue | ResourceByName | InstanceDeclaration);

// This pattern is used in instance data declarations.
PropValPartialTriple :
    ','? ('has' | 'with')? propertyName=ResourceByName
    (objectValue=ExplicitValue | '(' objectValueBNode=InstanceDeclaration ')');
    // | objectInstanceList=ResourceList  // this would allow a list of object values

/*********************************************************************************************************************/
/*      The rest of the rules in this file are for defining patterns in Tests, Queries, and Rules                    */
/*********************************************************************************************************************/

// This phrase identifies a graph pattern pinned to a point (the subject, at the end of the phrase) and identified by edges (properties)
//	The whole phrase can be thought of as as expression selecting all nodes in the graph from which once can trace "backwards" along
//	the specified edges to arrive at the subject node. All properties except the first in the phrase must be ObjectProperty names. If
//	the first is an ObjectProperty the value(s) selected with be instances; if the first is a DatatypeProperty the value(s) will be
//	literals.
OfPatternReturningValues :
// e.g., latitude of location of NYC
// e.g., the age of a friend of George
// e.g., the age of a father of a Person
		(ofphrs+=OfPhrase)+ subject=ResourceByName
	|	type=TypedBNode
	;

// This is a more complex qualifier
WithChain :
// e.g., with friend with spouse
		wps+=WithPhrase+
	|	'(' wps+=WithPhrase+ ')'
	;

// This is a "forward" or has|with phrase
WithPhrase :
// e.g., , has age 23
// e.g., , with spouse Martha
// e.g., , with friend with spouse with age 23
		','? ('has'|'with') propertyName=ResourceByName value=ExplicitValue
	|	','? ('has'|'with') propertyName=ResourceByName value=IntervalValue
	|	','? ('has'|'with') propertyName=ResourceByName value=(EmbeddedInstanceDeclaration|WithPhrase|LimitedExpression);

EmbeddedInstanceDeclaration :
	'(' InstanceDeclaration ')';

// This is a phrase which returns a set of values like an OfPatternReturningValues except instead of being pinned to a single
//	specified subject the subject is all of the instances returned by a WithPatternReturningInstances
MergedTriples :
	(ops+=OfPhrase)* pivot=TypedBNode (wcs+=WithChain)*;
// e.g., the age of the friend of a Person with spouse with age 21

OfPhrase :
	(article=AnArticle)? propertyName=ResourceByName 'of';

VariableList :
	names+=ResourceName (','? names+=ResourceName)*;

// The Rule statement
Rule :
//	('Rule' name=ID)|(name=ID 'Rule') (':')? ('given' givens=ElementSet)? ('if' ifs=ElementSet)? 'then' thens=ElementSet;
	'Rule' name=NAME (':')? ('given' (givens=ElementSet)?)? ('if' (ifs=ElementSet)?)? 'then' thens=ElementSet EOS;
//// e.g., Rule AreaOfCircle: given x is a Circle then area of x is radius of x ^ 2 * PI.
//// 		 Rule UncleRule: if w is brother of x and x is parent of y then w is uncle of y.
////		 Rule UncleRule: if x has brother y and x has child z then y is uncle of z.

// The Query statement has two forms: 1) explicit "select..." as in SPARQL and 2) implied select using patterns that return one implied variaable
//	The "select" can be ommitted from the first form.
Query :
    'Ask:' expr=Expression EOS;

// The Test statement
Test :
	'Test:' expr=Expression EOS;

// The Expr statement
Expr :
	'Expr:' expr=Expression EOS;

Display :
	'Print:'
			(displayString=STRING EOS
		|	model='Deductions' EOS
		|	model='Model' EOS);

Explanation :
	'Explain:'
			(expr=InstanceDeclaration EOS
		|	expr=ExistingInstanceAttribution
		|	expr=Expression EOS
		| 	'Rule' rulename=NAME EOS)
			;

//// The set of elements used in a Rule block
ElementSet :
	elements+=Expression (','? elements+=Expression)*;

SelectExpression :
	'select' (distinct='distinct'?) (allVars = '*' | varList=VariableList) 'where' expr=OrExpression (orderby='order by' orderList=OrderList)?;

ConstructExpression :
	'construct' subj=ResourceName pred=ResourceName obj=ResourceName 'where' expr=OrExpression
;

AskQueryExpression :
	'ask' 'where' expr=OrExpression
;

OrderList :
	orderList+=OrderElement (','? (orderList+=OrderElement))*;

OrderElement :
	(order=('asc' | 'desc'))? name=ResourceName;

Expression returns Expression :
		SelectExpression
	|   ConstructExpression	
	|   AskQueryExpression	
	| 	OrExpression;

OrExpression returns Expression :
	AndExpression (
		{JunctionExpression.left=current} op=('||' | 'or') right=AndExpression)*;

AndExpression returns Expression :
	RelationalExpression (
		{JunctionExpression.left=current} op=('&&' | 'and') right=RelationalExpression)*;
		
RelationalExpression returns Expression :
	AdditiveExpression (
		{BinaryOpExpression.left=current} op=('=' | '==' | 'is' | '!=' | '<' | '<=' | '>' | '>=') right=AdditiveExpression)*;

AdditiveExpression returns Expression :
	MultiplicativeExpression (
		{BinaryOpExpression.left=current} op=('+' | '-') right=MultiplicativeExpression)*;

MultiplicativeExpression returns Expression :
	UnaryOrPrimaryExpression (
		{BinaryOpExpression.left=current} op=('*' | '/' | '^' | '%') right=UnaryOrPrimaryExpression)*;

NotOnly :
	'not' 'only';
	
UnaryOrPrimaryExpression returns Expression :
		{UnaryOpExpression} op=('!' | 'not' | 'only' | NotOnly | '-') expr=PrimaryExpression
	|	PrimaryExpression
	;

PrimaryExpression returns Expression :
		'(' expr=Expression ')'										// an expression in parentheses
	|	func=ID '(' (args+=Expression (',' args+=Expression)*)? ')'	// built-in calls
	|   gp=GraphPattern												// a graph pattern
	|	ivalue=IntervalValue										// an one-sided interval value
	|	value=ExplicitValue											// an explicit value
	|	valueTable=ValueTable										// a table of values (one or more rows of one or more columns)
	;

LimitedExpression returns Expression :
	LimitedOrExpression;

LimitedOrExpression returns Expression :
	LimitedAndExpression (
		{JunctionExpression.left=current} op=('||' | 'or') right=LimitedAndExpression)*;

LimitedAndExpression returns Expression :
	LimitedRelationalExpression (
		{JunctionExpression.left=current} op=('&&' | 'and') right=LimitedRelationalExpression)*;

LimitedRelationalExpression returns Expression :
	LimitedAdditiveExpression (
		{BinaryOpExpression.left=current} op=('=' | '==' | 'is' | '!=' | '<' | '<=' | '>' | '>=') right=LimitedAdditiveExpression)*;

LimitedAdditiveExpression returns Expression :
	LimitedMultiplicativeExpression (
		{BinaryOpExpression.left=current} op=('+' | '-') right=LimitedMultiplicativeExpression)*;

LimitedMultiplicativeExpression returns Expression :
	LimitedUnaryOrPrimaryExpression (
		{BinaryOpExpression.left=current} op=('*' | '/' | '^' | '%') right=LimitedUnaryOrPrimaryExpression)*;

LimitedUnaryOrPrimaryExpression returns Expression :
		{UnaryOpExpression} op=('!' | '-') expr=LimitedPrimaryExpression
	|	LimitedPrimaryExpression
	;

LimitedPrimaryExpression returns Expression :
		'(' expr=Expression ')'										// an expression in parentheses
	|	func=ID '(' (args+=Expression (',' args+=Expression)*)? ')'	// built-in calls
	|	ivalue=IntervalValue										// an one-sided interval value
	|	value=ExplicitValue											// an explicit value
	|	valueTable=ValueTable										// a table of values (one or more rows of one or more columns)
	;

GraphPattern :
		PropOfSubj
	|	SubjProp
	|	InstAttrSPV
	|	InstAttrPSV
	|	MergedTriples
	|   SubTypeOf
	|   ExistentialNegation
	;

PropOfSubj :
	(ofPhr+=OfPhrase)+ subj=ResourceByName;

SubjProp :
	subj=ResourceByName (hwPhr+=WithPhrase)+;

InstAttrSPV :
	subj=ResourceByName ('has'|'with')? props+=ResourceByName vals+=AdditiveExpression
		(','? ('has'|'with') props+=ResourceByName vals+=(AdditiveExpression))*;

InstAttrPSV :
	prop=PropOfSubj ('is') val=ExplicitValue;

SubTypeOf :
	subclass=ResourceByName 'is' 'a' 'type' 'of' superclass=ResourceByName;
	
ExistentialNegation :
	'there' 'is' 'no' varList=VariableList 'such' 'that' quantified=PrimaryExpression
;	
	
IntervalValue :
	op=('==' | '<' | '<=' | '>' | '>=') expr=AdditiveExpression;

ExplicitValue :
		instName=ResourceByName		// e.g., George
	|	litValue=LiteralValue		// e.g., 38.186111
	|	valueList='[' row=ValueRow ']'
	|	term='PI'					// PI
	|	term='known'				// known
    ;
    
ValueTable :
//	 	row=ValueRow
//		'[' row=ValueRow ']'
// e.g., [George, 23, "Purple", 38.186111]
//	|	
		'{' '[' rows+=ValueRow ']' (','? '[' rows+=ValueRow ']')* '}'
// e.g., {[George, 23, "Purple", 38.186111], [Martha, 24, "Pink", 45.203]}
	;

LiteralValue :
        literalNumber=NUMBER
    |   literalString=STRING
    |   literalBoolean=('true'|'false');

ValueRow :
	explicitValues+=ExplicitValue (',' explicitValues+=ExplicitValue)*;	// e.g., George, 23, "Purple", 38.186111

// NAME should match an optional namespace followed by a local name (separated
// from the namespace by a colon character).  We also need to accept legal URI
// fragments as local names.  In particular, we need names like X.509 to work.
NAME hidden() :
   ID (':' ID)? ( ('-'|'.'|'~') NAME_FRAGMENT? |'%'? NAME_FRAGMENT )*;

NAME_FRAGMENT hidden():
	ID_OR_KEYWORD | UNSIGNED_NUMBER ID_OR_KEYWORD?
;

ID_OR_KEYWORD hidden():
	'a'|'A'|'is'|'are'|/* list allowed name-parts here| */ID
;

// NUMBER matches both integral and floating point numbers.
NUMBER hidden() :
       '-'? UNSIGNED_NUMBER
   ;

terminal UNSIGNED_NUMBER:
     ('0'..'9')+
   | ('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?
   |             '.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?
   | ('0'..'9')+                  ('e'|'E') ('+'|'-')? ('0'..'9')+
;

// INT conflicts with NUMBER so we have to disable it.
terminal INT returns ecore::EInt :
    'this has been disabled';

// EOS matches one whitespace character or EOF after the period in order to
// disambiguate the end of sentence period from periods in names.
terminal EOS :
    '.' (' '|'\t'|'\r'|'\n'|EOF);
