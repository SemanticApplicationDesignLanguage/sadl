/*
* generated by Xtext
*/
package com.ge.research.sadl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.ge.research.sadl.services.MappingGrammarAccess;

public class MappingParser extends AbstractContentAssistParser {
	
	@Inject
	private MappingGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.ge.research.sadl.ui.contentassist.antlr.internal.InternalMappingParser createParser() {
		com.ge.research.sadl.ui.contentassist.antlr.internal.InternalMappingParser result = new com.ge.research.sadl.ui.contentassist.antlr.internal.InternalMappingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getTriplesAlternatives_2_0(), "rule__Model__TriplesAlternatives_2_0");
					put(grammarAccess.getGroupAccess().getGroupLinesAlternatives_1_0(), "rule__Group__GroupLinesAlternatives_1_0");
					put(grammarAccess.getTripleAccess().getSubjAlternatives_0_0(), "rule__Triple__SubjAlternatives_0_0");
					put(grammarAccess.getTripleAccess().getObjvalAlternatives_3_0(), "rule__Triple__ObjvalAlternatives_3_0");
					put(grammarAccess.getLiteralValueAccess().getAlternatives(), "rule__LiteralValue__Alternatives");
					put(grammarAccess.getLiteralValueAccess().getLiteralBooleanAlternatives_2_0(), "rule__LiteralValue__LiteralBooleanAlternatives_2_0");
					put(grammarAccess.getColumnIDAccess().getAlternatives(), "rule__ColumnID__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getNewModelNSAccess().getGroup(), "rule__NewModelNS__Group__0");
					put(grammarAccess.getNewModelNSAccess().getGroup_2(), "rule__NewModelNS__Group_2__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getImportAccess().getGroup_2(), "rule__Import__Group_2__0");
					put(grammarAccess.getGroupAccess().getGroup(), "rule__Group__Group__0");
					put(grammarAccess.getTripleAccess().getGroup(), "rule__Triple__Group__0");
					put(grammarAccess.getNUMBERAccess().getGroup(), "rule__NUMBER__Group__0");
					put(grammarAccess.getRefAccess().getGroup(), "rule__Ref__Group__0");
					put(grammarAccess.getColumnNameAccess().getGroup(), "rule__ColumnName__Group__0");
					put(grammarAccess.getModelAccess().getUriAssignment_0(), "rule__Model__UriAssignment_0");
					put(grammarAccess.getModelAccess().getImportsAssignment_1(), "rule__Model__ImportsAssignment_1");
					put(grammarAccess.getModelAccess().getTriplesAssignment_2(), "rule__Model__TriplesAssignment_2");
					put(grammarAccess.getNewModelNSAccess().getBaseUriAssignment_1(), "rule__NewModelNS__BaseUriAssignment_1");
					put(grammarAccess.getNewModelNSAccess().getPrefixAssignment_2_1(), "rule__NewModelNS__PrefixAssignment_2_1");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getImportAccess().getAliasAssignment_2_1(), "rule__Import__AliasAssignment_2_1");
					put(grammarAccess.getGroupAccess().getGroupLinesAssignment_1(), "rule__Group__GroupLinesAssignment_1");
					put(grammarAccess.getTripleAccess().getSubjAssignment_0(), "rule__Triple__SubjAssignment_0");
					put(grammarAccess.getTripleAccess().getPredAssignment_2(), "rule__Triple__PredAssignment_2");
					put(grammarAccess.getTripleAccess().getObjvalAssignment_3(), "rule__Triple__ObjvalAssignment_3");
					put(grammarAccess.getLiteralValueAccess().getLiteralNumberAssignment_0(), "rule__LiteralValue__LiteralNumberAssignment_0");
					put(grammarAccess.getLiteralValueAccess().getLiteralStringAssignment_1(), "rule__LiteralValue__LiteralStringAssignment_1");
					put(grammarAccess.getLiteralValueAccess().getLiteralBooleanAssignment_2(), "rule__LiteralValue__LiteralBooleanAssignment_2");
					put(grammarAccess.getRefAccess().getRefAssignment_0(), "rule__Ref__RefAssignment_0");
					put(grammarAccess.getRefAccess().getAddlcolsAssignment_1(), "rule__Ref__AddlcolsAssignment_1");
					put(grammarAccess.getRefAccess().getRowAssignment_3(), "rule__Ref__RowAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.ge.research.sadl.ui.contentassist.antlr.internal.InternalMappingParser typedParser = (com.ge.research.sadl.ui.contentassist.antlr.internal.InternalMappingParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MappingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MappingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
