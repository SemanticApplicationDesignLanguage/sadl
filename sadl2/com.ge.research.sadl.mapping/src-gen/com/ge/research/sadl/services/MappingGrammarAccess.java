/*
* generated by Xtext
*/
package com.ge.research.sadl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MappingGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUriAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUriNewModelNSParserRuleCall_0_0 = (RuleCall)cUriAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cTriplesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTriplesAlternatives_2_0 = (Alternatives)cTriplesAssignment_2.eContents().get(0);
		private final RuleCall cTriplesTripleParserRuleCall_2_0_0 = (RuleCall)cTriplesAlternatives_2_0.eContents().get(0);
		private final RuleCall cTriplesGroupParserRuleCall_2_0_1 = (RuleCall)cTriplesAlternatives_2_0.eContents().get(1);
		
		//Model:
		//	uri=NewModelNS imports+=Import* triples+=(Triple | Group)*;
		public ParserRule getRule() { return rule; }

		//uri=NewModelNS imports+=Import* triples+=(Triple | Group)*
		public Group getGroup() { return cGroup; }

		//uri=NewModelNS
		public Assignment getUriAssignment_0() { return cUriAssignment_0; }

		//NewModelNS
		public RuleCall getUriNewModelNSParserRuleCall_0_0() { return cUriNewModelNSParserRuleCall_0_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//triples+=(Triple | Group)*
		public Assignment getTriplesAssignment_2() { return cTriplesAssignment_2; }

		//Triple | Group
		public Alternatives getTriplesAlternatives_2_0() { return cTriplesAlternatives_2_0; }

		//Triple
		public RuleCall getTriplesTripleParserRuleCall_2_0_0() { return cTriplesTripleParserRuleCall_2_0_0; }

		//Group
		public RuleCall getTriplesGroupParserRuleCall_2_0_1() { return cTriplesGroupParserRuleCall_2_0_1; }
	}

	public class NewModelNSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewModelNS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUriKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseUriSTRINGTerminalRuleCall_1_0 = (RuleCall)cBaseUriAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPrefixAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrefixIDTerminalRuleCall_2_1_0 = (RuleCall)cPrefixAssignment_2_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//NewModelNS:
		//	"uri" baseUri=STRING ("alias" prefix=ID)? EOS;
		public ParserRule getRule() { return rule; }

		//"uri" baseUri=STRING ("alias" prefix=ID)? EOS
		public Group getGroup() { return cGroup; }

		//"uri"
		public Keyword getUriKeyword_0() { return cUriKeyword_0; }

		//baseUri=STRING
		public Assignment getBaseUriAssignment_1() { return cBaseUriAssignment_1; }

		//STRING
		public RuleCall getBaseUriSTRINGTerminalRuleCall_1_0() { return cBaseUriSTRINGTerminalRuleCall_1_0; }

		//("alias" prefix=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"alias"
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }

		//prefix=ID
		public Assignment getPrefixAssignment_2_1() { return cPrefixAssignment_2_1; }

		//ID
		public RuleCall getPrefixIDTerminalRuleCall_2_1_0() { return cPrefixIDTerminalRuleCall_2_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_3() { return cEOSTerminalRuleCall_3; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final RuleCall cEOSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Import:
		//	"import" importURI=STRING ("as" alias=ID)? EOS;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING ("as" alias=ID)? EOS
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//("as" alias=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_3() { return cEOSTerminalRuleCall_3; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGroupLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cGroupLinesAlternatives_1_0 = (Alternatives)cGroupLinesAssignment_1.eContents().get(0);
		private final RuleCall cGroupLinesTripleParserRuleCall_1_0_0 = (RuleCall)cGroupLinesAlternatives_1_0.eContents().get(0);
		private final RuleCall cGroupLinesGroupParserRuleCall_1_0_1 = (RuleCall)cGroupLinesAlternatives_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEOSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Group:
		//	"{" groupLines+=(Triple | Group)+ "}" EOS;
		public ParserRule getRule() { return rule; }

		//"{" groupLines+=(Triple | Group)+ "}" EOS
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//groupLines+=(Triple | Group)+
		public Assignment getGroupLinesAssignment_1() { return cGroupLinesAssignment_1; }

		//Triple | Group
		public Alternatives getGroupLinesAlternatives_1_0() { return cGroupLinesAlternatives_1_0; }

		//Triple
		public RuleCall getGroupLinesTripleParserRuleCall_1_0_0() { return cGroupLinesTripleParserRuleCall_1_0_0; }

		//Group
		public RuleCall getGroupLinesGroupParserRuleCall_1_0_1() { return cGroupLinesGroupParserRuleCall_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//EOS
		public RuleCall getEOSTerminalRuleCall_3() { return cEOSTerminalRuleCall_3; }
	}

	public class TripleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Triple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSubjAlternatives_0_0 = (Alternatives)cSubjAssignment_0.eContents().get(0);
		private final RuleCall cSubjRefParserRuleCall_0_0_0 = (RuleCall)cSubjAlternatives_0_0.eContents().get(0);
		private final CrossReference cSubjResourceNameCrossReference_0_0_1 = (CrossReference)cSubjAlternatives_0_0.eContents().get(1);
		private final RuleCall cSubjResourceNameIDTerminalRuleCall_0_0_1_1 = (RuleCall)cSubjResourceNameCrossReference_0_0_1.eContents().get(1);
		private final Keyword cHasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPredResourceNameCrossReference_2_0 = (CrossReference)cPredAssignment_2.eContents().get(0);
		private final RuleCall cPredResourceNameIDTerminalRuleCall_2_0_1 = (RuleCall)cPredResourceNameCrossReference_2_0.eContents().get(1);
		private final Assignment cObjvalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cObjvalAlternatives_3_0 = (Alternatives)cObjvalAssignment_3.eContents().get(0);
		private final RuleCall cObjvalRefParserRuleCall_3_0_0 = (RuleCall)cObjvalAlternatives_3_0.eContents().get(0);
		private final CrossReference cObjvalResourceNameCrossReference_3_0_1 = (CrossReference)cObjvalAlternatives_3_0.eContents().get(1);
		private final RuleCall cObjvalResourceNameIDTerminalRuleCall_3_0_1_1 = (RuleCall)cObjvalResourceNameCrossReference_3_0_1.eContents().get(1);
		private final RuleCall cObjvalLiteralValueParserRuleCall_3_0_2 = (RuleCall)cObjvalAlternatives_3_0.eContents().get(2);
		
		//Triple:
		//	subj=(Ref | [sadl::ResourceName]) "has"? pred=[sadl::ResourceName] objval=(Ref | [sadl::ResourceName] |
		//	LiteralValue);
		public ParserRule getRule() { return rule; }

		//subj=(Ref | [sadl::ResourceName]) "has"? pred=[sadl::ResourceName] objval=(Ref | [sadl::ResourceName] | LiteralValue)
		public Group getGroup() { return cGroup; }

		//subj=(Ref | [sadl::ResourceName])
		public Assignment getSubjAssignment_0() { return cSubjAssignment_0; }

		//(Ref | [sadl::ResourceName])
		public Alternatives getSubjAlternatives_0_0() { return cSubjAlternatives_0_0; }

		//Ref
		public RuleCall getSubjRefParserRuleCall_0_0_0() { return cSubjRefParserRuleCall_0_0_0; }

		//[sadl::ResourceName]
		public CrossReference getSubjResourceNameCrossReference_0_0_1() { return cSubjResourceNameCrossReference_0_0_1; }

		//ID
		public RuleCall getSubjResourceNameIDTerminalRuleCall_0_0_1_1() { return cSubjResourceNameIDTerminalRuleCall_0_0_1_1; }

		//"has"?
		public Keyword getHasKeyword_1() { return cHasKeyword_1; }

		//pred=[sadl::ResourceName]
		public Assignment getPredAssignment_2() { return cPredAssignment_2; }

		//[sadl::ResourceName]
		public CrossReference getPredResourceNameCrossReference_2_0() { return cPredResourceNameCrossReference_2_0; }

		//ID
		public RuleCall getPredResourceNameIDTerminalRuleCall_2_0_1() { return cPredResourceNameIDTerminalRuleCall_2_0_1; }

		//objval=(Ref | [sadl::ResourceName] | LiteralValue)
		public Assignment getObjvalAssignment_3() { return cObjvalAssignment_3; }

		//(Ref | [sadl::ResourceName] | LiteralValue)
		public Alternatives getObjvalAlternatives_3_0() { return cObjvalAlternatives_3_0; }

		//Ref
		public RuleCall getObjvalRefParserRuleCall_3_0_0() { return cObjvalRefParserRuleCall_3_0_0; }

		//[sadl::ResourceName]
		public CrossReference getObjvalResourceNameCrossReference_3_0_1() { return cObjvalResourceNameCrossReference_3_0_1; }

		//ID
		public RuleCall getObjvalResourceNameIDTerminalRuleCall_3_0_1_1() { return cObjvalResourceNameIDTerminalRuleCall_3_0_1_1; }

		//LiteralValue
		public RuleCall getObjvalLiteralValueParserRuleCall_3_0_2() { return cObjvalLiteralValueParserRuleCall_3_0_2; }
	}

	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralNumberNUMBERParserRuleCall_0_0 = (RuleCall)cLiteralNumberAssignment_0.eContents().get(0);
		private final Assignment cLiteralStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cLiteralStringAssignment_1.eContents().get(0);
		private final Assignment cLiteralBooleanAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cLiteralBooleanAlternatives_2_0 = (Alternatives)cLiteralBooleanAssignment_2.eContents().get(0);
		private final Keyword cLiteralBooleanTrueKeyword_2_0_0 = (Keyword)cLiteralBooleanAlternatives_2_0.eContents().get(0);
		private final Keyword cLiteralBooleanFalseKeyword_2_0_1 = (Keyword)cLiteralBooleanAlternatives_2_0.eContents().get(1);
		
		//LiteralValue:
		//	literalNumber=NUMBER | literalString=STRING | literalBoolean=("true" | "false");
		public ParserRule getRule() { return rule; }

		//literalNumber=NUMBER | literalString=STRING | literalBoolean=("true" | "false")
		public Alternatives getAlternatives() { return cAlternatives; }

		//literalNumber=NUMBER
		public Assignment getLiteralNumberAssignment_0() { return cLiteralNumberAssignment_0; }

		//NUMBER
		public RuleCall getLiteralNumberNUMBERParserRuleCall_0_0() { return cLiteralNumberNUMBERParserRuleCall_0_0; }

		//literalString=STRING
		public Assignment getLiteralStringAssignment_1() { return cLiteralStringAssignment_1; }

		//STRING
		public RuleCall getLiteralStringSTRINGTerminalRuleCall_1_0() { return cLiteralStringSTRINGTerminalRuleCall_1_0; }

		//literalBoolean=("true" | "false")
		public Assignment getLiteralBooleanAssignment_2() { return cLiteralBooleanAssignment_2; }

		//"true" | "false"
		public Alternatives getLiteralBooleanAlternatives_2_0() { return cLiteralBooleanAlternatives_2_0; }

		//"true"
		public Keyword getLiteralBooleanTrueKeyword_2_0_0() { return cLiteralBooleanTrueKeyword_2_0_0; }

		//"false"
		public Keyword getLiteralBooleanFalseKeyword_2_0_1() { return cLiteralBooleanFalseKeyword_2_0_1; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cUNSIGNED_NUMBERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// NUMBER matches both integral and floating point numbers.
		//NUMBER hidden():
		//	"-"? UNSIGNED_NUMBER;
		public ParserRule getRule() { return rule; }

		//"-"? UNSIGNED_NUMBER
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//UNSIGNED_NUMBER
		public RuleCall getUNSIGNED_NUMBERTerminalRuleCall_1() { return cUNSIGNED_NUMBERTerminalRuleCall_1; }
	}

	public class RefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefColumnNameParserRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Assignment cAddlcolsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAddlcols_Keyword_1_0 = (Keyword)cAddlcolsAssignment_1.eContents().get(0);
		private final RuleCall cColumnNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cRowLeftParenthesisRightParenthesisKeyword_3_0 = (Keyword)cRowAssignment_3.eContents().get(0);
		
		//Ref:
		//	ref=ColumnName addlcols+="_"? ColumnName* row="()"?;
		public ParserRule getRule() { return rule; }

		//ref=ColumnName addlcols+="_"? ColumnName* row="()"?
		public Group getGroup() { return cGroup; }

		//ref=ColumnName
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//ColumnName
		public RuleCall getRefColumnNameParserRuleCall_0_0() { return cRefColumnNameParserRuleCall_0_0; }

		//addlcols+="_"?
		public Assignment getAddlcolsAssignment_1() { return cAddlcolsAssignment_1; }

		//"_"
		public Keyword getAddlcols_Keyword_1_0() { return cAddlcols_Keyword_1_0; }

		//ColumnName*
		public RuleCall getColumnNameParserRuleCall_2() { return cColumnNameParserRuleCall_2; }

		//row="()"?
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }

		//"()"
		public Keyword getRowLeftParenthesisRightParenthesisKeyword_3_0() { return cRowLeftParenthesisRightParenthesisKeyword_3_0; }
	}

	public class ColumnNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cColumnIDParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ColumnName:
		//	"<" ColumnID ">";
		public ParserRule getRule() { return rule; }

		//"<" ColumnID ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//ColumnID
		public RuleCall getColumnIDParserRuleCall_1() { return cColumnIDParserRuleCall_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class ColumnIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDIGITSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ColumnID:
		//	ID | DIGITS;
		public ParserRule getRule() { return rule; }

		//ID | DIGITS
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//DIGITS
		public RuleCall getDIGITSTerminalRuleCall_1() { return cDIGITSTerminalRuleCall_1; }
	}
	
	
	private ModelElements pModel;
	private NewModelNSElements pNewModelNS;
	private ImportElements pImport;
	private GroupElements pGroup;
	private TripleElements pTriple;
	private LiteralValueElements pLiteralValue;
	private NUMBERElements pNUMBER;
	private RefElements pRef;
	private ColumnNameElements pColumnName;
	private ColumnIDElements pColumnID;
	private TerminalRule tDIGITS;
	private TerminalRule tUNSIGNED_NUMBER;
	private TerminalRule tEOS;
	private TerminalRule tWS;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public MappingGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ge.research.sadl.Mapping".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	uri=NewModelNS imports+=Import* triples+=(Triple | Group)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//NewModelNS:
	//	"uri" baseUri=STRING ("alias" prefix=ID)? EOS;
	public NewModelNSElements getNewModelNSAccess() {
		return (pNewModelNS != null) ? pNewModelNS : (pNewModelNS = new NewModelNSElements());
	}
	
	public ParserRule getNewModelNSRule() {
		return getNewModelNSAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING ("as" alias=ID)? EOS;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Group:
	//	"{" groupLines+=(Triple | Group)+ "}" EOS;
	public GroupElements getGroupAccess() {
		return (pGroup != null) ? pGroup : (pGroup = new GroupElements());
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//Triple:
	//	subj=(Ref | [sadl::ResourceName]) "has"? pred=[sadl::ResourceName] objval=(Ref | [sadl::ResourceName] |
	//	LiteralValue);
	public TripleElements getTripleAccess() {
		return (pTriple != null) ? pTriple : (pTriple = new TripleElements());
	}
	
	public ParserRule getTripleRule() {
		return getTripleAccess().getRule();
	}

	//LiteralValue:
	//	literalNumber=NUMBER | literalString=STRING | literalBoolean=("true" | "false");
	public LiteralValueElements getLiteralValueAccess() {
		return (pLiteralValue != null) ? pLiteralValue : (pLiteralValue = new LiteralValueElements());
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}

	//// NUMBER matches both integral and floating point numbers.
	//NUMBER hidden():
	//	"-"? UNSIGNED_NUMBER;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//Ref:
	//	ref=ColumnName addlcols+="_"? ColumnName* row="()"?;
	public RefElements getRefAccess() {
		return (pRef != null) ? pRef : (pRef = new RefElements());
	}
	
	public ParserRule getRefRule() {
		return getRefAccess().getRule();
	}

	//ColumnName:
	//	"<" ColumnID ">";
	public ColumnNameElements getColumnNameAccess() {
		return (pColumnName != null) ? pColumnName : (pColumnName = new ColumnNameElements());
	}
	
	public ParserRule getColumnNameRule() {
		return getColumnNameAccess().getRule();
	}

	//ColumnID:
	//	ID | DIGITS;
	public ColumnIDElements getColumnIDAccess() {
		return (pColumnID != null) ? pColumnID : (pColumnID = new ColumnIDElements());
	}
	
	public ParserRule getColumnIDRule() {
		return getColumnIDAccess().getRule();
	}

	//terminal DIGITS:
	//	"0".."9"+;
	public TerminalRule getDIGITSRule() {
		return (tDIGITS != null) ? tDIGITS : (tDIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGITS"));
	} 

	//terminal UNSIGNED_NUMBER:
	//	DIGITS | DIGITS "." "0".."9"* (("e" | "E") ("+" | "-")? DIGITS)? | "." DIGITS (("e" | "E") ("+" | "-")? DIGITS)? |
	//	DIGITS ("e" | "E") ("+" | "-")? DIGITS;
	public TerminalRule getUNSIGNED_NUMBERRule() {
		return (tUNSIGNED_NUMBER != null) ? tUNSIGNED_NUMBER : (tUNSIGNED_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNSIGNED_NUMBER"));
	} 

	//// EOS matches one whitespace character or EOF after the period in order to
	//// disambiguate the end of sentence period from periods in names.
	//terminal EOS: //    '.' (WS|EOF);
	//	"." (" " | "\t" | "\r" | "\n" | EOF);
	public TerminalRule getEOSRule() {
		return (tEOS != null) ? tEOS : (tEOS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EOS"));
	} 

	//terminal WS:
	//	(" " | " " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9" | "-" | "%" | "~")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	////terminal IDEXT :
	////	('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'-'|'.'|'('|')'|'/'|':'|'%'|'#')*;    
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
