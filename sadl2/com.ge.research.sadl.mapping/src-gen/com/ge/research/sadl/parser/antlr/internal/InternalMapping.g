/*
* generated by Xtext
*/
grammar InternalMapping;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.ge.research.sadl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.ge.research.sadl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.ge.research.sadl.services.MappingGrammarAccess;

}

@parser::members {

 	private MappingGrammarAccess grammarAccess;
 	
    public InternalMappingParser(TokenStream input, MappingGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MappingGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getUriNewModelNSParserRuleCall_0_0()); 
	    }
		lv_uri_0_0=ruleNewModelNS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"uri",
        		lv_uri_0_0, 
        		"NewModelNS");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTriplesTripleParserRuleCall_2_0_0()); 
	    }
		lv_triples_2_1=ruleTriple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"triples",
        		lv_triples_2_1, 
        		"Triple");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTriplesGroupParserRuleCall_2_0_1()); 
	    }
		lv_triples_2_2=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"triples",
        		lv_triples_2_2, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*)
;





// Entry rule entryRuleNewModelNS
entryRuleNewModelNS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewModelNSRule()); }
	 iv_ruleNewModelNS=ruleNewModelNS 
	 { $current=$iv_ruleNewModelNS.current; } 
	 EOF 
;

// Rule NewModelNS
ruleNewModelNS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='uri' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNewModelNSAccess().getUriKeyword_0());
    }
(
(
		lv_baseUri_1_0=RULE_STRING
		{
			newLeafNode(lv_baseUri_1_0, grammarAccess.getNewModelNSAccess().getBaseUriSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewModelNSRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"baseUri",
        		lv_baseUri_1_0, 
        		"STRING");
	    }

)
)(	otherlv_2='alias' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNewModelNSAccess().getAliasKeyword_2_0());
    }
(
(
		lv_prefix_3_0=RULE_ID
		{
			newLeafNode(lv_prefix_3_0, grammarAccess.getNewModelNSAccess().getPrefixIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewModelNSRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prefix",
        		lv_prefix_3_0, 
        		"ID");
	    }

)
))?this_EOS_4=RULE_EOS
    { 
    newLeafNode(this_EOS_4, grammarAccess.getNewModelNSAccess().getEOSTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
)(	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getAsKeyword_2_0());
    }
(
(
		lv_alias_3_0=RULE_ID
		{
			newLeafNode(lv_alias_3_0, grammarAccess.getImportAccess().getAliasIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"alias",
        		lv_alias_3_0, 
        		"ID");
	    }

)
))?this_EOS_4=RULE_EOS
    { 
    newLeafNode(this_EOS_4, grammarAccess.getImportAccess().getEOSTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getGroupLinesTripleParserRuleCall_1_0_0()); 
	    }
		lv_groupLines_1_1=ruleTriple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"groupLines",
        		lv_groupLines_1_1, 
        		"Triple");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getGroupLinesGroupParserRuleCall_1_0_1()); 
	    }
		lv_groupLines_1_2=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"groupLines",
        		lv_groupLines_1_2, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_2());
    }
this_EOS_3=RULE_EOS
    { 
    newLeafNode(this_EOS_3, grammarAccess.getGroupAccess().getEOSTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleTriple
entryRuleTriple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTripleRule()); }
	 iv_ruleTriple=ruleTriple 
	 { $current=$iv_ruleTriple.current; } 
	 EOF 
;

// Rule Triple
ruleTriple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getTripleAccess().getSubjRefParserRuleCall_0_0_0()); 
	    }
		lv_subj_0_1=ruleRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTripleRule());
	        }
       		set(
       			$current, 
       			"subj",
        		lv_subj_0_1, 
        		"Ref");
	        afterParserOrEnumRuleCall();
	    }

    |		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTripleRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTripleAccess().getSubjResourceNameCrossReference_0_0_1()); 
	}

)

)
)(	otherlv_1='has' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTripleAccess().getHasKeyword_1());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTripleRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTripleAccess().getPredResourceNameCrossReference_2_0()); 
	}

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTripleAccess().getObjvalRefParserRuleCall_3_0_0()); 
	    }
		lv_objval_3_1=ruleRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTripleRule());
	        }
       		set(
       			$current, 
       			"objval",
        		lv_objval_3_1, 
        		"Ref");
	        afterParserOrEnumRuleCall();
	    }

    |		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTripleRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTripleAccess().getObjvalResourceNameCrossReference_3_0_1()); 
	}

    |		{ 
	        newCompositeNode(grammarAccess.getTripleAccess().getObjvalLiteralValueParserRuleCall_3_0_2()); 
	    }
		lv_objval_3_5=ruleLiteralValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTripleRule());
	        }
       		set(
       			$current, 
       			"objval",
        		lv_objval_3_5, 
        		"LiteralValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleLiteralValue
entryRuleLiteralValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralValueRule()); }
	 iv_ruleLiteralValue=ruleLiteralValue 
	 { $current=$iv_ruleLiteralValue.current; } 
	 EOF 
;

// Rule LiteralValue
ruleLiteralValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralValueAccess().getLiteralNumberNUMBERParserRuleCall_0_0()); 
	    }
		lv_literalNumber_0_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralValueRule());
	        }
       		set(
       			$current, 
       			"literalNumber",
        		lv_literalNumber_0_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_literalString_1_0=RULE_STRING
		{
			newLeafNode(lv_literalString_1_0, grammarAccess.getLiteralValueAccess().getLiteralStringSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"literalString",
        		lv_literalString_1_0, 
        		"STRING");
	    }

)
)
    |(
(
(
		lv_literalBoolean_2_1=	'true' 
    {
        newLeafNode(lv_literalBoolean_2_1, grammarAccess.getLiteralValueAccess().getLiteralBooleanTrueKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literalBoolean", lv_literalBoolean_2_1, null);
	    }

    |		lv_literalBoolean_2_2=	'false' 
    {
        newLeafNode(lv_literalBoolean_2_2, grammarAccess.getLiteralValueAccess().getLiteralBooleanFalseKeyword_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literalBoolean", lv_literalBoolean_2_2, null);
	    }

)

)
))
;





// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); } 
	 iv_ruleNUMBER=ruleNUMBER 
	 { $current=$iv_ruleNUMBER.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_UNSIGNED_NUMBER_1=RULE_UNSIGNED_NUMBER    {
		$current.merge(this_UNSIGNED_NUMBER_1);
    }

    { 
    newLeafNode(this_UNSIGNED_NUMBER_1, grammarAccess.getNUMBERAccess().getUNSIGNED_NUMBERTerminalRuleCall_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleRef
entryRuleRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefRule()); }
	 iv_ruleRef=ruleRef 
	 { $current=$iv_ruleRef.current; } 
	 EOF 
;

// Rule Ref
ruleRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRefAccess().getRefColumnNameParserRuleCall_0_0()); 
	    }
		lv_ref_0_0=ruleColumnName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_0_0, 
        		"ColumnName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_addlcols_1_0=	'_' 
    {
        newLeafNode(lv_addlcols_1_0, grammarAccess.getRefAccess().getAddlcols_Keyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefRule());
	        }
       		addWithLastConsumed($current, "addlcols", lv_addlcols_1_0, "_");
	    }

)
)?(
    { 
        newCompositeNode(grammarAccess.getRefAccess().getColumnNameParserRuleCall_2()); 
    }
ruleColumnName
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		lv_row_3_0=	'()' 
    {
        newLeafNode(lv_row_3_0, grammarAccess.getRefAccess().getRowLeftParenthesisRightParenthesisKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefRule());
	        }
       		setWithLastConsumed($current, "row", lv_row_3_0, "()");
	    }

)
)?)
;





// Entry rule entryRuleColumnName
entryRuleColumnName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnNameRule()); } 
	 iv_ruleColumnName=ruleColumnName 
	 { $current=$iv_ruleColumnName.current.getText(); }  
	 EOF 
;

// Rule ColumnName
ruleColumnName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColumnNameAccess().getLessThanSignKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getColumnNameAccess().getColumnIDParserRuleCall_1()); 
    }
    this_ColumnID_1=ruleColumnID    {
		$current.merge(this_ColumnID_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColumnNameAccess().getGreaterThanSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleColumnID
entryRuleColumnID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnIDRule()); } 
	 iv_ruleColumnID=ruleColumnID 
	 { $current=$iv_ruleColumnID.current.getText(); }  
	 EOF 
;

// Rule ColumnID
ruleColumnID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getColumnIDAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_DIGITS_1=RULE_DIGITS    {
		$current.merge(this_DIGITS_1);
    }

    { 
    newLeafNode(this_DIGITS_1, grammarAccess.getColumnIDAccess().getDIGITSTerminalRuleCall_1()); 
    }
)
    ;





RULE_DIGITS : ('0'..'9')+;

RULE_UNSIGNED_NUMBER : (RULE_DIGITS|RULE_DIGITS '.' ('0'..'9')* (('e'|'E') ('+'|'-')? RULE_DIGITS)?|'.' RULE_DIGITS (('e'|'E') ('+'|'-')? RULE_DIGITS)?|RULE_DIGITS ('e'|'E') ('+'|'-')? RULE_DIGITS);

RULE_EOS : '.' (' '|'\t'|'\r'|'\n'|EOF);

RULE_WS : ('\u00A0'|' '|'\t'|'\r'|'\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'-'|'%'|'~')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;


